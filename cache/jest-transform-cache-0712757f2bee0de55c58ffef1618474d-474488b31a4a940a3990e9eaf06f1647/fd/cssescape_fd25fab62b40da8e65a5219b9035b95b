73f0f03cc4a042a6ee4fe7f871bfcc91
/* istanbul ignore next */
"use strict";

/*! https://mths.be/cssescape v1.5.1 by @mathias | MIT license */
;
(function (root, factory) {
  // https://github.com/umdjs/umd/blob/master/returnExports.js
  if (typeof exports == 'object') {
    // For Node.js.
    module.exports = factory(root);
  } else if (typeof define == 'function' && define.amd) {
    // For AMD. Register as an anonymous module.
    define([], factory.bind(root, root));
  } else {
    // For browser globals (not exposing the function separately).
    factory(root);
  }
})(typeof global != 'undefined' ? global :
/* istanbul ignore next */
void 0, function (root) {
  if (root.CSS && root.CSS.escape) {
    return root.CSS.escape;
  }

  // https://drafts.csswg.org/cssom/#serialize-an-identifier
  var cssEscape = function (value) {
    if (arguments.length == 0) {
      throw new TypeError('`CSS.escape` requires an argument.');
    }
    var string = String(value);
    var length = string.length;
    var index = -1;
    var codeUnit;
    var result = '';
    var firstCodeUnit = string.charCodeAt(0);
    while (++index < length) {
      codeUnit = string.charCodeAt(index);
      // Note: there’s no need to special-case astral symbols, surrogate
      // pairs, or lone surrogates.

      // If the character is NULL (U+0000), then the REPLACEMENT CHARACTER
      // (U+FFFD).
      if (codeUnit == 0x0000) {
        result += '\uFFFD';
        continue;
      }
      if (
      // If the character is in the range [\1-\1F] (U+0001 to U+001F) or is
      // U+007F, […]
      codeUnit >= 0x0001 && codeUnit <= 0x001F || codeUnit == 0x007F ||
      // If the character is the first character and is in the range [0-9]
      // (U+0030 to U+0039), […]
      index == 0 && codeUnit >= 0x0030 && codeUnit <= 0x0039 ||
      // If the character is the second character and is in the range [0-9]
      // (U+0030 to U+0039) and the first character is a `-` (U+002D), […]

      index == 1 && codeUnit >= 0x0030 && codeUnit <= 0x0039 && firstCodeUnit == 0x002D) {
        // https://drafts.csswg.org/cssom/#escape-a-character-as-code-point
        result += '\\' + codeUnit.toString(16) + ' ';
        continue;
      }
      if (
      // If the character is the first character and is a `-` (U+002D), and
      // there is no second character, […]
      index == 0 && length == 1 && codeUnit == 0x002D) {
        result += '\\' + string.charAt(index);
        continue;
      }

      // If the character is not handled by one of the above rules and is
      // greater than or equal to U+0080, is `-` (U+002D) or `_` (U+005F), or
      // is in one of the ranges [0-9] (U+0030 to U+0039), [A-Z] (U+0041 to
      // U+005A), or [a-z] (U+0061 to U+007A), […]
      if (codeUnit >= 0x0080 || codeUnit == 0x002D || codeUnit == 0x005F || codeUnit >= 0x0030 && codeUnit <= 0x0039 || codeUnit >= 0x0041 && codeUnit <= 0x005A || codeUnit >= 0x0061 && codeUnit <= 0x007A) {
        // the character itself
        result += string.charAt(index);
        continue;
      }

      // Otherwise, the escaped character.
      // https://drafts.csswg.org/cssom/#escape-a-character
      result += '\\' + string.charAt(index);
    }
    return result;
  };
  if (!root.CSS) {
    root.CSS = {};
  }
  root.CSS.escape = cssEscape;
  return cssEscape;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyb290IiwiZmFjdG9yeSIsImV4cG9ydHMiLCJtb2R1bGUiLCJkZWZpbmUiLCJhbWQiLCJiaW5kIiwiZ2xvYmFsIiwiQ1NTIiwiZXNjYXBlIiwiY3NzRXNjYXBlIiwidmFsdWUiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJUeXBlRXJyb3IiLCJzdHJpbmciLCJTdHJpbmciLCJpbmRleCIsImNvZGVVbml0IiwicmVzdWx0IiwiZmlyc3RDb2RlVW5pdCIsImNoYXJDb2RlQXQiLCJ0b1N0cmluZyIsImNoYXJBdCJdLCJzb3VyY2VzIjpbImNzcy5lc2NhcGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIGh0dHBzOi8vbXRocy5iZS9jc3Nlc2NhcGUgdjEuNS4xIGJ5IEBtYXRoaWFzIHwgTUlUIGxpY2Vuc2UgKi9cbjsoZnVuY3Rpb24ocm9vdCwgZmFjdG9yeSkge1xuXHQvLyBodHRwczovL2dpdGh1Yi5jb20vdW1kanMvdW1kL2Jsb2IvbWFzdGVyL3JldHVybkV4cG9ydHMuanNcblx0aWYgKHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnKSB7XG5cdFx0Ly8gRm9yIE5vZGUuanMuXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJvb3QpO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gRm9yIEFNRC4gUmVnaXN0ZXIgYXMgYW4gYW5vbnltb3VzIG1vZHVsZS5cblx0XHRkZWZpbmUoW10sIGZhY3RvcnkuYmluZChyb290LCByb290KSk7XG5cdH0gZWxzZSB7XG5cdFx0Ly8gRm9yIGJyb3dzZXIgZ2xvYmFscyAobm90IGV4cG9zaW5nIHRoZSBmdW5jdGlvbiBzZXBhcmF0ZWx5KS5cblx0XHRmYWN0b3J5KHJvb3QpO1xuXHR9XG59KHR5cGVvZiBnbG9iYWwgIT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWwgOiB0aGlzLCBmdW5jdGlvbihyb290KSB7XG5cblx0aWYgKHJvb3QuQ1NTICYmIHJvb3QuQ1NTLmVzY2FwZSkge1xuXHRcdHJldHVybiByb290LkNTUy5lc2NhcGU7XG5cdH1cblxuXHQvLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3Nzb20vI3NlcmlhbGl6ZS1hbi1pZGVudGlmaWVyXG5cdHZhciBjc3NFc2NhcGUgPSBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdGlmIChhcmd1bWVudHMubGVuZ3RoID09IDApIHtcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ2BDU1MuZXNjYXBlYCByZXF1aXJlcyBhbiBhcmd1bWVudC4nKTtcblx0XHR9XG5cdFx0dmFyIHN0cmluZyA9IFN0cmluZyh2YWx1ZSk7XG5cdFx0dmFyIGxlbmd0aCA9IHN0cmluZy5sZW5ndGg7XG5cdFx0dmFyIGluZGV4ID0gLTE7XG5cdFx0dmFyIGNvZGVVbml0O1xuXHRcdHZhciByZXN1bHQgPSAnJztcblx0XHR2YXIgZmlyc3RDb2RlVW5pdCA9IHN0cmluZy5jaGFyQ29kZUF0KDApO1xuXHRcdHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG5cdFx0XHRjb2RlVW5pdCA9IHN0cmluZy5jaGFyQ29kZUF0KGluZGV4KTtcblx0XHRcdC8vIE5vdGU6IHRoZXJl4oCZcyBubyBuZWVkIHRvIHNwZWNpYWwtY2FzZSBhc3RyYWwgc3ltYm9scywgc3Vycm9nYXRlXG5cdFx0XHQvLyBwYWlycywgb3IgbG9uZSBzdXJyb2dhdGVzLlxuXG5cdFx0XHQvLyBJZiB0aGUgY2hhcmFjdGVyIGlzIE5VTEwgKFUrMDAwMCksIHRoZW4gdGhlIFJFUExBQ0VNRU5UIENIQVJBQ1RFUlxuXHRcdFx0Ly8gKFUrRkZGRCkuXG5cdFx0XHRpZiAoY29kZVVuaXQgPT0gMHgwMDAwKSB7XG5cdFx0XHRcdHJlc3VsdCArPSAnXFx1RkZGRCc7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoXG5cdFx0XHRcdC8vIElmIHRoZSBjaGFyYWN0ZXIgaXMgaW4gdGhlIHJhbmdlIFtcXDEtXFwxRl0gKFUrMDAwMSB0byBVKzAwMUYpIG9yIGlzXG5cdFx0XHRcdC8vIFUrMDA3RiwgW+KApl1cblx0XHRcdFx0KGNvZGVVbml0ID49IDB4MDAwMSAmJiBjb2RlVW5pdCA8PSAweDAwMUYpIHx8IGNvZGVVbml0ID09IDB4MDA3RiB8fFxuXHRcdFx0XHQvLyBJZiB0aGUgY2hhcmFjdGVyIGlzIHRoZSBmaXJzdCBjaGFyYWN0ZXIgYW5kIGlzIGluIHRoZSByYW5nZSBbMC05XVxuXHRcdFx0XHQvLyAoVSswMDMwIHRvIFUrMDAzOSksIFvigKZdXG5cdFx0XHRcdChpbmRleCA9PSAwICYmIGNvZGVVbml0ID49IDB4MDAzMCAmJiBjb2RlVW5pdCA8PSAweDAwMzkpIHx8XG5cdFx0XHRcdC8vIElmIHRoZSBjaGFyYWN0ZXIgaXMgdGhlIHNlY29uZCBjaGFyYWN0ZXIgYW5kIGlzIGluIHRoZSByYW5nZSBbMC05XVxuXHRcdFx0XHQvLyAoVSswMDMwIHRvIFUrMDAzOSkgYW5kIHRoZSBmaXJzdCBjaGFyYWN0ZXIgaXMgYSBgLWAgKFUrMDAyRCksIFvigKZdXG5cdFx0XHRcdChcblx0XHRcdFx0XHRpbmRleCA9PSAxICYmXG5cdFx0XHRcdFx0Y29kZVVuaXQgPj0gMHgwMDMwICYmIGNvZGVVbml0IDw9IDB4MDAzOSAmJlxuXHRcdFx0XHRcdGZpcnN0Q29kZVVuaXQgPT0gMHgwMDJEXG5cdFx0XHRcdClcblx0XHRcdCkge1xuXHRcdFx0XHQvLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3Nzb20vI2VzY2FwZS1hLWNoYXJhY3Rlci1hcy1jb2RlLXBvaW50XG5cdFx0XHRcdHJlc3VsdCArPSAnXFxcXCcgKyBjb2RlVW5pdC50b1N0cmluZygxNikgKyAnICc7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoXG5cdFx0XHRcdC8vIElmIHRoZSBjaGFyYWN0ZXIgaXMgdGhlIGZpcnN0IGNoYXJhY3RlciBhbmQgaXMgYSBgLWAgKFUrMDAyRCksIGFuZFxuXHRcdFx0XHQvLyB0aGVyZSBpcyBubyBzZWNvbmQgY2hhcmFjdGVyLCBb4oCmXVxuXHRcdFx0XHRpbmRleCA9PSAwICYmXG5cdFx0XHRcdGxlbmd0aCA9PSAxICYmXG5cdFx0XHRcdGNvZGVVbml0ID09IDB4MDAyRFxuXHRcdFx0KSB7XG5cdFx0XHRcdHJlc3VsdCArPSAnXFxcXCcgKyBzdHJpbmcuY2hhckF0KGluZGV4KTtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHRoZSBjaGFyYWN0ZXIgaXMgbm90IGhhbmRsZWQgYnkgb25lIG9mIHRoZSBhYm92ZSBydWxlcyBhbmQgaXNcblx0XHRcdC8vIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byBVKzAwODAsIGlzIGAtYCAoVSswMDJEKSBvciBgX2AgKFUrMDA1RiksIG9yXG5cdFx0XHQvLyBpcyBpbiBvbmUgb2YgdGhlIHJhbmdlcyBbMC05XSAoVSswMDMwIHRvIFUrMDAzOSksIFtBLVpdIChVKzAwNDEgdG9cblx0XHRcdC8vIFUrMDA1QSksIG9yIFthLXpdIChVKzAwNjEgdG8gVSswMDdBKSwgW+KApl1cblx0XHRcdGlmIChcblx0XHRcdFx0Y29kZVVuaXQgPj0gMHgwMDgwIHx8XG5cdFx0XHRcdGNvZGVVbml0ID09IDB4MDAyRCB8fFxuXHRcdFx0XHRjb2RlVW5pdCA9PSAweDAwNUYgfHxcblx0XHRcdFx0Y29kZVVuaXQgPj0gMHgwMDMwICYmIGNvZGVVbml0IDw9IDB4MDAzOSB8fFxuXHRcdFx0XHRjb2RlVW5pdCA+PSAweDAwNDEgJiYgY29kZVVuaXQgPD0gMHgwMDVBIHx8XG5cdFx0XHRcdGNvZGVVbml0ID49IDB4MDA2MSAmJiBjb2RlVW5pdCA8PSAweDAwN0Fcblx0XHRcdCkge1xuXHRcdFx0XHQvLyB0aGUgY2hhcmFjdGVyIGl0c2VsZlxuXHRcdFx0XHRyZXN1bHQgKz0gc3RyaW5nLmNoYXJBdChpbmRleCk7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdGhlcndpc2UsIHRoZSBlc2NhcGVkIGNoYXJhY3Rlci5cblx0XHRcdC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS8jZXNjYXBlLWEtY2hhcmFjdGVyXG5cdFx0XHRyZXN1bHQgKz0gJ1xcXFwnICsgc3RyaW5nLmNoYXJBdChpbmRleCk7XG5cblx0XHR9XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fTtcblxuXHRpZiAoIXJvb3QuQ1NTKSB7XG5cdFx0cm9vdC5DU1MgPSB7fTtcblx0fVxuXG5cdHJvb3QuQ1NTLmVzY2FwZSA9IGNzc0VzY2FwZTtcblx0cmV0dXJuIGNzc0VzY2FwZTtcblxufSkpO1xuIl0sIm1hcHBpbmdzIjoiOzs7QUFBQTtBQUNBO0FBQUUsV0FBU0EsSUFBSSxFQUFFQyxPQUFPLEVBQUU7RUFDekI7RUFDQSxJQUFJLE9BQU9DLE9BQU8sSUFBSSxRQUFRLEVBQUU7SUFDL0I7SUFDQUMsTUFBTSxDQUFDRCxPQUFPLEdBQUdELE9BQU8sQ0FBQ0QsSUFBSSxDQUFDO0VBQy9CLENBQUMsTUFBTSxJQUFJLE9BQU9JLE1BQU0sSUFBSSxVQUFVLElBQUlBLE1BQU0sQ0FBQ0MsR0FBRyxFQUFFO0lBQ3JEO0lBQ0FELE1BQU0sQ0FBQyxFQUFFLEVBQUVILE9BQU8sQ0FBQ0ssSUFBSSxDQUFDTixJQUFJLEVBQUVBLElBQUksQ0FBQyxDQUFDO0VBQ3JDLENBQUMsTUFBTTtJQUNOO0lBQ0FDLE9BQU8sQ0FBQ0QsSUFBSSxDQUFDO0VBQ2Q7QUFDRCxDQUFDLEVBQUMsT0FBT08sTUFBTSxJQUFJLFdBQVcsR0FBR0EsTUFBTTtBQUFBO0FBQUEsTUFBTyxFQUFFLFVBQVNQLElBQUksRUFBRTtFQUU5RCxJQUFJQSxJQUFJLENBQUNRLEdBQUcsSUFBSVIsSUFBSSxDQUFDUSxHQUFHLENBQUNDLE1BQU0sRUFBRTtJQUNoQyxPQUFPVCxJQUFJLENBQUNRLEdBQUcsQ0FBQ0MsTUFBTTtFQUN2Qjs7RUFFQTtFQUNBLElBQUlDLFNBQVMsR0FBRyxTQUFBQSxDQUFTQyxLQUFLLEVBQUU7SUFDL0IsSUFBSUMsU0FBUyxDQUFDQyxNQUFNLElBQUksQ0FBQyxFQUFFO01BQzFCLE1BQU0sSUFBSUMsU0FBUyxDQUFDLG9DQUFvQyxDQUFDO0lBQzFEO0lBQ0EsSUFBSUMsTUFBTSxHQUFHQyxNQUFNLENBQUNMLEtBQUssQ0FBQztJQUMxQixJQUFJRSxNQUFNLEdBQUdFLE1BQU0sQ0FBQ0YsTUFBTTtJQUMxQixJQUFJSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsSUFBSUMsUUFBUTtJQUNaLElBQUlDLE1BQU0sR0FBRyxFQUFFO0lBQ2YsSUFBSUMsYUFBYSxHQUFHTCxNQUFNLENBQUNNLFVBQVUsQ0FBQyxDQUFDLENBQUM7SUFDeEMsT0FBTyxFQUFFSixLQUFLLEdBQUdKLE1BQU0sRUFBRTtNQUN4QkssUUFBUSxHQUFHSCxNQUFNLENBQUNNLFVBQVUsQ0FBQ0osS0FBSyxDQUFDO01BQ25DO01BQ0E7O01BRUE7TUFDQTtNQUNBLElBQUlDLFFBQVEsSUFBSSxNQUFNLEVBQUU7UUFDdkJDLE1BQU0sSUFBSSxRQUFRO1FBQ2xCO01BQ0Q7TUFFQTtNQUNDO01BQ0E7TUFDQ0QsUUFBUSxJQUFJLE1BQU0sSUFBSUEsUUFBUSxJQUFJLE1BQU0sSUFBS0EsUUFBUSxJQUFJLE1BQU07TUFDaEU7TUFDQTtNQUNDRCxLQUFLLElBQUksQ0FBQyxJQUFJQyxRQUFRLElBQUksTUFBTSxJQUFJQSxRQUFRLElBQUksTUFBTztNQUN4RDtNQUNBOztNQUVDRCxLQUFLLElBQUksQ0FBQyxJQUNWQyxRQUFRLElBQUksTUFBTSxJQUFJQSxRQUFRLElBQUksTUFBTSxJQUN4Q0UsYUFBYSxJQUFJLE1BQ2pCLEVBQ0E7UUFDRDtRQUNBRCxNQUFNLElBQUksSUFBSSxHQUFHRCxRQUFRLENBQUNJLFFBQVEsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHO1FBQzVDO01BQ0Q7TUFFQTtNQUNDO01BQ0E7TUFDQUwsS0FBSyxJQUFJLENBQUMsSUFDVkosTUFBTSxJQUFJLENBQUMsSUFDWEssUUFBUSxJQUFJLE1BQU0sRUFDakI7UUFDREMsTUFBTSxJQUFJLElBQUksR0FBR0osTUFBTSxDQUFDUSxNQUFNLENBQUNOLEtBQUssQ0FBQztRQUNyQztNQUNEOztNQUVBO01BQ0E7TUFDQTtNQUNBO01BQ0EsSUFDQ0MsUUFBUSxJQUFJLE1BQU0sSUFDbEJBLFFBQVEsSUFBSSxNQUFNLElBQ2xCQSxRQUFRLElBQUksTUFBTSxJQUNsQkEsUUFBUSxJQUFJLE1BQU0sSUFBSUEsUUFBUSxJQUFJLE1BQU0sSUFDeENBLFFBQVEsSUFBSSxNQUFNLElBQUlBLFFBQVEsSUFBSSxNQUFNLElBQ3hDQSxRQUFRLElBQUksTUFBTSxJQUFJQSxRQUFRLElBQUksTUFBTSxFQUN2QztRQUNEO1FBQ0FDLE1BQU0sSUFBSUosTUFBTSxDQUFDUSxNQUFNLENBQUNOLEtBQUssQ0FBQztRQUM5QjtNQUNEOztNQUVBO01BQ0E7TUFDQUUsTUFBTSxJQUFJLElBQUksR0FBR0osTUFBTSxDQUFDUSxNQUFNLENBQUNOLEtBQUssQ0FBQztJQUV0QztJQUNBLE9BQU9FLE1BQU07RUFDZCxDQUFDO0VBRUQsSUFBSSxDQUFDbkIsSUFBSSxDQUFDUSxHQUFHLEVBQUU7SUFDZFIsSUFBSSxDQUFDUSxHQUFHLEdBQUcsQ0FBQyxDQUFDO0VBQ2Q7RUFFQVIsSUFBSSxDQUFDUSxHQUFHLENBQUNDLE1BQU0sR0FBR0MsU0FBUztFQUMzQixPQUFPQSxTQUFTO0FBRWpCLENBQUMsQ0FBQyJ9