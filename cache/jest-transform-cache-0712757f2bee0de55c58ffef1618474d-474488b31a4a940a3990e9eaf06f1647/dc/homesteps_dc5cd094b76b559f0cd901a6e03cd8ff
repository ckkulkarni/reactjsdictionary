111006cef384011e25b7826072e87a8b
"use strict";

var _react = _interopRequireDefault(require("react"));
var _jestCucumber = require("jest-cucumber");
var _reactRedux = require("react-redux");
var _reactRouterDom = require("react-router-dom");
var _react2 = require("@testing-library/react");
require("@testing-library/jest-dom/extend-expect");
var _store = require("../../Redux/store");
var _Home = _interopRequireDefault(require("../../Dictionary/Home"));
var _Details = _interopRequireDefault(require("../../Dictionary/Details"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const feature = (0, _jestCucumber.loadFeature)("src/Components/Features/home.feature");
(0, _jestCucumber.defineFeature)(feature, test => {
  test("The component renders and a random word is fetched", ({
    given,
    when,
    then,
    and
  }) => {
    const alertMock = jest.spyOn(window, "alert").mockImplementation(() => {});
    given("The user is on the Home page", () => {
      const screen = (0, _react2.render)( /*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {
        store: _store.store
      }, /*#__PURE__*/_react.default.createElement(_reactRouterDom.BrowserRouter, null, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Routes, null, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
        path: "/search",
        element: /*#__PURE__*/_react.default.createElement(_Home.default, null)
      }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
        path: "/details/:id",
        element: /*#__PURE__*/_react.default.createElement(_Details.default, null)
      }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
        path: "*",
        element: /*#__PURE__*/_react.default.createElement(_reactRouterDom.Navigate, {
          to: "/search",
          replace: true
        })
      })))));
      expect(screen.getByTestId("homeContainer")).toBeInTheDocument();
    });
    when("The user inputs a word and submits it", async () => {
      const screen = (0, _react2.render)( /*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {
        store: _store.store
      }, /*#__PURE__*/_react.default.createElement(_reactRouterDom.BrowserRouter, null, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Routes, null, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
        path: "/search",
        element: /*#__PURE__*/_react.default.createElement(_Home.default, null)
      }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
        path: "/details/:id",
        element: /*#__PURE__*/_react.default.createElement(_Details.default, null)
      }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
        path: "*",
        element: /*#__PURE__*/_react.default.createElement(_reactRouterDom.Navigate, {
          to: "/search",
          replace: true
        })
      })))));
      const input = screen.getAllByPlaceholderText("Example: example");
      _react2.fireEvent.change(input[0], {
        target: {
          value: "example"
        }
      });
    });
    then("the definition of the word is fetched and displayed", async () => {
      const screen = (0, _react2.render)( /*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {
        store: _store.store
      }, /*#__PURE__*/_react.default.createElement(_reactRouterDom.BrowserRouter, null, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Routes, null, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
        path: "/search",
        element: /*#__PURE__*/_react.default.createElement(_Home.default, null)
      }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
        path: "/details/:id",
        element: /*#__PURE__*/_react.default.createElement(_Details.default, null)
      }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
        path: "*",
        element: /*#__PURE__*/_react.default.createElement(_reactRouterDom.Navigate, {
          to: "/search",
          replace: true
        })
      })))));
      const mockAxios = jest.spyOn(require("axios"), "get");
      mockAxios.mockResolvedValueOnce({
        data: [{
          meanings: [{
            definitions: [{
              definition: "a thing characteristic of its kind"
            }]
          }]
        }]
      });
      await screen.findByText("a thing characteristic of its kind");
      expect(screen.getByText("a thing characteristic of its kind")).toBeInTheDocument();
    });
    and("clicking on the definition takes the user to the Details page for that word", async () => {
      const screen = (0, _react2.render)( /*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {
        store: _store.store
      }, /*#__PURE__*/_react.default.createElement(_reactRouterDom.BrowserRouter, null, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Routes, null, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
        path: "/search",
        element: /*#__PURE__*/_react.default.createElement(_Home.default, null)
      }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
        path: "/details/:id",
        element: /*#__PURE__*/_react.default.createElement(_Details.default, null)
      }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
        path: "*",
        element: /*#__PURE__*/_react.default.createElement(_reactRouterDom.Navigate, {
          to: "/search",
          replace: true
        })
      })))));
      const mockAxios = jest.spyOn(require("axios"), "get");
      mockAxios.mockResolvedValueOnce({
        data: [{
          meanings: [{
            definitions: [{
              definition: "a thing characteristic of its kind"
            }]
          }]
        }]
      });
      await screen.findByText("a thing characteristic of its kind");
      expect(screen.getByText("a thing characteristic of its kind")).toBeInTheDocument();
      await (0, _react2.waitFor)(() => {
        _react2.fireEvent.click(screen.getByText("a thing characteristic of its kind"));
        expect(window.location.pathname).toEqual("/details/example");
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,