451c706849e6532c2fde79fffc14b519
"use strict";

var _react = _interopRequireDefault(require("react"));
var _jestCucumber = require("jest-cucumber");
var _reactRouterDom = require("react-router-dom");
var _react2 = require("@testing-library/react");
require("@testing-library/jest-dom/extend-expect");
var _Details = _interopRequireDefault(require("../../Dictionary/Details"));
var _axios = _interopRequireDefault(require("axios"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const feature = (0, _jestCucumber.loadFeature)("src/Components/Features/details.feature");
(0, _jestCucumber.defineFeature)(feature, test => {
  test("User views word details with phonetics and meanings", ({
    given,
    when,
    then
  }) => {
    given("The user is on the Details page", () => {
      /*#__PURE__*/_react.default.createElement(_reactRouterDom.MemoryRouter, {
        initialEntries: ["/details/example"]
      }, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
        path: "/details/:id",
        element: /*#__PURE__*/_react.default.createElement(_Details.default, null)
      }));
    }), when("The user views the details for a word", async () => {
      jest.spyOn(_axios.default, "get").mockResolvedValueOnce({
        data: [{
          word: "example",
          phonetics: [{
            text: "/ɪɡˈzæmpəl/",
            audio: "example-audio.mp3"
          }],
          meanings: [{
            partOfSpeech: "noun",
            definitions: [{
              definition: "a representative form or pattern",
              example: "I followed your example",
              synonyms: ["model", "pattern", "prototype"]
            }]
          }]
        }]
      });
    });
    then("The word details should be displayed", () => {
      expect(_react2.screen.getByText("example")).toBeInTheDocument();
      expect(_react2.screen.getByText("/ɪɡˈzæmpəl/")).toBeInTheDocument();
      expect(_react2.screen.getByText("a representative form or pattern")).toBeInTheDocument();
      expect(_react2.screen.getByText("Example: I followed your example")).toBeInTheDocument();
      expect(_react2.screen.getByText("Synonyms: model, pattern, prototype")).toBeInTheDocument();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9qZXN0Q3VjdW1iZXIiLCJfcmVhY3RSb3V0ZXJEb20iLCJfcmVhY3QyIiwiX0RldGFpbHMiLCJfYXhpb3MiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImZlYXR1cmUiLCJsb2FkRmVhdHVyZSIsImRlZmluZUZlYXR1cmUiLCJ0ZXN0IiwiZ2l2ZW4iLCJ3aGVuIiwidGhlbiIsImNyZWF0ZUVsZW1lbnQiLCJNZW1vcnlSb3V0ZXIiLCJpbml0aWFsRW50cmllcyIsIlJvdXRlIiwicGF0aCIsImVsZW1lbnQiLCJqZXN0Iiwic3B5T24iLCJheGlvcyIsIm1vY2tSZXNvbHZlZFZhbHVlT25jZSIsImRhdGEiLCJ3b3JkIiwicGhvbmV0aWNzIiwidGV4dCIsImF1ZGlvIiwibWVhbmluZ3MiLCJwYXJ0T2ZTcGVlY2giLCJkZWZpbml0aW9ucyIsImRlZmluaXRpb24iLCJleGFtcGxlIiwic3lub255bXMiLCJleHBlY3QiLCJzY3JlZW4iLCJnZXRCeVRleHQiLCJ0b0JlSW5UaGVEb2N1bWVudCJdLCJzb3VyY2VzIjpbImRldGFpbHMuc3RlcHMudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgZGVmaW5lRmVhdHVyZSwgbG9hZEZlYXR1cmUgfSBmcm9tIFwiamVzdC1jdWN1bWJlclwiO1xyXG5pbXBvcnQgeyBQcm92aWRlciB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xyXG5pbXBvcnQge1xyXG4gIEJyb3dzZXJSb3V0ZXIsXHJcbiAgUm91dGUsXHJcbiAgUm91dGVzLFxyXG4gIE5hdmlnYXRlLFxyXG4gIE1lbW9yeVJvdXRlcixcclxufSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xyXG5pbXBvcnQge1xyXG4gIGFjdCxcclxuICBjbGVhbnVwLFxyXG4gIGZpcmVFdmVudCxcclxuICByZW5kZXIsXHJcbiAgd2FpdEZvcixcclxuICBzY3JlZW4sXHJcbn0gZnJvbSBcIkB0ZXN0aW5nLWxpYnJhcnkvcmVhY3RcIjtcclxuaW1wb3J0IFwiQHRlc3RpbmctbGlicmFyeS9qZXN0LWRvbS9leHRlbmQtZXhwZWN0XCI7XHJcbmltcG9ydCB7IHN0b3JlIH0gZnJvbSBcIi4uLy4uL1JlZHV4L3N0b3JlXCI7XHJcbmltcG9ydCByb3V0ZXMgZnJvbSBcIi4vLi4vLi4vdXRpbHMvUm91dGVzXCI7XHJcbmltcG9ydCBIb21lIGZyb20gXCIuLi8uLi9EaWN0aW9uYXJ5L0hvbWVcIjtcclxuaW1wb3J0IERldGFpbHMgZnJvbSBcIi4uLy4uL0RpY3Rpb25hcnkvRGV0YWlsc1wiO1xyXG5pbXBvcnQgYXhpb3MgZnJvbSBcImF4aW9zXCI7XHJcbmNvbnN0IGZlYXR1cmUgPSBsb2FkRmVhdHVyZShcInNyYy9Db21wb25lbnRzL0ZlYXR1cmVzL2RldGFpbHMuZmVhdHVyZVwiKTtcclxuXHJcbmRlZmluZUZlYXR1cmUoZmVhdHVyZSwgKHRlc3QpID0+IHtcclxuICB0ZXN0KFwiVXNlciB2aWV3cyB3b3JkIGRldGFpbHMgd2l0aCBwaG9uZXRpY3MgYW5kIG1lYW5pbmdzXCIsICh7XHJcbiAgICBnaXZlbixcclxuICAgIHdoZW4sXHJcbiAgICB0aGVuLFxyXG4gIH0pID0+IHtcclxuICAgIGdpdmVuKFwiVGhlIHVzZXIgaXMgb24gdGhlIERldGFpbHMgcGFnZVwiLCAoKSA9PiB7XHJcbiAgICAgIDxNZW1vcnlSb3V0ZXIgaW5pdGlhbEVudHJpZXM9e1tcIi9kZXRhaWxzL2V4YW1wbGVcIl19PlxyXG4gICAgICAgIDxSb3V0ZSBwYXRoPVwiL2RldGFpbHMvOmlkXCIgZWxlbWVudD17PERldGFpbHMgLz59IC8+XHJcbiAgICAgIDwvTWVtb3J5Um91dGVyPjtcclxuICAgIH0pLFxyXG4gICAgICB3aGVuKFwiVGhlIHVzZXIgdmlld3MgdGhlIGRldGFpbHMgZm9yIGEgd29yZFwiLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgamVzdC5zcHlPbihheGlvcywgXCJnZXRcIikubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcclxuICAgICAgICAgIGRhdGE6IFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgIHdvcmQ6IFwiZXhhbXBsZVwiLFxyXG4gICAgICAgICAgICAgIHBob25ldGljczogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICB0ZXh0OiBcIi/Jqsmhy4h6w6ZtcMmZbC9cIixcclxuICAgICAgICAgICAgICAgICAgYXVkaW86IFwiZXhhbXBsZS1hdWRpby5tcDNcIixcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgICBtZWFuaW5nczogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICBwYXJ0T2ZTcGVlY2g6IFwibm91blwiLFxyXG4gICAgICAgICAgICAgICAgICBkZWZpbml0aW9uczogW1xyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgIGRlZmluaXRpb246IFwiYSByZXByZXNlbnRhdGl2ZSBmb3JtIG9yIHBhdHRlcm5cIixcclxuICAgICAgICAgICAgICAgICAgICAgIGV4YW1wbGU6IFwiSSBmb2xsb3dlZCB5b3VyIGV4YW1wbGVcIixcclxuICAgICAgICAgICAgICAgICAgICAgIHN5bm9ueW1zOiBbXCJtb2RlbFwiLCBcInBhdHRlcm5cIiwgXCJwcm90b3R5cGVcIl0sXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgIF0sXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG4gICAgdGhlbihcIlRoZSB3b3JkIGRldGFpbHMgc2hvdWxkIGJlIGRpc3BsYXllZFwiLCAoKSA9PiB7XHJcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KFwiZXhhbXBsZVwiKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcclxuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoXCIvyarJocuIesOmbXDJmWwvXCIpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xyXG4gICAgICBleHBlY3QoXHJcbiAgICAgICAgc2NyZWVuLmdldEJ5VGV4dChcImEgcmVwcmVzZW50YXRpdmUgZm9ybSBvciBwYXR0ZXJuXCIpXHJcbiAgICAgICkudG9CZUluVGhlRG9jdW1lbnQoKTtcclxuICAgICAgZXhwZWN0KFxyXG4gICAgICAgIHNjcmVlbi5nZXRCeVRleHQoXCJFeGFtcGxlOiBJIGZvbGxvd2VkIHlvdXIgZXhhbXBsZVwiKVxyXG4gICAgICApLnRvQmVJblRoZURvY3VtZW50KCk7XHJcbiAgICAgIGV4cGVjdChcclxuICAgICAgICBzY3JlZW4uZ2V0QnlUZXh0KFwiU3lub255bXM6IG1vZGVsLCBwYXR0ZXJuLCBwcm90b3R5cGVcIilcclxuICAgICAgKS50b0JlSW5UaGVEb2N1bWVudCgpO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcbn0pO1xyXG4iXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsYUFBQSxHQUFBRCxPQUFBO0FBRUEsSUFBQUUsZUFBQSxHQUFBRixPQUFBO0FBT0EsSUFBQUcsT0FBQSxHQUFBSCxPQUFBO0FBUUFBLE9BQUE7QUFJQSxJQUFBSSxRQUFBLEdBQUFMLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBSyxNQUFBLEdBQUFOLHNCQUFBLENBQUFDLE9BQUE7QUFBMEIsU0FBQUQsdUJBQUFPLEdBQUEsV0FBQUEsR0FBQSxJQUFBQSxHQUFBLENBQUFDLFVBQUEsR0FBQUQsR0FBQSxLQUFBRSxPQUFBLEVBQUFGLEdBQUE7QUFDMUIsTUFBTUcsT0FBTyxHQUFHLElBQUFDLHlCQUFXLEVBQUMseUNBQXlDLENBQUM7QUFFdEUsSUFBQUMsMkJBQWEsRUFBQ0YsT0FBTyxFQUFHRyxJQUFJLElBQUs7RUFDL0JBLElBQUksQ0FBQyxxREFBcUQsRUFBRSxDQUFDO0lBQzNEQyxLQUFLO0lBQ0xDLElBQUk7SUFDSkM7RUFDRixDQUFDLEtBQUs7SUFDSkYsS0FBSyxDQUFDLGlDQUFpQyxFQUFFLE1BQU07TUFDN0MsYUFBQWYsTUFBQSxDQUFBVSxPQUFBLENBQUFRLGFBQUEsQ0FBQ2QsZUFBQSxDQUFBZSxZQUFZO1FBQUNDLGNBQWMsRUFBRSxDQUFDLGtCQUFrQjtNQUFFLGdCQUNqRHBCLE1BQUEsQ0FBQVUsT0FBQSxDQUFBUSxhQUFBLENBQUNkLGVBQUEsQ0FBQWlCLEtBQUs7UUFBQ0MsSUFBSSxFQUFDLGNBQWM7UUFBQ0MsT0FBTyxlQUFFdkIsTUFBQSxDQUFBVSxPQUFBLENBQUFRLGFBQUEsQ0FBQ1osUUFBQSxDQUFBSSxPQUFPO01BQUksRUFBRyxDQUN0QztJQUNqQixDQUFDLENBQUMsRUFDQU0sSUFBSSxDQUFDLHVDQUF1QyxFQUFFLFlBQVk7TUFDeERRLElBQUksQ0FBQ0MsS0FBSyxDQUFDQyxjQUFLLEVBQUUsS0FBSyxDQUFDLENBQUNDLHFCQUFxQixDQUFDO1FBQzdDQyxJQUFJLEVBQUUsQ0FDSjtVQUNFQyxJQUFJLEVBQUUsU0FBUztVQUNmQyxTQUFTLEVBQUUsQ0FDVDtZQUNFQyxJQUFJLEVBQUUsYUFBYTtZQUNuQkMsS0FBSyxFQUFFO1VBQ1QsQ0FBQyxDQUNGO1VBQ0RDLFFBQVEsRUFBRSxDQUNSO1lBQ0VDLFlBQVksRUFBRSxNQUFNO1lBQ3BCQyxXQUFXLEVBQUUsQ0FDWDtjQUNFQyxVQUFVLEVBQUUsa0NBQWtDO2NBQzlDQyxPQUFPLEVBQUUseUJBQXlCO2NBQ2xDQyxRQUFRLEVBQUUsQ0FBQyxPQUFPLEVBQUUsU0FBUyxFQUFFLFdBQVc7WUFDNUMsQ0FBQztVQUVMLENBQUM7UUFFTCxDQUFDO01BRUwsQ0FBQyxDQUFDO0lBQ0osQ0FBQyxDQUFDO0lBQ0pyQixJQUFJLENBQUMsc0NBQXNDLEVBQUUsTUFBTTtNQUNqRHNCLE1BQU0sQ0FBQ0MsY0FBTSxDQUFDQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQ0MsaUJBQWlCLEVBQUU7TUFDdkRILE1BQU0sQ0FBQ0MsY0FBTSxDQUFDQyxTQUFTLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQ0MsaUJBQWlCLEVBQUU7TUFDM0RILE1BQU0sQ0FDSkMsY0FBTSxDQUFDQyxTQUFTLENBQUMsa0NBQWtDLENBQUMsQ0FDckQsQ0FBQ0MsaUJBQWlCLEVBQUU7TUFDckJILE1BQU0sQ0FDSkMsY0FBTSxDQUFDQyxTQUFTLENBQUMsa0NBQWtDLENBQUMsQ0FDckQsQ0FBQ0MsaUJBQWlCLEVBQUU7TUFDckJILE1BQU0sQ0FDSkMsY0FBTSxDQUFDQyxTQUFTLENBQUMscUNBQXFDLENBQUMsQ0FDeEQsQ0FBQ0MsaUJBQWlCLEVBQUU7SUFDdkIsQ0FBQyxDQUFDO0VBQ0osQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIn0=