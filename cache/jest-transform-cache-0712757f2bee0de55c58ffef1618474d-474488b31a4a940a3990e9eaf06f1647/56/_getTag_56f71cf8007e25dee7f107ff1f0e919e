e8daa26b8c66dce53ce53616fbf1d312
/* istanbul ignore next */
"use strict";

var DataView = require('./_DataView'),
  Map = require('./_Map'),
  Promise = require('./_Promise'),
  Set = require('./_Set'),
  WeakMap = require('./_WeakMap'),
  baseGetTag = require('./_baseGetTag'),
  toSource = require('./_toSource');

/** `Object#toString` result references. */
var mapTag = '[object Map]',
  objectTag = '[object Object]',
  promiseTag = '[object Promise]',
  setTag = '[object Set]',
  weakMapTag = '[object WeakMap]';
var dataViewTag = '[object DataView]';

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView),
  mapCtorString = toSource(Map),
  promiseCtorString = toSource(Promise),
  setCtorString = toSource(Set),
  weakMapCtorString = toSource(WeakMap);

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
  getTag = function (value) {
    var result = baseGetTag(value),
      Ctor = result == objectTag ? value.constructor : undefined,
      ctorString = Ctor ? toSource(Ctor) : '';
    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString:
          return dataViewTag;
        case mapCtorString:
          return mapTag;
        case promiseCtorString:
          return promiseTag;
        case setCtorString:
          return setTag;
        case weakMapCtorString:
          return weakMapTag;
      }
    }
    return result;
  };
}
module.exports = getTag;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEYXRhVmlldyIsInJlcXVpcmUiLCJNYXAiLCJQcm9taXNlIiwiU2V0IiwiV2Vha01hcCIsImJhc2VHZXRUYWciLCJ0b1NvdXJjZSIsIm1hcFRhZyIsIm9iamVjdFRhZyIsInByb21pc2VUYWciLCJzZXRUYWciLCJ3ZWFrTWFwVGFnIiwiZGF0YVZpZXdUYWciLCJkYXRhVmlld0N0b3JTdHJpbmciLCJtYXBDdG9yU3RyaW5nIiwicHJvbWlzZUN0b3JTdHJpbmciLCJzZXRDdG9yU3RyaW5nIiwid2Vha01hcEN0b3JTdHJpbmciLCJnZXRUYWciLCJBcnJheUJ1ZmZlciIsInJlc29sdmUiLCJ2YWx1ZSIsInJlc3VsdCIsIkN0b3IiLCJjb25zdHJ1Y3RvciIsInVuZGVmaW5lZCIsImN0b3JTdHJpbmciLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiX2dldFRhZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgRGF0YVZpZXcgPSByZXF1aXJlKCcuL19EYXRhVmlldycpLFxuICAgIE1hcCA9IHJlcXVpcmUoJy4vX01hcCcpLFxuICAgIFByb21pc2UgPSByZXF1aXJlKCcuL19Qcm9taXNlJyksXG4gICAgU2V0ID0gcmVxdWlyZSgnLi9fU2V0JyksXG4gICAgV2Vha01hcCA9IHJlcXVpcmUoJy4vX1dlYWtNYXAnKSxcbiAgICBiYXNlR2V0VGFnID0gcmVxdWlyZSgnLi9fYmFzZUdldFRhZycpLFxuICAgIHRvU291cmNlID0gcmVxdWlyZSgnLi9fdG9Tb3VyY2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nLFxuICAgIHByb21pc2VUYWcgPSAnW29iamVjdCBQcm9taXNlXScsXG4gICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgd2Vha01hcFRhZyA9ICdbb2JqZWN0IFdlYWtNYXBdJztcblxudmFyIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG1hcHMsIHNldHMsIGFuZCB3ZWFrbWFwcy4gKi9cbnZhciBkYXRhVmlld0N0b3JTdHJpbmcgPSB0b1NvdXJjZShEYXRhVmlldyksXG4gICAgbWFwQ3RvclN0cmluZyA9IHRvU291cmNlKE1hcCksXG4gICAgcHJvbWlzZUN0b3JTdHJpbmcgPSB0b1NvdXJjZShQcm9taXNlKSxcbiAgICBzZXRDdG9yU3RyaW5nID0gdG9Tb3VyY2UoU2V0KSxcbiAgICB3ZWFrTWFwQ3RvclN0cmluZyA9IHRvU291cmNlKFdlYWtNYXApO1xuXG4vKipcbiAqIEdldHMgdGhlIGB0b1N0cmluZ1RhZ2Agb2YgYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICovXG52YXIgZ2V0VGFnID0gYmFzZUdldFRhZztcblxuLy8gRmFsbGJhY2sgZm9yIGRhdGEgdmlld3MsIG1hcHMsIHNldHMsIGFuZCB3ZWFrIG1hcHMgaW4gSUUgMTEgYW5kIHByb21pc2VzIGluIE5vZGUuanMgPCA2LlxuaWYgKChEYXRhVmlldyAmJiBnZXRUYWcobmV3IERhdGFWaWV3KG5ldyBBcnJheUJ1ZmZlcigxKSkpICE9IGRhdGFWaWV3VGFnKSB8fFxuICAgIChNYXAgJiYgZ2V0VGFnKG5ldyBNYXApICE9IG1hcFRhZykgfHxcbiAgICAoUHJvbWlzZSAmJiBnZXRUYWcoUHJvbWlzZS5yZXNvbHZlKCkpICE9IHByb21pc2VUYWcpIHx8XG4gICAgKFNldCAmJiBnZXRUYWcobmV3IFNldCkgIT0gc2V0VGFnKSB8fFxuICAgIChXZWFrTWFwICYmIGdldFRhZyhuZXcgV2Vha01hcCkgIT0gd2Vha01hcFRhZykpIHtcbiAgZ2V0VGFnID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICB2YXIgcmVzdWx0ID0gYmFzZUdldFRhZyh2YWx1ZSksXG4gICAgICAgIEN0b3IgPSByZXN1bHQgPT0gb2JqZWN0VGFnID8gdmFsdWUuY29uc3RydWN0b3IgOiB1bmRlZmluZWQsXG4gICAgICAgIGN0b3JTdHJpbmcgPSBDdG9yID8gdG9Tb3VyY2UoQ3RvcikgOiAnJztcblxuICAgIGlmIChjdG9yU3RyaW5nKSB7XG4gICAgICBzd2l0Y2ggKGN0b3JTdHJpbmcpIHtcbiAgICAgICAgY2FzZSBkYXRhVmlld0N0b3JTdHJpbmc6IHJldHVybiBkYXRhVmlld1RhZztcbiAgICAgICAgY2FzZSBtYXBDdG9yU3RyaW5nOiByZXR1cm4gbWFwVGFnO1xuICAgICAgICBjYXNlIHByb21pc2VDdG9yU3RyaW5nOiByZXR1cm4gcHJvbWlzZVRhZztcbiAgICAgICAgY2FzZSBzZXRDdG9yU3RyaW5nOiByZXR1cm4gc2V0VGFnO1xuICAgICAgICBjYXNlIHdlYWtNYXBDdG9yU3RyaW5nOiByZXR1cm4gd2Vha01hcFRhZztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRUYWc7XG4iXSwibWFwcGluZ3MiOiI7OztBQUFBLElBQUlBLFFBQVEsR0FBR0MsT0FBTyxDQUFDLGFBQWEsQ0FBQztFQUNqQ0MsR0FBRyxHQUFHRCxPQUFPLENBQUMsUUFBUSxDQUFDO0VBQ3ZCRSxPQUFPLEdBQUdGLE9BQU8sQ0FBQyxZQUFZLENBQUM7RUFDL0JHLEdBQUcsR0FBR0gsT0FBTyxDQUFDLFFBQVEsQ0FBQztFQUN2QkksT0FBTyxHQUFHSixPQUFPLENBQUMsWUFBWSxDQUFDO0VBQy9CSyxVQUFVLEdBQUdMLE9BQU8sQ0FBQyxlQUFlLENBQUM7RUFDckNNLFFBQVEsR0FBR04sT0FBTyxDQUFDLGFBQWEsQ0FBQzs7QUFFckM7QUFDQSxJQUFJTyxNQUFNLEdBQUcsY0FBYztFQUN2QkMsU0FBUyxHQUFHLGlCQUFpQjtFQUM3QkMsVUFBVSxHQUFHLGtCQUFrQjtFQUMvQkMsTUFBTSxHQUFHLGNBQWM7RUFDdkJDLFVBQVUsR0FBRyxrQkFBa0I7QUFFbkMsSUFBSUMsV0FBVyxHQUFHLG1CQUFtQjs7QUFFckM7QUFDQSxJQUFJQyxrQkFBa0IsR0FBR1AsUUFBUSxDQUFDUCxRQUFRLENBQUM7RUFDdkNlLGFBQWEsR0FBR1IsUUFBUSxDQUFDTCxHQUFHLENBQUM7RUFDN0JjLGlCQUFpQixHQUFHVCxRQUFRLENBQUNKLE9BQU8sQ0FBQztFQUNyQ2MsYUFBYSxHQUFHVixRQUFRLENBQUNILEdBQUcsQ0FBQztFQUM3QmMsaUJBQWlCLEdBQUdYLFFBQVEsQ0FBQ0YsT0FBTyxDQUFDOztBQUV6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUljLE1BQU0sR0FBR2IsVUFBVTs7QUFFdkI7QUFDQSxJQUFLTixRQUFRLElBQUltQixNQUFNLENBQUMsSUFBSW5CLFFBQVEsQ0FBQyxJQUFJb0IsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSVAsV0FBVyxJQUNuRVgsR0FBRyxJQUFJaUIsTUFBTSxDQUFDLElBQUlqQixHQUFHLEdBQUMsSUFBSU0sTUFBTyxJQUNqQ0wsT0FBTyxJQUFJZ0IsTUFBTSxDQUFDaEIsT0FBTyxDQUFDa0IsT0FBTyxFQUFFLENBQUMsSUFBSVgsVUFBVyxJQUNuRE4sR0FBRyxJQUFJZSxNQUFNLENBQUMsSUFBSWYsR0FBRyxHQUFDLElBQUlPLE1BQU8sSUFDakNOLE9BQU8sSUFBSWMsTUFBTSxDQUFDLElBQUlkLE9BQU8sR0FBQyxJQUFJTyxVQUFXLEVBQUU7RUFDbERPLE1BQU0sR0FBRyxTQUFBQSxDQUFTRyxLQUFLLEVBQUU7SUFDdkIsSUFBSUMsTUFBTSxHQUFHakIsVUFBVSxDQUFDZ0IsS0FBSyxDQUFDO01BQzFCRSxJQUFJLEdBQUdELE1BQU0sSUFBSWQsU0FBUyxHQUFHYSxLQUFLLENBQUNHLFdBQVcsR0FBR0MsU0FBUztNQUMxREMsVUFBVSxHQUFHSCxJQUFJLEdBQUdqQixRQUFRLENBQUNpQixJQUFJLENBQUMsR0FBRyxFQUFFO0lBRTNDLElBQUlHLFVBQVUsRUFBRTtNQUNkLFFBQVFBLFVBQVU7UUFDaEIsS0FBS2Isa0JBQWtCO1VBQUUsT0FBT0QsV0FBVztRQUMzQyxLQUFLRSxhQUFhO1VBQUUsT0FBT1AsTUFBTTtRQUNqQyxLQUFLUSxpQkFBaUI7VUFBRSxPQUFPTixVQUFVO1FBQ3pDLEtBQUtPLGFBQWE7VUFBRSxPQUFPTixNQUFNO1FBQ2pDLEtBQUtPLGlCQUFpQjtVQUFFLE9BQU9OLFVBQVU7TUFBQztJQUU5QztJQUNBLE9BQU9XLE1BQU07RUFDZixDQUFDO0FBQ0g7QUFFQUssTUFBTSxDQUFDQyxPQUFPLEdBQUdWLE1BQU0ifQ==