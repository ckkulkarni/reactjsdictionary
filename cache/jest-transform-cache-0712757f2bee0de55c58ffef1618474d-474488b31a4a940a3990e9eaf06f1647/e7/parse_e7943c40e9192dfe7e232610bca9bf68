c785c839f1885ab571b2a95f45872401
/* istanbul ignore next */
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var
/* istanbul ignore next */
_validate = _interopRequireDefault(require("./validate.js"));
/* istanbul ignore next */ function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function parse(uuid) {
  if (!
  /* istanbul ignore next */
  (0,
  /* istanbul ignore next */
  _validate.
  /* istanbul ignore next */
  default)(uuid)) {
    throw TypeError('Invalid UUID');
  }
  var v;
  var arr = new Uint8Array(16); // Parse ########-....-....-....-............

  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v >>> 16 & 0xff;
  arr[2] = v >>> 8 & 0xff;
  arr[3] = v & 0xff; // Parse ........-####-....-....-............

  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 0xff; // Parse ........-....-####-....-............

  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 0xff; // Parse ........-....-....-####-............

  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 0xff; // Parse ........-....-....-....-############
  // (Use "/" to avoid 32-bit truncation when bit-shifting high-order bytes)

  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;
  arr[11] = v / 0x100000000 & 0xff;
  arr[12] = v >>> 24 & 0xff;
  arr[13] = v >>> 16 & 0xff;
  arr[14] = v >>> 8 & 0xff;
  arr[15] = v & 0xff;
  return arr;
}
/* istanbul ignore next */
var _default = parse;
/* istanbul ignore next */
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfdmFsaWRhdGUiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwicGFyc2UiLCJ1dWlkIiwidmFsaWRhdGUiLCJUeXBlRXJyb3IiLCJ2IiwiYXJyIiwiVWludDhBcnJheSIsInBhcnNlSW50Iiwic2xpY2UiLCJfZGVmYXVsdCIsImV4cG9ydHMiXSwic291cmNlcyI6WyJwYXJzZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdmFsaWRhdGUgZnJvbSAnLi92YWxpZGF0ZS5qcyc7XG5cbmZ1bmN0aW9uIHBhcnNlKHV1aWQpIHtcbiAgaWYgKCF2YWxpZGF0ZSh1dWlkKSkge1xuICAgIHRocm93IFR5cGVFcnJvcignSW52YWxpZCBVVUlEJyk7XG4gIH1cblxuICB2YXIgdjtcbiAgdmFyIGFyciA9IG5ldyBVaW50OEFycmF5KDE2KTsgLy8gUGFyc2UgIyMjIyMjIyMtLi4uLi0uLi4uLS4uLi4tLi4uLi4uLi4uLi4uXG5cbiAgYXJyWzBdID0gKHYgPSBwYXJzZUludCh1dWlkLnNsaWNlKDAsIDgpLCAxNikpID4+PiAyNDtcbiAgYXJyWzFdID0gdiA+Pj4gMTYgJiAweGZmO1xuICBhcnJbMl0gPSB2ID4+PiA4ICYgMHhmZjtcbiAgYXJyWzNdID0gdiAmIDB4ZmY7IC8vIFBhcnNlIC4uLi4uLi4uLSMjIyMtLi4uLi0uLi4uLS4uLi4uLi4uLi4uLlxuXG4gIGFycls0XSA9ICh2ID0gcGFyc2VJbnQodXVpZC5zbGljZSg5LCAxMyksIDE2KSkgPj4+IDg7XG4gIGFycls1XSA9IHYgJiAweGZmOyAvLyBQYXJzZSAuLi4uLi4uLi0uLi4uLSMjIyMtLi4uLi0uLi4uLi4uLi4uLi5cblxuICBhcnJbNl0gPSAodiA9IHBhcnNlSW50KHV1aWQuc2xpY2UoMTQsIDE4KSwgMTYpKSA+Pj4gODtcbiAgYXJyWzddID0gdiAmIDB4ZmY7IC8vIFBhcnNlIC4uLi4uLi4uLS4uLi4tLi4uLi0jIyMjLS4uLi4uLi4uLi4uLlxuXG4gIGFycls4XSA9ICh2ID0gcGFyc2VJbnQodXVpZC5zbGljZSgxOSwgMjMpLCAxNikpID4+PiA4O1xuICBhcnJbOV0gPSB2ICYgMHhmZjsgLy8gUGFyc2UgLi4uLi4uLi4tLi4uLi0uLi4uLS4uLi4tIyMjIyMjIyMjIyMjXG4gIC8vIChVc2UgXCIvXCIgdG8gYXZvaWQgMzItYml0IHRydW5jYXRpb24gd2hlbiBiaXQtc2hpZnRpbmcgaGlnaC1vcmRlciBieXRlcylcblxuICBhcnJbMTBdID0gKHYgPSBwYXJzZUludCh1dWlkLnNsaWNlKDI0LCAzNiksIDE2KSkgLyAweDEwMDAwMDAwMDAwICYgMHhmZjtcbiAgYXJyWzExXSA9IHYgLyAweDEwMDAwMDAwMCAmIDB4ZmY7XG4gIGFyclsxMl0gPSB2ID4+PiAyNCAmIDB4ZmY7XG4gIGFyclsxM10gPSB2ID4+PiAxNiAmIDB4ZmY7XG4gIGFyclsxNF0gPSB2ID4+PiA4ICYgMHhmZjtcbiAgYXJyWzE1XSA9IHYgJiAweGZmO1xuICByZXR1cm4gYXJyO1xufVxuXG5leHBvcnQgZGVmYXVsdCBwYXJzZTsiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUFBO0FBQUFBLFNBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUFxQyxvQ0FBQUQsdUJBQUFFLEdBQUEsV0FBQUEsR0FBQSxJQUFBQSxHQUFBLENBQUFDLFVBQUEsR0FBQUQsR0FBQSxLQUFBRSxPQUFBLEVBQUFGLEdBQUE7QUFFckMsU0FBU0csS0FBS0EsQ0FBQ0MsSUFBSSxFQUFFO0VBQ25CLElBQUk7RUFBQztFQUFBO0VBQUFDO0VBQUFBO0VBQUFBO0VBQUFBLE9BQVEsRUFBQ0QsSUFBSSxDQUFDLEVBQUU7SUFDbkIsTUFBTUUsU0FBUyxDQUFDLGNBQWMsQ0FBQztFQUNqQztFQUVBLElBQUlDLENBQUM7RUFDTCxJQUFJQyxHQUFHLEdBQUcsSUFBSUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7O0VBRTlCRCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQ0QsQ0FBQyxHQUFHRyxRQUFRLENBQUNOLElBQUksQ0FBQ08sS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsTUFBTSxFQUFFO0VBQ3BESCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUdELENBQUMsS0FBSyxFQUFFLEdBQUcsSUFBSTtFQUN4QkMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHRCxDQUFDLEtBQUssQ0FBQyxHQUFHLElBQUk7RUFDdkJDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBR0QsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDOztFQUVuQkMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUNELENBQUMsR0FBR0csUUFBUSxDQUFDTixJQUFJLENBQUNPLEtBQUssQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQztFQUNwREgsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHRCxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUM7O0VBRW5CQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQ0QsQ0FBQyxHQUFHRyxRQUFRLENBQUNOLElBQUksQ0FBQ08sS0FBSyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDO0VBQ3JESCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUdELENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQzs7RUFFbkJDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDRCxDQUFDLEdBQUdHLFFBQVEsQ0FBQ04sSUFBSSxDQUFDTyxLQUFLLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUM7RUFDckRILEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBR0QsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDO0VBQ25COztFQUVBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQ0QsQ0FBQyxHQUFHRyxRQUFRLENBQUNOLElBQUksQ0FBQ08sS0FBSyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxhQUFhLEdBQUcsSUFBSTtFQUN2RUgsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHRCxDQUFDLEdBQUcsV0FBVyxHQUFHLElBQUk7RUFDaENDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBR0QsQ0FBQyxLQUFLLEVBQUUsR0FBRyxJQUFJO0VBQ3pCQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUdELENBQUMsS0FBSyxFQUFFLEdBQUcsSUFBSTtFQUN6QkMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHRCxDQUFDLEtBQUssQ0FBQyxHQUFHLElBQUk7RUFDeEJDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBR0QsQ0FBQyxHQUFHLElBQUk7RUFDbEIsT0FBT0MsR0FBRztBQUNaO0FBQUM7QUFBQSxJQUFBSSxRQUFBLEdBRWNULEtBQUs7QUFBQTtBQUFBVSxPQUFBLENBQUFYLE9BQUEsR0FBQVUsUUFBQSJ9