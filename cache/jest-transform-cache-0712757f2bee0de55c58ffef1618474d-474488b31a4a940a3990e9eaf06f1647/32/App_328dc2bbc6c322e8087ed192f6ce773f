968630a7fc965fbaa1400663fbf926e0
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ThemeContext = void 0;
var _react = _interopRequireWildcard(require("react"));
require("./App.css");
var _reactRouter = require("react-router");
var _Routes = _interopRequireDefault(require("./Components/utils/Routes"));
var _exports = require("react-redux/es/exports");
var _store = require("./Components/Redux/store");
var _Switch = _interopRequireDefault(require("@mui/material/Switch"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const ThemeContext = /*#__PURE__*/(0, _react.createContext)({
  theme: "light",
  themeToggle: () => {}
});
exports.ThemeContext = ThemeContext;
function App() {
  const [theme, setTheme] = (0, _react.useState)("light");
  const themeToggle = () => {
    setTheme(current => current === "light" ? "dark" : "light");
  };
  (0, _react.useEffect)(() => {
    const mediaQuery = window.matchMedia("(prefers-color-scheme: dark)");
    if (mediaQuery.matches) {
      setTheme("dark");
    }
  }, []);
  console.log(theme);
  return /*#__PURE__*/_react.default.createElement(_exports.Provider, {
    store: _store.store
  }, /*#__PURE__*/_react.default.createElement(ThemeContext.Provider, {
    value: {
      theme,
      themeToggle
    }
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "App",
    id: theme === "light" ? "light" : "dark"
  }, /*#__PURE__*/_react.default.createElement("div", {
    style: {
      display: "flex"
    }
  }, theme === "light" ? /*#__PURE__*/_react.default.createElement("p", {
    style: {
      color: "black"
    }
  }, "Dark Mode") : /*#__PURE__*/_react.default.createElement("p", {
    style: {
      color: "white"
    }
  }, "Light Mode"), /*#__PURE__*/_react.default.createElement("div", {
    style: {
      marginTop: "8px"
    }
  }, /*#__PURE__*/_react.default.createElement(_Switch.default, {
    onChange: themeToggle
  }))), /*#__PURE__*/_react.default.createElement(_reactRouter.RouterProvider, {
    router: _Routes.default,
    fallbackElement: /*#__PURE__*/_react.default.createElement("div", null, "Loading...")
  }))));
}
var _default = App;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfcmVhY3RSb3V0ZXIiLCJfUm91dGVzIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9leHBvcnRzIiwiX3N0b3JlIiwiX1N3aXRjaCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwibm9kZUludGVyb3AiLCJXZWFrTWFwIiwiY2FjaGVCYWJlbEludGVyb3AiLCJjYWNoZU5vZGVJbnRlcm9wIiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJUaGVtZUNvbnRleHQiLCJjcmVhdGVDb250ZXh0IiwidGhlbWUiLCJ0aGVtZVRvZ2dsZSIsImV4cG9ydHMiLCJBcHAiLCJzZXRUaGVtZSIsInVzZVN0YXRlIiwiY3VycmVudCIsInVzZUVmZmVjdCIsIm1lZGlhUXVlcnkiLCJ3aW5kb3ciLCJtYXRjaE1lZGlhIiwibWF0Y2hlcyIsImNvbnNvbGUiLCJsb2ciLCJjcmVhdGVFbGVtZW50IiwiUHJvdmlkZXIiLCJzdG9yZSIsInZhbHVlIiwiY2xhc3NOYW1lIiwiaWQiLCJzdHlsZSIsImRpc3BsYXkiLCJjb2xvciIsIm1hcmdpblRvcCIsIm9uQ2hhbmdlIiwiUm91dGVyUHJvdmlkZXIiLCJyb3V0ZXIiLCJyb3V0ZXMiLCJmYWxsYmFja0VsZW1lbnQiLCJfZGVmYXVsdCJdLCJzb3VyY2VzIjpbIkFwcC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IGNyZWF0ZUNvbnRleHQsIHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBcIi4vQXBwLmNzc1wiO1xuaW1wb3J0IHsgQnJvd3NlclJvdXRlciB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XG5pbXBvcnQgeyBSb3V0ZSwgUm91dGVyUHJvdmlkZXIsIFJvdXRlcyB9IGZyb20gXCJyZWFjdC1yb3V0ZXJcIjtcbmltcG9ydCBIb21lIGZyb20gXCIuL0NvbXBvbmVudHMvRGljdGlvbmFyeS9Ib21lXCI7XG5pbXBvcnQgRGV0YWlscyBmcm9tIFwiLi9Db21wb25lbnRzL0RpY3Rpb25hcnkvRGV0YWlsc1wiO1xuaW1wb3J0IHJvdXRlcyBmcm9tIFwiLi9Db21wb25lbnRzL3V0aWxzL1JvdXRlc1wiO1xuaW1wb3J0IHsgUHJvdmlkZXIgfSBmcm9tIFwicmVhY3QtcmVkdXgvZXMvZXhwb3J0c1wiO1xuaW1wb3J0IHsgc3RvcmUgfSBmcm9tIFwiLi9Db21wb25lbnRzL1JlZHV4L3N0b3JlXCI7XG5pbXBvcnQgU3dpdGNoIGZyb20gXCJAbXVpL21hdGVyaWFsL1N3aXRjaFwiO1xudHlwZSBUaGVtZUNvbnRleHRUeXBlID0ge1xuICB0aGVtZTogc3RyaW5nO1xuICB0aGVtZVRvZ2dsZTogKCkgPT4gdm9pZDtcbn07XG5leHBvcnQgY29uc3QgVGhlbWVDb250ZXh0ID0gY3JlYXRlQ29udGV4dDxUaGVtZUNvbnRleHRUeXBlPih7XG4gIHRoZW1lOiBcImxpZ2h0XCIsXG4gIHRoZW1lVG9nZ2xlOiAoKSA9PiB7fSxcbn0pO1xuZnVuY3Rpb24gQXBwKCkge1xuICBjb25zdCBbdGhlbWUsIHNldFRoZW1lXSA9IHVzZVN0YXRlPHN0cmluZz4oXCJsaWdodFwiKTtcbiAgY29uc3QgdGhlbWVUb2dnbGUgPSAoKSA9PiB7XG4gICAgc2V0VGhlbWUoKGN1cnJlbnQpID0+IChjdXJyZW50ID09PSBcImxpZ2h0XCIgPyBcImRhcmtcIiA6IFwibGlnaHRcIikpO1xuICB9O1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IG1lZGlhUXVlcnkgPSB3aW5kb3cubWF0Y2hNZWRpYShcIihwcmVmZXJzLWNvbG9yLXNjaGVtZTogZGFyaylcIik7XG4gICAgaWYgKG1lZGlhUXVlcnkubWF0Y2hlcykge1xuICAgICAgc2V0VGhlbWUoXCJkYXJrXCIpO1xuICAgIH1cbiAgfSwgW10pO1xuICBjb25zb2xlLmxvZyh0aGVtZSk7XG4gIHJldHVybiAoXG4gICAgPFByb3ZpZGVyIHN0b3JlPXtzdG9yZX0+XG4gICAgICA8VGhlbWVDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXt7IHRoZW1lLCB0aGVtZVRvZ2dsZSB9fT5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJBcHBcIiBpZD17dGhlbWUgPT09IFwibGlnaHRcIiA/IFwibGlnaHRcIiA6IFwiZGFya1wifT5cbiAgICAgICAgICA8ZGl2IHN0eWxlPXt7IGRpc3BsYXk6IFwiZmxleFwiIH19PlxuICAgICAgICAgICAge3RoZW1lID09PSBcImxpZ2h0XCIgPyAoXG4gICAgICAgICAgICAgIDxwIHN0eWxlPXt7IGNvbG9yOiBcImJsYWNrXCIgfX0+RGFyayBNb2RlPC9wPlxuICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgPHAgc3R5bGU9e3sgY29sb3I6IFwid2hpdGVcIiB9fT5MaWdodCBNb2RlPC9wPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDxkaXYgc3R5bGU9e3sgbWFyZ2luVG9wOiBcIjhweFwiIH19PlxuICAgICAgICAgICAgICA8U3dpdGNoIG9uQ2hhbmdlPXt0aGVtZVRvZ2dsZX0gLz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxSb3V0ZXJQcm92aWRlclxuICAgICAgICAgICAgcm91dGVyPXtyb3V0ZXN9XG4gICAgICAgICAgICBmYWxsYmFja0VsZW1lbnQ9ezxkaXY+TG9hZGluZy4uLjwvZGl2Pn1cbiAgICAgICAgICAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvVGhlbWVDb250ZXh0LlByb3ZpZGVyPlxuICAgIDwvUHJvdmlkZXI+XG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IEFw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