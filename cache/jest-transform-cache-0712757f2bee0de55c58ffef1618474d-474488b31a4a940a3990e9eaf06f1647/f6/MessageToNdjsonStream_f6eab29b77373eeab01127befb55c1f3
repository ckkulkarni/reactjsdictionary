2536986528eea665ddb5b1649ce06f41
"use strict";

var __extends =
/* istanbul ignore next */
void 0 &&
/* istanbul ignore next */
(void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(exports, "__esModule", {
  value: true
});
var stream_1 = require("stream");
/**
 * Transforms a stream of message objects to NDJSON
 */
var MessageToNdjsonStream = /** @class */function (_super) {
  __extends(MessageToNdjsonStream, _super);
  function MessageToNdjsonStream() {
    return _super.call(this, {
      writableObjectMode: true,
      readableObjectMode: true
    }) || this;
  }
  MessageToNdjsonStream.prototype._transform = function (message, encoding, callback) {
    // @ts-ignore
    if (!message.constructor.toObject) {
      return callback(new Error("Not a protobuf object: " + JSON.stringify(message)));
    }
    // @ts-ignore
    var object = message.constructor.toObject(message, {
      defaults: false,
      enums: String,
      arrays: false,
      objects: false
    });
    // This reviver omits printing fields with empty values
    // This is to make it behave the same as Golang's protobuf->JSON converter
    var json = JSON.stringify(object, function (key, value) {
      return value === '' ? undefined : value;
    });
    this.push(json + '\n');
    callback();
  };
  return MessageToNdjsonStream;
}(stream_1.Transform);
exports.default = MessageToNdjsonStream;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJzdHJlYW1fMSIsInJlcXVpcmUiLCJNZXNzYWdlVG9OZGpzb25TdHJlYW0iLCJfc3VwZXIiLCJfX2V4dGVuZHMiLCJjYWxsIiwid3JpdGFibGVPYmplY3RNb2RlIiwicmVhZGFibGVPYmplY3RNb2RlIiwicHJvdG90eXBlIiwiX3RyYW5zZm9ybSIsIm1lc3NhZ2UiLCJlbmNvZGluZyIsImNhbGxiYWNrIiwiY29uc3RydWN0b3IiLCJ0b09iamVjdCIsIkVycm9yIiwiSlNPTiIsInN0cmluZ2lmeSIsIm9iamVjdCIsImRlZmF1bHRzIiwiZW51bXMiLCJTdHJpbmciLCJhcnJheXMiLCJvYmplY3RzIiwianNvbiIsImtleSIsInZhbHVlIiwidW5kZWZpbmVkIiwicHVzaCIsIlRyYW5zZm9ybSJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9NZXNzYWdlVG9OZGpzb25TdHJlYW0udHMiXSwic291cmNlc0NvbnRlbnQiOltudWxsXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFBQSxRQUFBLEdBQUFDLE9BQUE7QUFFQTs7O0FBR0EsSUFBQUMscUJBQUEsMEJBQUFDLE1BQUE7RUFBc0RDLFNBQUEsQ0FBQUYscUJBQUEsRUFBQUMsTUFBQTtFQUNwRCxTQUFBRCxzQkFBQTtXQUNFQyxNQUFBLENBQUFFLElBQUEsT0FBTTtNQUNKQyxrQkFBa0IsRUFBRSxJQUFJO01BQ3hCQyxrQkFBa0IsRUFBRTtLQUNyQixDQUFDO0VBQ0o7RUFFT0wscUJBQUEsQ0FBQU0sU0FBQSxDQUFBQyxVQUFVLEdBQWpCLFVBQWtCQyxPQUFVLEVBQUVDLFFBQWdCLEVBQUVDLFFBQTJCO0lBQ3pFO0lBQ0EsSUFBSSxDQUFDRixPQUFPLENBQUNHLFdBQVcsQ0FBQ0MsUUFBUSxFQUFFO01BQ2pDLE9BQU9GLFFBQVEsQ0FDYixJQUFJRyxLQUFLLENBQUMsNEJBQTBCQyxJQUFJLENBQUNDLFNBQVMsQ0FBQ1AsT0FBTyxDQUFHLENBQUMsQ0FDL0Q7O0lBRUg7SUFDQSxJQUFNUSxNQUFNLEdBQUdSLE9BQU8sQ0FBQ0csV0FBVyxDQUFDQyxRQUFRLENBQUNKLE9BQU8sRUFBRTtNQUNuRFMsUUFBUSxFQUFFLEtBQUs7TUFDZkMsS0FBSyxFQUFFQyxNQUFNO01BQ2JDLE1BQU0sRUFBRSxLQUFLO01BQ2JDLE9BQU8sRUFBRTtLQUNWLENBQUM7SUFFRjtJQUNBO0lBQ0EsSUFBTUMsSUFBSSxHQUFHUixJQUFJLENBQUNDLFNBQVMsQ0FBQ0MsTUFBTSxFQUFFLFVBQUNPLEdBQVcsRUFBRUMsS0FBVTtNQUMxRCxPQUFPQSxLQUFLLEtBQUssRUFBRSxHQUFHQyxTQUFTLEdBQUdELEtBQUs7SUFDekMsQ0FBQyxDQUFDO0lBQ0YsSUFBSSxDQUFDRSxJQUFJLENBQUNKLElBQUksR0FBRyxJQUFJLENBQUM7SUFDdEJaLFFBQVEsRUFBRTtFQUNaLENBQUM7RUFDSCxPQUFBVixxQkFBQztBQUFELENBQUMsQ0EvQnFERixRQUFBLENBQUE2QixTQUFTIn0=