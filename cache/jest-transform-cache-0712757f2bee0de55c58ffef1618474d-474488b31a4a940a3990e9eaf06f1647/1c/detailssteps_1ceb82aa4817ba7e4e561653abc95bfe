ed462ecea8536b03c4dd415596fabc43
"use strict";

var _react = _interopRequireDefault(require("react"));
var _jestCucumber = require("jest-cucumber");
var _react2 = require("@testing-library/react");
var _reactRouterDom = require("react-router-dom");
require("@testing-library/jest-dom/extend-expect");
var _axios = _interopRequireDefault(require("axios"));
var _Details = _interopRequireDefault(require("../../Dictionary/Details"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const feature = (0, _jestCucumber.loadFeature)("src/Components/Features/details.feature");
(0, _jestCucumber.defineFeature)(feature, test => {
  test("User views word details with phonetics and meanings", ({
    given,
    when,
    then
  }) => {
    let screen;
    beforeEach(() => {
      jest.clearAllMocks();
    });
    given("The user is on the Details page", () => {
      screen = (0, _react2.render)( /*#__PURE__*/_react.default.createElement(_reactRouterDom.MemoryRouter, {
        initialEntries: [{
          pathname: "/details",
          state: "testWord"
        }]
      }, /*#__PURE__*/_react.default.createElement(_Details.default, null)));
    });
    when("The user views the details for a word", async () => {
      jest.spyOn(_axios.default, "get").mockResolvedValueOnce({
        data: [{
          word: "example",
          phonetics: [{
            text: "/ɪɡˈzæmpəl/",
            audio: "example-audio.mp3"
          }],
          meanings: [{
            partOfSpeech: "noun",
            definitions: [{
              definition: "a representative form or pattern",
              example: "I followed your example",
              synonyms: ["model", "pattern", "prototype"]
            }]
          }]
        }]
      });
    });
    then("The word details should be displayed", async () => {
      await (0, _react2.waitFor)(() => {
        expect(screen.getByText("example")).toBeInTheDocument();
        expect(screen.getByText("/ɪɡˈzæmpəl/")).toBeInTheDocument();
        expect(screen.getByText("a representative form or pattern")).toBeInTheDocument();
        expect(screen.getByText("Example: I followed your example")).toBeInTheDocument();
        expect(screen.getByText("Synonyms: model, pattern, prototype")).toBeInTheDocument();
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9qZXN0Q3VjdW1iZXIiLCJfcmVhY3QyIiwiX3JlYWN0Um91dGVyRG9tIiwiX2F4aW9zIiwiX0RldGFpbHMiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImZlYXR1cmUiLCJsb2FkRmVhdHVyZSIsImRlZmluZUZlYXR1cmUiLCJ0ZXN0IiwiZ2l2ZW4iLCJ3aGVuIiwidGhlbiIsInNjcmVlbiIsImJlZm9yZUVhY2giLCJqZXN0IiwiY2xlYXJBbGxNb2NrcyIsInJlbmRlciIsImNyZWF0ZUVsZW1lbnQiLCJNZW1vcnlSb3V0ZXIiLCJpbml0aWFsRW50cmllcyIsInBhdGhuYW1lIiwic3RhdGUiLCJzcHlPbiIsImF4aW9zIiwibW9ja1Jlc29sdmVkVmFsdWVPbmNlIiwiZGF0YSIsIndvcmQiLCJwaG9uZXRpY3MiLCJ0ZXh0IiwiYXVkaW8iLCJtZWFuaW5ncyIsInBhcnRPZlNwZWVjaCIsImRlZmluaXRpb25zIiwiZGVmaW5pdGlvbiIsImV4YW1wbGUiLCJzeW5vbnltcyIsIndhaXRGb3IiLCJleHBlY3QiLCJnZXRCeVRleHQiLCJ0b0JlSW5UaGVEb2N1bWVudCJdLCJzb3VyY2VzIjpbImRldGFpbHMuc3RlcHMudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgZGVmaW5lRmVhdHVyZSwgbG9hZEZlYXR1cmUgfSBmcm9tIFwiamVzdC1jdWN1bWJlclwiO1xyXG5pbXBvcnQgeyByZW5kZXIsIHdhaXRGb3IgfSBmcm9tIFwiQHRlc3RpbmctbGlicmFyeS9yZWFjdFwiO1xyXG5pbXBvcnQgeyBNZW1vcnlSb3V0ZXIgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xyXG5pbXBvcnQgXCJAdGVzdGluZy1saWJyYXJ5L2plc3QtZG9tL2V4dGVuZC1leHBlY3RcIjtcclxuaW1wb3J0IGF4aW9zIGZyb20gXCJheGlvc1wiO1xyXG5pbXBvcnQgRGV0YWlscyBmcm9tIFwiLi4vLi4vRGljdGlvbmFyeS9EZXRhaWxzXCI7XHJcblxyXG5jb25zdCBmZWF0dXJlID0gbG9hZEZlYXR1cmUoXCJzcmMvQ29tcG9uZW50cy9GZWF0dXJlcy9kZXRhaWxzLmZlYXR1cmVcIik7XHJcblxyXG5kZWZpbmVGZWF0dXJlKGZlYXR1cmUsICh0ZXN0KSA9PiB7XHJcbiAgdGVzdChcIlVzZXIgdmlld3Mgd29yZCBkZXRhaWxzIHdpdGggcGhvbmV0aWNzIGFuZCBtZWFuaW5nc1wiLCAoe1xyXG4gICAgZ2l2ZW4sXHJcbiAgICB3aGVuLFxyXG4gICAgdGhlbixcclxuICB9KSA9PiB7XHJcbiAgICBsZXQgc2NyZWVuOiBhbnk7XHJcbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcclxuICAgICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBnaXZlbihcIlRoZSB1c2VyIGlzIG9uIHRoZSBEZXRhaWxzIHBhZ2VcIiwgKCkgPT4ge1xyXG4gICAgICBzY3JlZW4gPSByZW5kZXIoXHJcbiAgICAgICAgPE1lbW9yeVJvdXRlclxyXG4gICAgICAgICAgaW5pdGlhbEVudHJpZXM9e1t7IHBhdGhuYW1lOiBcIi9kZXRhaWxzXCIsIHN0YXRlOiBcInRlc3RXb3JkXCIgfV19XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgPERldGFpbHMgLz5cclxuICAgICAgICA8L01lbW9yeVJvdXRlcj5cclxuICAgICAgKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHdoZW4oXCJUaGUgdXNlciB2aWV3cyB0aGUgZGV0YWlscyBmb3IgYSB3b3JkXCIsIGFzeW5jICgpID0+IHtcclxuICAgICAgamVzdC5zcHlPbihheGlvcywgXCJnZXRcIikubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcclxuICAgICAgICBkYXRhOiBbXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIHdvcmQ6IFwiZXhhbXBsZVwiLFxyXG4gICAgICAgICAgICBwaG9uZXRpY3M6IFtcclxuICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0ZXh0OiBcIi/Jqsmhy4h6w6ZtcMmZbC9cIixcclxuICAgICAgICAgICAgICAgIGF1ZGlvOiBcImV4YW1wbGUtYXVkaW8ubXAzXCIsXHJcbiAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgbWVhbmluZ3M6IFtcclxuICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBwYXJ0T2ZTcGVlY2g6IFwibm91blwiLFxyXG4gICAgICAgICAgICAgICAgZGVmaW5pdGlvbnM6IFtcclxuICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGRlZmluaXRpb246IFwiYSByZXByZXNlbnRhdGl2ZSBmb3JtIG9yIHBhdHRlcm5cIixcclxuICAgICAgICAgICAgICAgICAgICBleGFtcGxlOiBcIkkgZm9sbG93ZWQgeW91ciBleGFtcGxlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgc3lub255bXM6IFtcIm1vZGVsXCIsIFwicGF0dGVyblwiLCBcInByb3RvdHlwZVwiXSxcclxuICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgXSxcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGVuKFwiVGhlIHdvcmQgZGV0YWlscyBzaG91bGQgYmUgZGlzcGxheWVkXCIsIGFzeW5jICgpID0+IHtcclxuICAgICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XHJcbiAgICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoXCJleGFtcGxlXCIpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xyXG4gICAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KFwiL8mqyaHLiHrDpm1wyZlsL1wiKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcclxuICAgICAgICBleHBlY3QoXHJcbiAgICAgICAgICBzY3JlZW4uZ2V0QnlUZXh0KFwiYSByZXByZXNlbnRhdGl2ZSBmb3JtIG9yIHBhdHRlcm5cIilcclxuICAgICAgICApLnRvQmVJblRoZURvY3VtZW50KCk7XHJcbiAgICAgICAgZXhwZWN0KFxyXG4gICAgICAgICAgc2NyZWVuLmdldEJ5VGV4dChcIkV4YW1wbGU6IEkgZm9sbG93ZWQgeW91ciBleGFtcGxlXCIpXHJcbiAgICAgICAgKS50b0JlSW5UaGVEb2N1bWVudCgpO1xyXG4gICAgICAgIGV4cGVjdChcclxuICAgICAgICAgIHNjcmVlbi5nZXRCeVRleHQoXCJTeW5vbnltczogbW9kZWwsIHBhdHRlcm4sIHByb3RvdHlwZVwiKVxyXG4gICAgICAgICkudG9CZUluVGhlRG9jdW1lbnQoKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9KTtcclxufSk7XHJcbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxhQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxPQUFBLEdBQUFGLE9BQUE7QUFDQSxJQUFBRyxlQUFBLEdBQUFILE9BQUE7QUFDQUEsT0FBQTtBQUNBLElBQUFJLE1BQUEsR0FBQUwsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFLLFFBQUEsR0FBQU4sc0JBQUEsQ0FBQUMsT0FBQTtBQUErQyxTQUFBRCx1QkFBQU8sR0FBQSxXQUFBQSxHQUFBLElBQUFBLEdBQUEsQ0FBQUMsVUFBQSxHQUFBRCxHQUFBLEtBQUFFLE9BQUEsRUFBQUYsR0FBQTtBQUUvQyxNQUFNRyxPQUFPLEdBQUcsSUFBQUMseUJBQVcsRUFBQyx5Q0FBeUMsQ0FBQztBQUV0RSxJQUFBQywyQkFBYSxFQUFDRixPQUFPLEVBQUdHLElBQUksSUFBSztFQUMvQkEsSUFBSSxDQUFDLHFEQUFxRCxFQUFFLENBQUM7SUFDM0RDLEtBQUs7SUFDTEMsSUFBSTtJQUNKQztFQUNGLENBQUMsS0FBSztJQUNKLElBQUlDLE1BQVc7SUFDZkMsVUFBVSxDQUFDLE1BQU07TUFDZkMsSUFBSSxDQUFDQyxhQUFhLEVBQUU7SUFDdEIsQ0FBQyxDQUFDO0lBRUZOLEtBQUssQ0FBQyxpQ0FBaUMsRUFBRSxNQUFNO01BQzdDRyxNQUFNLEdBQUcsSUFBQUksY0FBTSxnQkFDYnRCLE1BQUEsQ0FBQVUsT0FBQSxDQUFBYSxhQUFBLENBQUNsQixlQUFBLENBQUFtQixZQUFZO1FBQ1hDLGNBQWMsRUFBRSxDQUFDO1VBQUVDLFFBQVEsRUFBRSxVQUFVO1VBQUVDLEtBQUssRUFBRTtRQUFXLENBQUM7TUFBRSxnQkFFOUQzQixNQUFBLENBQUFVLE9BQUEsQ0FBQWEsYUFBQSxDQUFDaEIsUUFBQSxDQUFBRyxPQUFPLE9BQUcsQ0FDRSxDQUNoQjtJQUNILENBQUMsQ0FBQztJQUVGTSxJQUFJLENBQUMsdUNBQXVDLEVBQUUsWUFBWTtNQUN4REksSUFBSSxDQUFDUSxLQUFLLENBQUNDLGNBQUssRUFBRSxLQUFLLENBQUMsQ0FBQ0MscUJBQXFCLENBQUM7UUFDN0NDLElBQUksRUFBRSxDQUNKO1VBQ0VDLElBQUksRUFBRSxTQUFTO1VBQ2ZDLFNBQVMsRUFBRSxDQUNUO1lBQ0VDLElBQUksRUFBRSxhQUFhO1lBQ25CQyxLQUFLLEVBQUU7VUFDVCxDQUFDLENBQ0Y7VUFDREMsUUFBUSxFQUFFLENBQ1I7WUFDRUMsWUFBWSxFQUFFLE1BQU07WUFDcEJDLFdBQVcsRUFBRSxDQUNYO2NBQ0VDLFVBQVUsRUFBRSxrQ0FBa0M7Y0FDOUNDLE9BQU8sRUFBRSx5QkFBeUI7Y0FDbENDLFFBQVEsRUFBRSxDQUFDLE9BQU8sRUFBRSxTQUFTLEVBQUUsV0FBVztZQUM1QyxDQUFDO1VBRUwsQ0FBQztRQUVMLENBQUM7TUFFTCxDQUFDLENBQUM7SUFDSixDQUFDLENBQUM7SUFFRnhCLElBQUksQ0FBQyxzQ0FBc0MsRUFBRSxZQUFZO01BQ3ZELE1BQU0sSUFBQXlCLGVBQU8sRUFBQyxNQUFNO1FBQ2xCQyxNQUFNLENBQUN6QixNQUFNLENBQUMwQixTQUFTLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQ0MsaUJBQWlCLEVBQUU7UUFDdkRGLE1BQU0sQ0FBQ3pCLE1BQU0sQ0FBQzBCLFNBQVMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDQyxpQkFBaUIsRUFBRTtRQUMzREYsTUFBTSxDQUNKekIsTUFBTSxDQUFDMEIsU0FBUyxDQUFDLGtDQUFrQyxDQUFDLENBQ3JELENBQUNDLGlCQUFpQixFQUFFO1FBQ3JCRixNQUFNLENBQ0p6QixNQUFNLENBQUMwQixTQUFTLENBQUMsa0NBQWtDLENBQUMsQ0FDckQsQ0FBQ0MsaUJBQWlCLEVBQUU7UUFDckJGLE1BQU0sQ0FDSnpCLE1BQU0sQ0FBQzBCLFNBQVMsQ0FBQyxxQ0FBcUMsQ0FBQyxDQUN4RCxDQUFDQyxpQkFBaUIsRUFBRTtNQUN2QixDQUFDLENBQUM7SUFDSixDQUFDLENBQUM7RUFDSixDQUFDLENBQUM7QUFDSixDQUFDLENBQUMifQ==