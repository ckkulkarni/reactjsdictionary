0cc026d97d1250240c3e57ff7e6f8e6c
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _axios = _interopRequireDefault(require("axios"));
var _reactRouterDom = require("react-router-dom");
var _App = require("./../../App");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const Details = () => {
  const {
    state
  } = (0, _reactRouterDom.useLocation)();
  const [wordDetails, setWordDetails] = (0, _react.useState)(null);
  const {
    theme,
    themeToggle
  } = (0, _react.useContext)(_App.ThemeContext);
  (0, _react.useEffect)(() => {
    const getWordDetails = async () => {
      try {
        const result = await _axios.default.get(`https://api.dictionaryapi.dev/api/v2/entries/en/${state}`);
        setWordDetails(result.data[0]);
      } catch (error) {
        alert("No details found.");
      }
    };
    getWordDetails();
  }, [state]);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "detailsContainer"
  }, wordDetails && /*#__PURE__*/_react.default.createElement("div", {
    className: "details"
  }, /*#__PURE__*/_react.default.createElement("h1", {
    className: "wordHeading"
  }, wordDetails.word), wordDetails.phonetics.map((phonetic, index) => /*#__PURE__*/_react.default.createElement("div", {
    key: index,
    className: "phonetics"
  }, /*#__PURE__*/_react.default.createElement("p", null, phonetic.text), phonetic.audio && /*#__PURE__*/_react.default.createElement("audio", {
    controls: true
  }, /*#__PURE__*/_react.default.createElement("source", {
    src: phonetic.audio,
    type: "audio/mpeg"
  })))), wordDetails.meanings.map((meaning, index) => /*#__PURE__*/_react.default.createElement("div", {
    key: index,
    className: "meanings"
  }, /*#__PURE__*/_react.default.createElement("h3", {
    className: "partOfSpeech"
  }, meaning.partOfSpeech), meaning.definitions.map((definition, index) => /*#__PURE__*/_react.default.createElement("div", {
    key: index,
    className: "defineWExample"
  }, /*#__PURE__*/_react.default.createElement("p", {
    className: "definitionParagraph"
  }, definition.definition), definition.example && /*#__PURE__*/_react.default.createElement("p", {
    className: "example"
  }, /*#__PURE__*/_react.default.createElement("em", null, "Example:"), " ", definition.example), definition.synonyms && /*#__PURE__*/_react.default.createElement("p", {
    className: "synonyms"
  }, /*#__PURE__*/_react.default.createElement("em", null, "Synonyms:"), " ", definition.synonyms.join(", "))))))));
};
var _default = Details;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,