0e6c05d97652cdce7033e3041a67d060
/* istanbul ignore next */
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var
/* istanbul ignore next */
_react = _interopRequireWildcard(require("react"));
var
/* istanbul ignore next */
_Context = require("./Context");
var
/* istanbul ignore next */
_Subscription = require("../utils/Subscription");
var
/* istanbul ignore next */
_useIsomorphicLayoutEffect = require("../utils/useIsomorphicLayoutEffect");
/* istanbul ignore next */ function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function Provider({
  store,
  context,
  children,
  serverState
}) {
  const contextValue =
  /* istanbul ignore next */
  (0,
  /* istanbul ignore next */
  _react.
  /* istanbul ignore next */
  useMemo)(() => {
    const subscription =
    /* istanbul ignore next */
    (0,
    /* istanbul ignore next */
    _Subscription.
    /* istanbul ignore next */
    createSubscription)(store);
    return {
      store,
      subscription,
      getServerState: serverState ? () => serverState : undefined
    };
  }, [store, serverState]);
  const previousState =
  /* istanbul ignore next */
  (0,
  /* istanbul ignore next */
  _react.
  /* istanbul ignore next */
  useMemo)(() => store.getState(), [store]);
  /* istanbul ignore next */
  (0,
  /* istanbul ignore next */
  _useIsomorphicLayoutEffect.
  /* istanbul ignore next */
  useIsomorphicLayoutEffect)(() => {
    const {
      subscription
    } = contextValue;
    subscription.onStateChange = subscription.notifyNestedSubs;
    subscription.trySubscribe();
    if (previousState !== store.getState()) {
      subscription.notifyNestedSubs();
    }
    return () => {
      subscription.tryUnsubscribe();
      subscription.onStateChange = undefined;
    };
  }, [contextValue, previousState]);
  const Context = context ||
  /* istanbul ignore next */
  _Context.
  /* istanbul ignore next */
  ReactReduxContext; // @ts-ignore 'AnyAction' is assignable to the constraint of type 'A', but 'A' could be instantiated with a different subtype

  return /*#__PURE__*/(
    /* istanbul ignore next */
    _react.
    /* istanbul ignore next */
    default.createElement(Context.Provider, {
      value: contextValue
    }, children)
  );
}
/* istanbul ignore next */
var _default = Provider;
/* istanbul ignore next */
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfQ29udGV4dCIsIl9TdWJzY3JpcHRpb24iLCJfdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJQcm92aWRlciIsInN0b3JlIiwiY29udGV4dCIsImNoaWxkcmVuIiwic2VydmVyU3RhdGUiLCJjb250ZXh0VmFsdWUiLCJ1c2VNZW1vIiwic3Vic2NyaXB0aW9uIiwiY3JlYXRlU3Vic2NyaXB0aW9uIiwiZ2V0U2VydmVyU3RhdGUiLCJ1bmRlZmluZWQiLCJwcmV2aW91c1N0YXRlIiwiZ2V0U3RhdGUiLCJ1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0Iiwib25TdGF0ZUNoYW5nZSIsIm5vdGlmeU5lc3RlZFN1YnMiLCJ0cnlTdWJzY3JpYmUiLCJ0cnlVbnN1YnNjcmliZSIsIkNvbnRleHQiLCJSZWFjdFJlZHV4Q29udGV4dCIsIlJlYWN0IiwiY3JlYXRlRWxlbWVudCIsInZhbHVlIiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiUHJvdmlkZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4vQ29udGV4dCc7XG5pbXBvcnQgeyBjcmVhdGVTdWJzY3JpcHRpb24gfSBmcm9tICcuLi91dGlscy9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCB9IGZyb20gJy4uL3V0aWxzL3VzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QnO1xuXG5mdW5jdGlvbiBQcm92aWRlcih7XG4gIHN0b3JlLFxuICBjb250ZXh0LFxuICBjaGlsZHJlbixcbiAgc2VydmVyU3RhdGVcbn0pIHtcbiAgY29uc3QgY29udGV4dFZhbHVlID0gdXNlTWVtbygoKSA9PiB7XG4gICAgY29uc3Qgc3Vic2NyaXB0aW9uID0gY3JlYXRlU3Vic2NyaXB0aW9uKHN0b3JlKTtcbiAgICByZXR1cm4ge1xuICAgICAgc3RvcmUsXG4gICAgICBzdWJzY3JpcHRpb24sXG4gICAgICBnZXRTZXJ2ZXJTdGF0ZTogc2VydmVyU3RhdGUgPyAoKSA9PiBzZXJ2ZXJTdGF0ZSA6IHVuZGVmaW5lZFxuICAgIH07XG4gIH0sIFtzdG9yZSwgc2VydmVyU3RhdGVdKTtcbiAgY29uc3QgcHJldmlvdXNTdGF0ZSA9IHVzZU1lbW8oKCkgPT4gc3RvcmUuZ2V0U3RhdGUoKSwgW3N0b3JlXSk7XG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIHN1YnNjcmlwdGlvblxuICAgIH0gPSBjb250ZXh0VmFsdWU7XG4gICAgc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UgPSBzdWJzY3JpcHRpb24ubm90aWZ5TmVzdGVkU3VicztcbiAgICBzdWJzY3JpcHRpb24udHJ5U3Vic2NyaWJlKCk7XG5cbiAgICBpZiAocHJldmlvdXNTdGF0ZSAhPT0gc3RvcmUuZ2V0U3RhdGUoKSkge1xuICAgICAgc3Vic2NyaXB0aW9uLm5vdGlmeU5lc3RlZFN1YnMoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgc3Vic2NyaXB0aW9uLnRyeVVuc3Vic2NyaWJlKCk7XG4gICAgICBzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSA9IHVuZGVmaW5lZDtcbiAgICB9O1xuICB9LCBbY29udGV4dFZhbHVlLCBwcmV2aW91c1N0YXRlXSk7XG4gIGNvbnN0IENvbnRleHQgPSBjb250ZXh0IHx8IFJlYWN0UmVkdXhDb250ZXh0OyAvLyBAdHMtaWdub3JlICdBbnlBY3Rpb24nIGlzIGFzc2lnbmFibGUgdG8gdGhlIGNvbnN0cmFpbnQgb2YgdHlwZSAnQScsIGJ1dCAnQScgY291bGQgYmUgaW5zdGFudGlhdGVkIHdpdGggYSBkaWZmZXJlbnQgc3VidHlwZVxuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGNvbnRleHRWYWx1ZVxuICB9LCBjaGlsZHJlbik7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFByb3ZpZGVyOyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQUE7QUFBQUEsTUFBQSxHQUFBQyx1QkFBQSxDQUFBQyxPQUFBO0FBQ0E7QUFBQTtBQUFBQyxRQUFBLEdBQUFELE9BQUE7QUFDQTtBQUFBO0FBQUFFLGFBQUEsR0FBQUYsT0FBQTtBQUNBO0FBQUE7QUFBQUcsMEJBQUEsR0FBQUgsT0FBQTtBQUErRSxvQ0FBQUkseUJBQUFDLFdBQUEsZUFBQUMsT0FBQSxrQ0FBQUMsaUJBQUEsT0FBQUQsT0FBQSxRQUFBRSxnQkFBQSxPQUFBRixPQUFBLFlBQUFGLHdCQUFBLFlBQUFBLENBQUFDLFdBQUEsV0FBQUEsV0FBQSxHQUFBRyxnQkFBQSxHQUFBRCxpQkFBQSxLQUFBRixXQUFBO0FBQUEsU0FBQU4sd0JBQUFVLEdBQUEsRUFBQUosV0FBQSxTQUFBQSxXQUFBLElBQUFJLEdBQUEsSUFBQUEsR0FBQSxDQUFBQyxVQUFBLFdBQUFELEdBQUEsUUFBQUEsR0FBQSxvQkFBQUEsR0FBQSx3QkFBQUEsR0FBQSw0QkFBQUUsT0FBQSxFQUFBRixHQUFBLFVBQUFHLEtBQUEsR0FBQVIsd0JBQUEsQ0FBQUMsV0FBQSxPQUFBTyxLQUFBLElBQUFBLEtBQUEsQ0FB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