621bc99bb01f05c25ceb634da27d9b14
"use strict";

var __extends =
/* istanbul ignore next */
void 0 &&
/* istanbul ignore next */
(void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  return function (d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
Object.defineProperty(exports, "__esModule", {
  value: true
});
var stream_1 = require("stream");
var protobufjs_1 = require("protobufjs");
/**
 * Transforms a binary stream to a stream of message objects
 */
var BinaryToMessageStream = /** @class */function (_super) {
  __extends(BinaryToMessageStream, _super);
  function BinaryToMessageStream(decodeDelimited) {
    var _this = _super.call(this, {
      objectMode: true
    }) || this;
    _this.decodeDelimited = decodeDelimited;
    _this.buffer = Buffer.alloc(0);
    return _this;
  }
  BinaryToMessageStream.prototype._transform = function (chunk, encoding, callback) {
    this.buffer = Buffer.concat([this.buffer, chunk]);
    while (true) {
      try {
        var reader = protobufjs_1.Reader.create(this.buffer);
        var message = this.decodeDelimited(reader);
        this.push(message);
        this.buffer = this.buffer.slice(reader.pos);
      } catch (err) {
        if (err instanceof RangeError) {
          // The buffer doesn't have all the data yet. Keep reading.
          break;
        } else {
          throw err;
        }
      }
    }
    callback();
  };
  return BinaryToMessageStream;
}(stream_1.Transform);
exports.default = BinaryToMessageStream;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJzdHJlYW1fMSIsInJlcXVpcmUiLCJwcm90b2J1ZmpzXzEiLCJCaW5hcnlUb01lc3NhZ2VTdHJlYW0iLCJfc3VwZXIiLCJfX2V4dGVuZHMiLCJkZWNvZGVEZWxpbWl0ZWQiLCJfdGhpcyIsImNhbGwiLCJvYmplY3RNb2RlIiwiYnVmZmVyIiwiQnVmZmVyIiwiYWxsb2MiLCJwcm90b3R5cGUiLCJfdHJhbnNmb3JtIiwiY2h1bmsiLCJlbmNvZGluZyIsImNhbGxiYWNrIiwiY29uY2F0IiwicmVhZGVyIiwiUmVhZGVyIiwiY3JlYXRlIiwibWVzc2FnZSIsInB1c2giLCJzbGljZSIsInBvcyIsImVyciIsIlJhbmdlRXJyb3IiLCJUcmFuc2Zvcm0iXSwic291cmNlcyI6WyIuLi8uLi9zcmMvQmluYXJ5VG9NZXNzYWdlU3RyZWFtLnRzIl0sInNvdXJjZXNDb250ZW50IjpbbnVsbF0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBQUEsUUFBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsWUFBQSxHQUFBRCxPQUFBO0FBRUE7OztBQUdBLElBQUFFLHFCQUFBLDBCQUFBQyxNQUFBO0VBQXNEQyxTQUFBLENBQUFGLHFCQUFBLEVBQUFDLE1BQUE7RUFHcEQsU0FBQUQsc0JBQ21CRyxlQUFtRDtJQUR0RSxJQUFBQyxLQUFBLEdBR0VILE1BQUEsQ0FBQUksSUFBQSxPQUFNO01BQUVDLFVBQVUsRUFBRTtJQUFJLENBQUUsQ0FBQztJQUZWRixLQUFBLENBQUFELGVBQWUsR0FBZkEsZUFBZTtJQUgxQkMsS0FBQSxDQUFBRyxNQUFNLEdBQUdDLE1BQU0sQ0FBQ0MsS0FBSyxDQUFDLENBQUMsQ0FBQzs7RUFNaEM7RUFFT1QscUJBQUEsQ0FBQVUsU0FBQSxDQUFBQyxVQUFVLEdBQWpCLFVBQWtCQyxLQUFVLEVBQUVDLFFBQWdCLEVBQUVDLFFBQTJCO0lBQ3pFLElBQUksQ0FBQ1AsTUFBTSxHQUFHQyxNQUFNLENBQUNPLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQ1IsTUFBTSxFQUFFSyxLQUFLLENBQUMsQ0FBQztJQUVqRCxPQUFPLElBQUksRUFBRTtNQUNYLElBQUk7UUFDRixJQUFNSSxNQUFNLEdBQUdqQixZQUFBLENBQUFrQixNQUFNLENBQUNDLE1BQU0sQ0FBQyxJQUFJLENBQUNYLE1BQU0sQ0FBQztRQUN6QyxJQUFNWSxPQUFPLEdBQUcsSUFBSSxDQUFDaEIsZUFBZSxDQUFDYSxNQUFNLENBQUM7UUFDNUMsSUFBSSxDQUFDSSxJQUFJLENBQUNELE9BQU8sQ0FBQztRQUNsQixJQUFJLENBQUNaLE1BQU0sR0FBRyxJQUFJLENBQUNBLE1BQU0sQ0FBQ2MsS0FBSyxDQUFDTCxNQUFNLENBQUNNLEdBQUcsQ0FBQztPQUM1QyxDQUFDLE9BQU9DLEdBQUcsRUFBRTtRQUNaLElBQUlBLEdBQUcsWUFBWUMsVUFBVSxFQUFFO1VBQzdCO1VBQ0E7U0FDRCxNQUFNO1VBQ0wsTUFBTUQsR0FBRzs7OztJQUlmVCxRQUFRLEVBQUU7RUFDWixDQUFDO0VBQ0gsT0FBQWQscUJBQUM7QUFBRCxDQUFDLENBN0JxREgsUUFBQSxDQUFBNEIsU0FBUyJ9