cb5c0dee0ce143c97478328d45ce4683
"use strict";

var _react = _interopRequireDefault(require("react"));
var _jestCucumber = require("jest-cucumber");
var _reactRedux = require("react-redux");
var _reactRouterDom = require("react-router-dom");
var _react2 = require("@testing-library/react");
require("@testing-library/jest-dom/extend-expect");
var _store = require("../../Redux/store");
var _Home = _interopRequireDefault(require("../../Dictionary/Home"));
var _Details = _interopRequireDefault(require("../../Dictionary/Details"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const feature = (0, _jestCucumber.loadFeature)("src/Components/Features/home.feature");
(0, _jestCucumber.defineFeature)(feature, test => {
  test("The component renders and a random word is fetched", ({
    given,
    when,
    then,
    and
  }) => {
    const alertMock = jest.spyOn(window, "alert").mockImplementation(() => {});
    given("The user is on the Home page", () => {
      const screen = (0, _react2.render)( /*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {
        store: _store.store
      }, /*#__PURE__*/_react.default.createElement(_reactRouterDom.BrowserRouter, null, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Routes, null, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
        path: "/search",
        element: /*#__PURE__*/_react.default.createElement(_Home.default, null)
      }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
        path: "/details/:id",
        element: /*#__PURE__*/_react.default.createElement(_Details.default, null)
      }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
        path: "*",
        element: /*#__PURE__*/_react.default.createElement(_reactRouterDom.Navigate, {
          to: "/search",
          replace: true
        })
      })))));
      expect(screen.getByTestId("homeContainer")).toBeInTheDocument();
    });
    when("The user inputs a word and submits it", async () => {
      const screen = (0, _react2.render)( /*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {
        store: _store.store
      }, /*#__PURE__*/_react.default.createElement(_reactRouterDom.BrowserRouter, null, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Routes, null, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
        path: "/search",
        element: /*#__PURE__*/_react.default.createElement(_Home.default, null)
      }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
        path: "/details/:id",
        element: /*#__PURE__*/_react.default.createElement(_Details.default, null)
      }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
        path: "*",
        element: /*#__PURE__*/_react.default.createElement(_reactRouterDom.Navigate, {
          to: "/search",
          replace: true
        })
      })))));
      const input = screen.getAllByPlaceholderText("Example: example");
      _react2.fireEvent.change(input[0], {
        target: {
          value: "example"
        }
      });
    });
    then("the definition of the word is fetched and displayed", async () => {
      const screen = (0, _react2.render)( /*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {
        store: _store.store
      }, /*#__PURE__*/_react.default.createElement(_reactRouterDom.BrowserRouter, null, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Routes, null, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
        path: "/search",
        element: /*#__PURE__*/_react.default.createElement(_Home.default, null)
      }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
        path: "/details/:id",
        element: /*#__PURE__*/_react.default.createElement(_Details.default, null)
      }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
        path: "*",
        element: /*#__PURE__*/_react.default.createElement(_reactRouterDom.Navigate, {
          to: "/search",
          replace: true
        })
      })))));
      const mockAxios = jest.spyOn(require("axios"), "get");
      mockAxios.mockResolvedValueOnce({
        data: [{
          meanings: [{
            definitions: [{
              definition: "a thing characteristic of its kind"
            }]
          }]
        }]
      });
      await screen.findByText("a thing characteristic of its kind");
      expect(screen.getByText("a thing characteristic of its kind")).toBeInTheDocument();
    });
    and("clicking on the definition takes the user to the Details page for that word", async () => {
      const screen = (0, _react2.render)( /*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {
        store: _store.store
      }, /*#__PURE__*/_react.default.createElement(_reactRouterDom.BrowserRouter, null, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Routes, null, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
        path: "/search",
        element: /*#__PURE__*/_react.default.createElement(_Home.default, null)
      }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
        path: "/details/:id",
        element: /*#__PURE__*/_react.default.createElement(_Details.default, null)
      }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
        path: "*",
        element: /*#__PURE__*/_react.default.createElement(_reactRouterDom.Navigate, {
          to: "/search",
          replace: true
        })
      })))));
      const input = screen.getAllByPlaceholderText("Example: example");
      _react2.fireEvent.change(input[0], {
        target: {
          value: "example"
        }
      });
      const mockAxios = jest.spyOn(require("axios"), "get");
      mockAxios.mockResolvedValueOnce({
        data: [{
          meanings: [{
            definitions: [{
              definition: "a thing characteristic of its kind"
            }]
          }]
        }]
      });
      const def = screen.getAllByTestId("definitionContainer");
      const dp = screen.getByText("a thing characteristic of its kind");
      _react2.fireEvent.click(def[1]);
      await (0, _react2.waitFor)(() => {
        console.log("Pathname:", window.location.pathname);
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9qZXN0Q3VjdW1iZXIiLCJfcmVhY3RSZWR1eCIsIl9yZWFjdFJvdXRlckRvbSIsIl9yZWFjdDIiLCJfc3RvcmUiLCJfSG9tZSIsIl9EZXRhaWxzIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJmZWF0dXJlIiwibG9hZEZlYXR1cmUiLCJkZWZpbmVGZWF0dXJlIiwidGVzdCIsImdpdmVuIiwid2hlbiIsInRoZW4iLCJhbmQiLCJhbGVydE1vY2siLCJqZXN0Iiwic3B5T24iLCJ3aW5kb3ciLCJtb2NrSW1wbGVtZW50YXRpb24iLCJzY3JlZW4iLCJyZW5kZXIiLCJjcmVhdGVFbGVtZW50IiwiUHJvdmlkZXIiLCJzdG9yZSIsIkJyb3dzZXJSb3V0ZXIiLCJSb3V0ZXMiLCJSb3V0ZSIsInBhdGgiLCJlbGVtZW50IiwiTmF2aWdhdGUiLCJ0byIsInJlcGxhY2UiLCJleHBlY3QiLCJnZXRCeVRlc3RJZCIsInRvQmVJblRoZURvY3VtZW50IiwiaW5wdXQiLCJnZXRBbGxCeVBsYWNlaG9sZGVyVGV4dCIsImZpcmVFdmVudCIsImNoYW5nZSIsInRhcmdldCIsInZhbHVlIiwibW9ja0F4aW9zIiwibW9ja1Jlc29sdmVkVmFsdWVPbmNlIiwiZGF0YSIsIm1lYW5pbmdzIiwiZGVmaW5pdGlvbnMiLCJkZWZpbml0aW9uIiwiZmluZEJ5VGV4dCIsImdldEJ5VGV4dCIsImRlZiIsImdldEFsbEJ5VGVzdElkIiwiZHAiLCJjbGljayIsIndhaXRGb3IiLCJjb25zb2xlIiwibG9nIiwibG9jYXRpb24iLCJwYXRobmFtZSJdLCJzb3VyY2VzIjpbImhvbWUuc3RlcHMudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgZGVmaW5lRmVhdHVyZSwgbG9hZEZlYXR1cmUgfSBmcm9tIFwiamVzdC1jdWN1bWJlclwiO1xyXG5pbXBvcnQgeyBQcm92aWRlciB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xyXG5pbXBvcnQgeyBCcm93c2VyUm91dGVyLCBSb3V0ZSwgUm91dGVzLCBOYXZpZ2F0ZSB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XHJcbmltcG9ydCB7IGFjdCwgZmlyZUV2ZW50LCByZW5kZXIsIHdhaXRGb3IgfSBmcm9tIFwiQHRlc3RpbmctbGlicmFyeS9yZWFjdFwiO1xyXG5pbXBvcnQgXCJAdGVzdGluZy1saWJyYXJ5L2plc3QtZG9tL2V4dGVuZC1leHBlY3RcIjtcclxuaW1wb3J0IHsgc3RvcmUgfSBmcm9tIFwiLi4vLi4vUmVkdXgvc3RvcmVcIjtcclxuaW1wb3J0IHJvdXRlcyBmcm9tIFwiLi8uLi8uLi91dGlscy9Sb3V0ZXNcIjtcclxuaW1wb3J0IEhvbWUgZnJvbSBcIi4uLy4uL0RpY3Rpb25hcnkvSG9tZVwiO1xyXG5pbXBvcnQgRGV0YWlscyBmcm9tIFwiLi4vLi4vRGljdGlvbmFyeS9EZXRhaWxzXCI7XHJcbmltcG9ydCBheGlvcyBmcm9tIFwiYXhpb3NcIjtcclxuXHJcbmNvbnN0IGZlYXR1cmUgPSBsb2FkRmVhdHVyZShcInNyYy9Db21wb25lbnRzL0ZlYXR1cmVzL2hvbWUuZmVhdHVyZVwiKTtcclxuXHJcbmRlZmluZUZlYXR1cmUoZmVhdHVyZSwgKHRlc3QpID0+IHtcclxuICB0ZXN0KFwiVGhlIGNvbXBvbmVudCByZW5kZXJzIGFuZCBhIHJhbmRvbSB3b3JkIGlzIGZldGNoZWRcIiwgKHtcclxuICAgIGdpdmVuLFxyXG4gICAgd2hlbixcclxuICAgIHRoZW4sXHJcbiAgICBhbmQsXHJcbiAgfSkgPT4ge1xyXG4gICAgY29uc3QgYWxlcnRNb2NrID0gamVzdC5zcHlPbih3aW5kb3csIFwiYWxlcnRcIikubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IHt9KTtcclxuICAgIGdpdmVuKFwiVGhlIHVzZXIgaXMgb24gdGhlIEhvbWUgcGFnZVwiLCAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IHNjcmVlbiA9IHJlbmRlcihcclxuICAgICAgICA8UHJvdmlkZXIgc3RvcmU9e3N0b3JlfT5cclxuICAgICAgICAgIDxCcm93c2VyUm91dGVyPlxyXG4gICAgICAgICAgICA8Um91dGVzPlxyXG4gICAgICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL3NlYXJjaFwiIGVsZW1lbnQ9ezxIb21lIC8+fSAvPlxyXG4gICAgICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL2RldGFpbHMvOmlkXCIgZWxlbWVudD17PERldGFpbHMgLz59IC8+XHJcbiAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIqXCIgZWxlbWVudD17PE5hdmlnYXRlIHRvPVwiL3NlYXJjaFwiIHJlcGxhY2UgLz59IC8+XHJcbiAgICAgICAgICAgIDwvUm91dGVzPlxyXG4gICAgICAgICAgPC9Ccm93c2VyUm91dGVyPlxyXG4gICAgICAgIDwvUHJvdmlkZXI+XHJcbiAgICAgICk7XHJcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXN0SWQoXCJob21lQ29udGFpbmVyXCIpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xyXG4gICAgfSk7XHJcbiAgICB3aGVuKFwiVGhlIHVzZXIgaW5wdXRzIGEgd29yZCBhbmQgc3VibWl0cyBpdFwiLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IHNjcmVlbiA9IHJlbmRlcihcclxuICAgICAgICA8UHJvdmlkZXIgc3RvcmU9e3N0b3JlfT5cclxuICAgICAgICAgIDxCcm93c2VyUm91dGVyPlxyXG4gICAgICAgICAgICA8Um91dGVzPlxyXG4gICAgICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL3NlYXJjaFwiIGVsZW1lbnQ9ezxIb21lIC8+fSAvPlxyXG4gICAgICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL2RldGFpbHMvOmlkXCIgZWxlbWVudD17PERldGFpbHMgLz59IC8+XHJcbiAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIqXCIgZWxlbWVudD17PE5hdmlnYXRlIHRvPVwiL3NlYXJjaFwiIHJlcGxhY2UgLz59IC8+XHJcbiAgICAgICAgICAgIDwvUm91dGVzPlxyXG4gICAgICAgICAgPC9Ccm93c2VyUm91dGVyPlxyXG4gICAgICAgIDwvUHJvdmlkZXI+XHJcbiAgICAgICk7XHJcbiAgICAgIGNvbnN0IGlucHV0ID0gc2NyZWVuLmdldEFsbEJ5UGxhY2Vob2xkZXJUZXh0KFwiRXhhbXBsZTogZXhhbXBsZVwiKTtcclxuICAgICAgZmlyZUV2ZW50LmNoYW5nZShpbnB1dFswXSwgeyB0YXJnZXQ6IHsgdmFsdWU6IFwiZXhhbXBsZVwiIH0gfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGVuKFwidGhlIGRlZmluaXRpb24gb2YgdGhlIHdvcmQgaXMgZmV0Y2hlZCBhbmQgZGlzcGxheWVkXCIsIGFzeW5jICgpID0+IHtcclxuICAgICAgY29uc3Qgc2NyZWVuID0gcmVuZGVyKFxyXG4gICAgICAgIDxQcm92aWRlciBzdG9yZT17c3RvcmV9PlxyXG4gICAgICAgICAgPEJyb3dzZXJSb3V0ZXI+XHJcbiAgICAgICAgICAgIDxSb3V0ZXM+XHJcbiAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvc2VhcmNoXCIgZWxlbWVudD17PEhvbWUgLz59IC8+XHJcbiAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvZGV0YWlscy86aWRcIiBlbGVtZW50PXs8RGV0YWlscyAvPn0gLz5cclxuICAgICAgICAgICAgICA8Um91dGUgcGF0aD1cIipcIiBlbGVtZW50PXs8TmF2aWdhdGUgdG89XCIvc2VhcmNoXCIgcmVwbGFjZSAvPn0gLz5cclxuICAgICAgICAgICAgPC9Sb3V0ZXM+XHJcbiAgICAgICAgICA8L0Jyb3dzZXJSb3V0ZXI+XHJcbiAgICAgICAgPC9Qcm92aWRlcj5cclxuICAgICAgKTtcclxuICAgICAgY29uc3QgbW9ja0F4aW9zID0gamVzdC5zcHlPbihyZXF1aXJlKFwiYXhpb3NcIiksIFwiZ2V0XCIpO1xyXG4gICAgICBtb2NrQXhpb3MubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcclxuICAgICAgICBkYXRhOiBbXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIG1lYW5pbmdzOiBbXHJcbiAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZGVmaW5pdGlvbnM6IFtcclxuICAgICAgICAgICAgICAgICAgeyBkZWZpbml0aW9uOiBcImEgdGhpbmcgY2hhcmFjdGVyaXN0aWMgb2YgaXRzIGtpbmRcIiB9LFxyXG4gICAgICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICBdLFxyXG4gICAgICB9KTtcclxuICAgICAgYXdhaXQgc2NyZWVuLmZpbmRCeVRleHQoXCJhIHRoaW5nIGNoYXJhY3RlcmlzdGljIG9mIGl0cyBraW5kXCIpO1xyXG4gICAgICBleHBlY3QoXHJcbiAgICAgICAgc2NyZWVuLmdldEJ5VGV4dChcImEgdGhpbmcgY2hhcmFjdGVyaXN0aWMgb2YgaXRzIGtpbmRcIilcclxuICAgICAgKS50b0JlSW5UaGVEb2N1bWVudCgpO1xyXG4gICAgfSk7XHJcbiAgICBhbmQoXHJcbiAgICAgIFwiY2xpY2tpbmcgb24gdGhlIGRlZmluaXRpb24gdGFrZXMgdGhlIHVzZXIgdG8gdGhlIERldGFpbHMgcGFnZSBmb3IgdGhhdCB3b3JkXCIsXHJcbiAgICAgIGFzeW5jICgpID0+IHtcclxuICAgICAgICBjb25zdCBzY3JlZW4gPSByZW5kZXIoXHJcbiAgICAgICAgICA8UHJvdmlkZXIgc3RvcmU9e3N0b3JlfT5cclxuICAgICAgICAgICAgPEJyb3dzZXJSb3V0ZXI+XHJcbiAgICAgICAgICAgICAgPFJvdXRlcz5cclxuICAgICAgICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL3NlYXJjaFwiIGVsZW1lbnQ9ezxIb21lIC8+fSAvPlxyXG4gICAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvZGV0YWlscy86aWRcIiBlbGVtZW50PXs8RGV0YWlscyAvPn0gLz5cclxuICAgICAgICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiKlwiIGVsZW1lbnQ9ezxOYXZpZ2F0ZSB0bz1cIi9zZWFyY2hcIiByZXBsYWNlIC8+fSAvPlxyXG4gICAgICAgICAgICAgIDwvUm91dGVzPlxyXG4gICAgICAgICAgICA8L0Jyb3dzZXJSb3V0ZXI+XHJcbiAgICAgICAgICA8L1Byb3ZpZGVyPlxyXG4gICAgICAgICk7XHJcbiAgICAgICAgY29uc3QgaW5wdXQgPSBzY3JlZW4uZ2V0QWxsQnlQbGFjZWhvbGRlclRleHQoXCJFeGFtcGxlOiBleGFtcGxlXCIpO1xyXG4gICAgICAgIGZpcmVFdmVudC5jaGFuZ2UoaW5wdXRbMF0sIHsgdGFyZ2V0OiB7IHZhbHVlOiBcImV4YW1wbGVcIiB9IH0pO1xyXG4gICAgICAgIGNvbnN0IG1vY2tBeGlvcyA9IGplc3Quc3B5T24ocmVxdWlyZShcImF4aW9zXCIpLCBcImdldFwiKTtcclxuICAgICAgICBtb2NrQXhpb3MubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcclxuICAgICAgICAgIGRhdGE6IFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgIG1lYW5pbmdzOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgIGRlZmluaXRpb25zOiBbXHJcbiAgICAgICAgICAgICAgICAgICAgeyBkZWZpbml0aW9uOiBcImEgdGhpbmcgY2hhcmFjdGVyaXN0aWMgb2YgaXRzIGtpbmRcIiB9LFxyXG4gICAgICAgICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgXSxcclxuICAgICAgICB9KTtcclxuICAgICAgICBjb25zdCBkZWYgPSBzY3JlZW4uZ2V0QWxsQnlUZXN0SWQoXCJkZWZpbml0aW9uQ29udGFpbmVyXCIpO1xyXG4gICAgICAgIGNvbnN0IGRwID0gc2NyZWVuLmdldEJ5VGV4dChcImEgdGhpbmcgY2hhcmFjdGVyaXN0aWMgb2YgaXRzIGtpbmRcIik7XHJcbiAgICAgICAgZmlyZUV2ZW50LmNsaWNrKGRlZlsxXSk7XHJcbiAgICAgICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhcIlBhdGhuYW1lOlwiLCB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICApO1xyXG4gIH0pO1xyXG59KTtcclxuIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLGFBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLFdBQUEsR0FBQUYsT0FBQTtBQUNBLElBQUFHLGVBQUEsR0FBQUgsT0FBQTtBQUNBLElBQUFJLE9BQUEsR0FBQUosT0FBQTtBQUNBQSxPQUFBO0FBQ0EsSUFBQUssTUFBQSxHQUFBTCxPQUFBO0FBRUEsSUFBQU0sS0FBQSxHQUFBUCxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQU8sUUFBQSxHQUFBUixzQkFBQSxDQUFBQyxPQUFBO0FBQStDLFNBQUFELHVCQUFBUyxHQUFBLFdBQUFBLEdBQUEsSUFBQUEsR0FBQSxDQUFBQyxVQUFBLEdBQUFELEdBQUEsS0FBQUUsT0FBQSxFQUFBRixHQUFBO0FBRy9DLE1BQU1HLE9BQU8sR0FBRyxJQUFBQyx5QkFBVyxFQUFDLHNDQUFzQyxDQUFDO0FBRW5FLElBQUFDLDJCQUFhLEVBQUNGLE9BQU8sRUFBR0csSUFBSSxJQUFLO0VBQy9CQSxJQUFJLENBQUMsb0RBQW9ELEVBQUUsQ0FBQztJQUMxREMsS0FBSztJQUNMQyxJQUFJO0lBQ0pDLElBQUk7SUFDSkM7RUFDRixDQUFDLEtBQUs7SUFDSixNQUFNQyxTQUFTLEdBQUdDLElBQUksQ0FBQ0MsS0FBSyxDQUFDQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUNDLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDMUVSLEtBQUssQ0FBQyw4QkFBOEIsRUFBRSxNQUFNO01BQzFDLE1BQU1TLE1BQU0sR0FBRyxJQUFBQyxjQUFNLGdCQUNuQjNCLE1BQUEsQ0FBQVksT0FBQSxDQUFBZ0IsYUFBQSxDQUFDeEIsV0FBQSxDQUFBeUIsUUFBUTtRQUFDQyxLQUFLLEVBQUVBO01BQU0sZ0JBQ3JCOUIsTUFBQSxDQUFBWSxPQUFBLENBQUFnQixhQUFBLENBQUN2QixlQUFBLENBQUEwQixhQUFhLHFCQUNaL0IsTUFBQSxDQUFBWSxPQUFBLENBQUFnQixhQUFBLENBQUN2QixlQUFBLENBQUEyQixNQUFNLHFCQUNMaEMsTUFBQSxDQUFBWSxPQUFBLENBQUFnQixhQUFBLENBQUN2QixlQUFBLENBQUE0QixLQUFLO1FBQUNDLElBQUksRUFBQyxTQUFTO1FBQUNDLE9BQU8sZUFBRW5DLE1BQUEsQ0FBQVksT0FBQSxDQUFBZ0IsYUFBQSxDQUFDcEIsS0FBQSxDQUFBSSxPQUFJO01BQUksRUFBRyxlQUMzQ1osTUFBQSxDQUFBWSxPQUFBLENBQUFnQixhQUFBLENBQUN2QixlQUFBLENBQUE0QixLQUFLO1FBQUNDLElBQUksRUFBQyxjQUFjO1FBQUNDLE9BQU8sZUFBRW5DLE1BQUEsQ0FBQVksT0FBQSxDQUFBZ0IsYUFBQSxDQUFDbkIsUUFBQSxDQUFBRyxPQUFPO01BQUksRUFBRyxlQUNuRFosTUFBQSxDQUFBWSxPQUFBLENBQUFnQixhQUFBLENBQUN2QixlQUFBLENBQUE0QixLQUFLO1FBQUNDLElBQUksRUFBQyxHQUFHO1FBQUNDLE9BQU8sZUFBRW5DLE1BQUEsQ0FBQVksT0FBQSxDQUFBZ0IsYUFBQSxDQUFDdkIsZUFBQSxDQUFBK0IsUUFBUTtVQUFDQyxFQUFFLEVBQUMsU0FBUztVQUFDQyxPQUFPO1FBQUE7TUFBSSxFQUFHLENBQ3ZELENBQ0ssQ0FDUCxDQUNaO01BQ0RDLE1BQU0sQ0FBQ2IsTUFBTSxDQUFDYyxXQUFXLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQ0MsaUJBQWlCLEVBQUU7SUFDakUsQ0FBQyxDQUFDO0lBQ0Z2QixJQUFJLENBQUMsdUNBQXVDLEVBQUUsWUFBWTtNQUN4RCxNQUFNUSxNQUFNLEdBQUcsSUFBQUMsY0FBTSxnQkFDbkIzQixNQUFBLENBQUFZLE9BQUEsQ0FBQWdCLGFBQUEsQ0FBQ3hCLFdBQUEsQ0FBQXlCLFFBQVE7UUFBQ0MsS0FBSyxFQUFFQTtNQUFNLGdCQUNyQjlCLE1BQUEsQ0FBQVksT0FBQSxDQUFBZ0IsYUFBQSxDQUFDdkIsZUFBQSxDQUFBMEIsYUFBYSxxQkFDWi9CLE1BQUEsQ0FBQVksT0FBQSxDQUFBZ0IsYUFBQSxDQUFDdkIsZUFBQSxDQUFBMkIsTUFBTSxxQkFDTGhDLE1BQUEsQ0FBQVksT0FBQSxDQUFBZ0IsYUFBQSxDQUFDdkIsZUFBQSxDQUFBNEIsS0FBSztRQUFDQyxJQUFJLEVBQUMsU0FBUztRQUFDQyxPQUFPLGVBQUVuQyxNQUFBLENBQUFZLE9BQUEsQ0FBQWdCLGFBQUEsQ0FBQ3BCLEtBQUEsQ0FBQUksT0FBSTtNQUFJLEVBQUcsZUFDM0NaLE1BQUEsQ0FBQVksT0FBQSxDQUFBZ0IsYUFBQSxDQUFDdkIsZUFBQSxDQUFBNEIsS0FBSztRQUFDQyxJQUFJLEVBQUMsY0FBYztRQUFDQyxPQUFPLGVBQUVuQyxNQUFBLENBQUFZLE9BQUEsQ0FBQWdCLGFBQUEsQ0FBQ25CLFFBQUEsQ0FBQUcsT0FBTztNQUFJLEVBQUcsZUFDbkRaLE1BQUEsQ0FBQVksT0FBQSxDQUFBZ0IsYUFBQSxDQUFDdkIsZUFBQSxDQUFBNEIsS0FBSztRQUFDQyxJQUFJLEVBQUMsR0FBRztRQUFDQyxPQUFPLGVBQUVuQyxNQUFBLENBQUFZLE9BQUEsQ0FBQWdCLGFBQUEsQ0FBQ3ZCLGVBQUEsQ0FBQStCLFFBQVE7VUFBQ0MsRUFBRSxFQUFDLFNBQVM7VUFBQ0MsT0FBTztRQUFBO01BQUksRUFBRyxDQUN2RCxDQUNLLENBQ1AsQ0FDWjtNQUNELE1BQU1JLEtBQUssR0FBR2hCLE1BQU0sQ0FBQ2lCLHVCQUF1QixDQUFDLGtCQUFrQixDQUFDO01BQ2hFQyxpQkFBUyxDQUFDQyxNQUFNLENBQUNILEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRTtRQUFFSSxNQUFNLEVBQUU7VUFBRUMsS0FBSyxFQUFFO1FBQVU7TUFBRSxDQUFDLENBQUM7SUFDOUQsQ0FBQyxDQUFDO0lBRUY1QixJQUFJLENBQUMscURBQXFELEVBQUUsWUFBWTtNQUN0RSxNQUFNTyxNQUFNLEdBQUcsSUFBQUMsY0FBTSxnQkFDbkIzQixNQUFBLENBQUFZLE9BQUEsQ0FBQWdCLGFBQUEsQ0FBQ3hCLFdBQUEsQ0FBQXlCLFFBQVE7UUFBQ0MsS0FBSyxFQUFFQTtNQUFNLGdCQUNyQjlCLE1BQUEsQ0FBQVksT0FBQSxDQUFBZ0IsYUFBQSxDQUFDdkIsZUFBQSxDQUFBMEIsYUFBYSxxQkFDWi9CLE1BQUEsQ0FBQVksT0FBQSxDQUFBZ0IsYUFBQSxDQUFDdkIsZUFBQSxDQUFBMkIsTUFBTSxxQkFDTGhDLE1BQUEsQ0FBQVksT0FBQSxDQUFBZ0IsYUFBQSxDQUFDdkIsZUFBQSxDQUFBNEIsS0FBSztRQUFDQyxJQUFJLEVBQUMsU0FBUztRQUFDQyxPQUFPLGVBQUVuQyxNQUFBLENBQUFZLE9BQUEsQ0FBQWdCLGFBQUEsQ0FBQ3BCLEtBQUEsQ0FBQUksT0FBSTtNQUFJLEVBQUcsZUFDM0NaLE1BQUEsQ0FBQVksT0FBQSxDQUFBZ0IsYUFBQSxDQUFDdkIsZUFBQSxDQUFBNEIsS0FBSztRQUFDQyxJQUFJLEVBQUMsY0FBYztRQUFDQyxPQUFPLGVBQUVuQyxNQUFBLENBQUFZLE9BQUEsQ0FBQWdCLGFBQUEsQ0FBQ25CLFFBQUEsQ0FBQUcsT0FBTztNQUFJLEVBQUcsZUFDbkRaLE1BQUEsQ0FBQVksT0FBQSxDQUFBZ0IsYUFBQSxDQUFDdkIsZUFBQSxDQUFBNEIsS0FBSztRQUFDQyxJQUFJLEVBQUMsR0FBRztRQUFDQyxPQUFPLGVBQUVuQyxNQUFBLENBQUFZLE9BQUEsQ0FBQWdCLGFBQUEsQ0FBQ3ZCLGVBQUEsQ0FBQStCLFFBQVE7VUFBQ0MsRUFBRSxFQUFDLFNBQVM7VUFBQ0MsT0FBTztRQUFBO01BQUksRUFBRyxDQUN2RCxDQUNLLENBQ1AsQ0FDWjtNQUNELE1BQU1VLFNBQVMsR0FBRzFCLElBQUksQ0FBQ0MsS0FBSyxDQUFDckIsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLEtBQUssQ0FBQztNQUNyRDhDLFNBQVMsQ0FBQ0MscUJBQXFCLENBQUM7UUFDOUJDLElBQUksRUFBRSxDQUNKO1VBQ0VDLFFBQVEsRUFBRSxDQUNSO1lBQ0VDLFdBQVcsRUFBRSxDQUNYO2NBQUVDLFVBQVUsRUFBRTtZQUFxQyxDQUFDO1VBRXhELENBQUM7UUFFTCxDQUFDO01BRUwsQ0FBQyxDQUFDO01BQ0YsTUFBTTNCLE1BQU0sQ0FBQzRCLFVBQVUsQ0FBQyxvQ0FBb0MsQ0FBQztNQUM3RGYsTUFBTSxDQUNKYixNQUFNLENBQUM2QixTQUFTLENBQUMsb0NBQW9DLENBQUMsQ0FDdkQsQ0FBQ2QsaUJBQWlCLEVBQUU7SUFDdkIsQ0FBQyxDQUFDO0lBQ0ZyQixHQUFHLENBQ0QsNkVBQTZFLEVBQzdFLFlBQVk7TUFDVixNQUFNTSxNQUFNLEdBQUcsSUFBQUMsY0FBTSxnQkFDbkIzQixNQUFBLENBQUFZLE9BQUEsQ0FBQWdCLGFBQUEsQ0FBQ3hCLFdBQUEsQ0FBQXlCLFFBQVE7UUFBQ0MsS0FBSyxFQUFFQTtNQUFNLGdCQUNyQjlCLE1BQUEsQ0FBQVksT0FBQSxDQUFBZ0IsYUFBQSxDQUFDdkIsZUFBQSxDQUFBMEIsYUFBYSxxQkFDWi9CLE1BQUEsQ0FBQVksT0FBQSxDQUFBZ0IsYUFBQSxDQUFDdkIsZUFBQSxDQUFBMkIsTUFBTSxxQkFDTGhDLE1BQUEsQ0FBQVksT0FBQSxDQUFBZ0IsYUFBQSxDQUFDdkIsZUFBQSxDQUFBNEIsS0FBSztRQUFDQyxJQUFJLEVBQUMsU0FBUztRQUFDQyxPQUFPLGVBQUVuQyxNQUFBLENBQUFZLE9BQUEsQ0FBQWdCLGFBQUEsQ0FBQ3BCLEtBQUEsQ0FBQUksT0FBSTtNQUFJLEVBQUcsZUFDM0NaLE1BQUEsQ0FBQVksT0FBQSxDQUFBZ0IsYUFBQSxDQUFDdkIsZUFBQSxDQUFBNEIsS0FBSztRQUFDQyxJQUFJLEVBQUMsY0FBYztRQUFDQyxPQUFPLGVBQUVuQyxNQUFBLENBQUFZLE9BQUEsQ0FBQWdCLGFBQUEsQ0FBQ25CLFFBQUEsQ0FBQUcsT0FBTztNQUFJLEVBQUcsZUFDbkRaLE1BQUEsQ0FBQVksT0FBQSxDQUFBZ0IsYUFBQSxDQUFDdkIsZUFBQSxDQUFBNEIsS0FBSztRQUFDQyxJQUFJLEVBQUMsR0FBRztRQUFDQyxPQUFPLGVBQUVuQyxNQUFBLENBQUFZLE9BQUEsQ0FBQWdCLGFBQUEsQ0FBQ3ZCLGVBQUEsQ0FBQStCLFFBQVE7VUFBQ0MsRUFBRSxFQUFDLFNBQVM7VUFBQ0MsT0FBTztRQUFBO01BQUksRUFBRyxDQUN2RCxDQUNLLENBQ1AsQ0FDWjtNQUNELE1BQU1JLEtBQUssR0FBR2hCLE1BQU0sQ0FBQ2lCLHVCQUF1QixDQUFDLGtCQUFrQixDQUFDO01BQ2hFQyxpQkFBUyxDQUFDQyxNQUFNLENBQUNILEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRTtRQUFFSSxNQUFNLEVBQUU7VUFBRUMsS0FBSyxFQUFFO1FBQVU7TUFBRSxDQUFDLENBQUM7TUFDNUQsTUFBTUMsU0FBUyxHQUFHMUIsSUFBSSxDQUFDQyxLQUFLLENBQUNyQixPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsS0FBSyxDQUFDO01BQ3JEOEMsU0FBUyxDQUFDQyxxQkFBcUIsQ0FBQztRQUM5QkMsSUFBSSxFQUFFLENBQ0o7VUFDRUMsUUFBUSxFQUFFLENBQ1I7WUFDRUMsV0FBVyxFQUFFLENBQ1g7Y0FBRUMsVUFBVSxFQUFFO1lBQXFDLENBQUM7VUFFeEQsQ0FBQztRQUVMLENBQUM7TUFFTCxDQUFDLENBQUM7TUFDRixNQUFNRyxHQUFHLEdBQUc5QixNQUFNLENBQUMrQixjQUFjLENBQUMscUJBQXFCLENBQUM7TUFDeEQsTUFBTUMsRUFBRSxHQUFHaEMsTUFBTSxDQUFDNkIsU0FBUyxDQUFDLG9DQUFvQyxDQUFDO01BQ2pFWCxpQkFBUyxDQUFDZSxLQUFLLENBQUNILEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztNQUN2QixNQUFNLElBQUFJLGVBQU8sRUFBQyxNQUFNO1FBQ2xCQyxPQUFPLENBQUNDLEdBQUcsQ0FBQyxXQUFXLEVBQUV0QyxNQUFNLENBQUN1QyxRQUFRLENBQUNDLFFBQVEsQ0FBQztNQUNwRCxDQUFDLENBQUM7SUFDSixDQUFDLENBQ0Y7RUFDSCxDQUFDLENBQUM7QUFDSixDQUFDLENBQUMifQ==