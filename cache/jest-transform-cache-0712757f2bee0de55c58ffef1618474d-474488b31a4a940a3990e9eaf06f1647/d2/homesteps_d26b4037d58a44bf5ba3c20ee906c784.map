{"version":3,"names":["_react","_interopRequireDefault","require","_jestCucumber","_reactRedux","_reactRouterDom","_react2","_store","_Home","_Details","_axios","obj","__esModule","default","feature","loadFeature","defineFeature","test","given","when","then","and","alertMock","jest","spyOn","window","mockImplementation","screen","render","createElement","Provider","store","BrowserRouter","Routes","Route","path","element","Navigate","to","replace","expect","getByTestId","toBeInTheDocument","input","getAllByPlaceholderText","fireEvent","change","target","value","mockAxios","mockResolvedValueOnce","data","meanings","definitions","definition","findByText","getByText","axios","console","log"],"sources":["home.steps.tsx"],"sourcesContent":["import React from \"react\";\r\nimport { defineFeature, loadFeature } from \"jest-cucumber\";\r\nimport { Provider } from \"react-redux\";\r\nimport { BrowserRouter, Route, Routes, Navigate } from \"react-router-dom\";\r\nimport { act, fireEvent, render, waitFor } from \"@testing-library/react\";\r\nimport \"@testing-library/jest-dom/extend-expect\";\r\nimport { store } from \"../../Redux/store\";\r\nimport routes from \"./../../utils/Routes\";\r\nimport Home from \"../../Dictionary/Home\";\r\nimport Details from \"../../Dictionary/Details\";\r\nimport axios from \"axios\";\r\n\r\nconst feature = loadFeature(\"src/Components/Features/home.feature\");\r\n\r\ndefineFeature(feature, (test) => {\r\n  test(\"The component renders and a random word is fetched\", ({\r\n    given,\r\n    when,\r\n    then,\r\n    and,\r\n  }) => {\r\n    const alertMock = jest.spyOn(window, \"alert\").mockImplementation(() => {});\r\n    given(\"The user is on the Home page\", () => {\r\n      const screen = render(\r\n        <Provider store={store}>\r\n          <BrowserRouter>\r\n            <Routes>\r\n              <Route path=\"/search\" element={<Home />} />\r\n              <Route path=\"/details/:id\" element={<Details />} />\r\n              <Route path=\"*\" element={<Navigate to=\"/search\" replace />} />\r\n            </Routes>\r\n          </BrowserRouter>\r\n        </Provider>\r\n      );\r\n      expect(screen.getByTestId(\"homeContainer\")).toBeInTheDocument();\r\n    });\r\n    when(\"The user inputs a word and submits it\", async () => {\r\n      const screen = render(\r\n        <Provider store={store}>\r\n          <BrowserRouter>\r\n            <Routes>\r\n              <Route path=\"/search\" element={<Home />} />\r\n              <Route path=\"/details/:id\" element={<Details />} />\r\n              <Route path=\"*\" element={<Navigate to=\"/search\" replace />} />\r\n            </Routes>\r\n          </BrowserRouter>\r\n        </Provider>\r\n      );\r\n      const input = screen.getAllByPlaceholderText(\"Example: example\");\r\n      fireEvent.change(input[0], { target: { value: \"example\" } });\r\n    });\r\n\r\n    then(\"the definition of the word is fetched and displayed\", async () => {\r\n      const screen = render(\r\n        <Provider store={store}>\r\n          <BrowserRouter>\r\n            <Routes>\r\n              <Route path=\"/search\" element={<Home />} />\r\n              <Route path=\"/details/:id\" element={<Details />} />\r\n              <Route path=\"*\" element={<Navigate to=\"/search\" replace />} />\r\n            </Routes>\r\n          </BrowserRouter>\r\n        </Provider>\r\n      );\r\n      const mockAxios = jest.spyOn(require(\"axios\"), \"get\");\r\n      mockAxios.mockResolvedValueOnce({\r\n        data: [\r\n          {\r\n            meanings: [\r\n              {\r\n                definitions: [\r\n                  { definition: \"a thing characteristic of its kind\" },\r\n                ],\r\n              },\r\n            ],\r\n          },\r\n        ],\r\n      });\r\n      await screen.findByText(\"a thing characteristic of its kind\");\r\n      expect(\r\n        screen.getByText(\"a thing characteristic of its kind\")\r\n      ).toBeInTheDocument();\r\n    });\r\n    and(\r\n      \"clicking on the definition takes the user to the Details page for that word\",\r\n      async () => {\r\n        const mockAxios = jest.spyOn(axios, \"get\");\r\n        mockAxios\r\n          .mockResolvedValueOnce({ data: [\"example\"] })\r\n          .mockResolvedValueOnce({\r\n            data: [\r\n              {\r\n                meanings: [\r\n                  {\r\n                    definitions: [\r\n                      { definition: \"a thing characteristic of its kind\" },\r\n                    ],\r\n                  },\r\n                ],\r\n              },\r\n            ],\r\n          });\r\n\r\n        const screen = render(\r\n          <Provider store={store}>\r\n            <BrowserRouter>\r\n              <Routes>\r\n                <Route path=\"/search\" element={<Home />} />\r\n                <Route path=\"/details/:id\" element={<Details />} />\r\n                <Route path=\"*\" element={<Navigate to=\"/search\" replace />} />\r\n              </Routes>\r\n            </BrowserRouter>\r\n          </Provider>\r\n        );\r\n        console.log(screen);\r\n      }\r\n    );\r\n  });\r\n});\r\n"],"mappings":"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"}