38929d05184ba1bf631ac47ee62a953a
"use strict";

var _react = _interopRequireDefault(require("react"));
var _jestCucumber = require("jest-cucumber");
var _react2 = require("@testing-library/react");
require("@testing-library/jest-dom/extend-expect");
var _axios = _interopRequireDefault(require("axios"));
var _Details = _interopRequireDefault(require("../../Dictionary/Details"));
var _reactRedux = require("react-redux");
var _store = require("../../Redux/store");
var _reactRouterDom = require("react-router-dom");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const feature = (0, _jestCucumber.loadFeature)("src/Components/Features/details.feature");
(0, _jestCucumber.defineFeature)(feature, test => {
  test("User views word details with phonetics and meanings", ({
    given,
    when,
    then
  }) => {
    let screen;
    given("The user is on the Details page", () => {
      screen = (0, _react2.render)( /*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {
        store: _store.store
      }, /*#__PURE__*/_react.default.createElement(_reactRouterDom.BrowserRouter, null, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Routes, null, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
        element: /*#__PURE__*/_react.default.createElement(_Details.default, null)
      })))));
    });
    when("The user views the details for a word", async () => {
      jest.spyOn(_axios.default, "get").mockResolvedValueOnce({
        data: [{
          word: "example",
          phonetics: [{
            text: "/ɪɡˈzæmpəl/",
            audio: "example-audio.mp3"
          }],
          meanings: [{
            partOfSpeech: "noun",
            definitions: [{
              definition: "a representative form or pattern",
              example: "I followed your example",
              synonyms: ["model", "pattern", "prototype"]
            }]
          }]
        }]
      });
    });
    then("The word details should be displayed", async () => {
      await (0, _react2.waitFor)(() => {
        expect(screen.getByText("example")).toBeInTheDocument();
        expect(screen.getByText("/ɪɡˈzæmpəl/")).toBeInTheDocument();
        expect(screen.getByText("a representative form or pattern")).toBeInTheDocument();
        expect(screen.getByText("Example: I followed your example")).toBeInTheDocument();
        expect(screen.getByText("Synonyms: model, pattern, prototype")).toBeInTheDocument();
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9qZXN0Q3VjdW1iZXIiLCJfcmVhY3QyIiwiX2F4aW9zIiwiX0RldGFpbHMiLCJfcmVhY3RSZWR1eCIsIl9zdG9yZSIsIl9yZWFjdFJvdXRlckRvbSIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiZmVhdHVyZSIsImxvYWRGZWF0dXJlIiwiZGVmaW5lRmVhdHVyZSIsInRlc3QiLCJnaXZlbiIsIndoZW4iLCJ0aGVuIiwic2NyZWVuIiwicmVuZGVyIiwiY3JlYXRlRWxlbWVudCIsIlByb3ZpZGVyIiwic3RvcmUiLCJCcm93c2VyUm91dGVyIiwiUm91dGVzIiwiUm91dGUiLCJlbGVtZW50IiwiamVzdCIsInNweU9uIiwiYXhpb3MiLCJtb2NrUmVzb2x2ZWRWYWx1ZU9uY2UiLCJkYXRhIiwid29yZCIsInBob25ldGljcyIsInRleHQiLCJhdWRpbyIsIm1lYW5pbmdzIiwicGFydE9mU3BlZWNoIiwiZGVmaW5pdGlvbnMiLCJkZWZpbml0aW9uIiwiZXhhbXBsZSIsInN5bm9ueW1zIiwid2FpdEZvciIsImV4cGVjdCIsImdldEJ5VGV4dCIsInRvQmVJblRoZURvY3VtZW50Il0sInNvdXJjZXMiOlsiZGV0YWlscy5zdGVwcy50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBkZWZpbmVGZWF0dXJlLCBsb2FkRmVhdHVyZSB9IGZyb20gXCJqZXN0LWN1Y3VtYmVyXCI7XHJcbmltcG9ydCB7IHJlbmRlciwgd2FpdEZvciB9IGZyb20gXCJAdGVzdGluZy1saWJyYXJ5L3JlYWN0XCI7XHJcbmltcG9ydCBcIkB0ZXN0aW5nLWxpYnJhcnkvamVzdC1kb20vZXh0ZW5kLWV4cGVjdFwiO1xyXG5pbXBvcnQgYXhpb3MgZnJvbSBcImF4aW9zXCI7XHJcbmltcG9ydCBEZXRhaWxzIGZyb20gXCIuLi8uLi9EaWN0aW9uYXJ5L0RldGFpbHNcIjtcclxuaW1wb3J0IHsgUHJvdmlkZXIgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcclxuaW1wb3J0IHsgc3RvcmUgfSBmcm9tIFwiLi4vLi4vUmVkdXgvc3RvcmVcIjtcclxuaW1wb3J0IHsgQnJvd3NlclJvdXRlciwgTmF2aWdhdGUsIFJvdXRlLCBSb3V0ZXMgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xyXG5pbXBvcnQgeyBIb21lIH0gZnJvbSBcIkBtdWkvaWNvbnMtbWF0ZXJpYWxcIjtcclxuXHJcbmNvbnN0IGZlYXR1cmUgPSBsb2FkRmVhdHVyZShcInNyYy9Db21wb25lbnRzL0ZlYXR1cmVzL2RldGFpbHMuZmVhdHVyZVwiKTtcclxuXHJcbmRlZmluZUZlYXR1cmUoZmVhdHVyZSwgKHRlc3QpID0+IHtcclxuICB0ZXN0KFwiVXNlciB2aWV3cyB3b3JkIGRldGFpbHMgd2l0aCBwaG9uZXRpY3MgYW5kIG1lYW5pbmdzXCIsICh7XHJcbiAgICBnaXZlbixcclxuICAgIHdoZW4sXHJcbiAgICB0aGVuLFxyXG4gIH0pID0+IHtcclxuICAgIGxldCBzY3JlZW46IGFueTtcclxuXHJcbiAgICBnaXZlbihcIlRoZSB1c2VyIGlzIG9uIHRoZSBEZXRhaWxzIHBhZ2VcIiwgKCkgPT4ge1xyXG4gICAgICBzY3JlZW4gPSByZW5kZXIoXHJcbiAgICAgICAgPFByb3ZpZGVyIHN0b3JlPXtzdG9yZX0+XHJcbiAgICAgICAgICA8QnJvd3NlclJvdXRlcj5cclxuICAgICAgICAgICAgPFJvdXRlcz5cclxuICAgICAgICAgICAgICA8Um91dGUgZWxlbWVudD17PERldGFpbHMgLz59IC8+XHJcbiAgICAgICAgICAgIDwvUm91dGVzPlxyXG4gICAgICAgICAgPC9Ccm93c2VyUm91dGVyPlxyXG4gICAgICAgIDwvUHJvdmlkZXI+XHJcbiAgICAgICk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB3aGVuKFwiVGhlIHVzZXIgdmlld3MgdGhlIGRldGFpbHMgZm9yIGEgd29yZFwiLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGplc3Quc3B5T24oYXhpb3MsIFwiZ2V0XCIpLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7XHJcbiAgICAgICAgZGF0YTogW1xyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICB3b3JkOiBcImV4YW1wbGVcIixcclxuICAgICAgICAgICAgcGhvbmV0aWNzOiBbXHJcbiAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGV4dDogXCIvyarJocuIesOmbXDJmWwvXCIsXHJcbiAgICAgICAgICAgICAgICBhdWRpbzogXCJleGFtcGxlLWF1ZGlvLm1wM1wiLFxyXG4gICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIG1lYW5pbmdzOiBbXHJcbiAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcGFydE9mU3BlZWNoOiBcIm5vdW5cIixcclxuICAgICAgICAgICAgICAgIGRlZmluaXRpb25zOiBbXHJcbiAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBkZWZpbml0aW9uOiBcImEgcmVwcmVzZW50YXRpdmUgZm9ybSBvciBwYXR0ZXJuXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgZXhhbXBsZTogXCJJIGZvbGxvd2VkIHlvdXIgZXhhbXBsZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHN5bm9ueW1zOiBbXCJtb2RlbFwiLCBcInBhdHRlcm5cIiwgXCJwcm90b3R5cGVcIl0sXHJcbiAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgIF0sXHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdGhlbihcIlRoZSB3b3JkIGRldGFpbHMgc2hvdWxkIGJlIGRpc3BsYXllZFwiLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xyXG4gICAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KFwiZXhhbXBsZVwiKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcclxuICAgICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dChcIi/Jqsmhy4h6w6ZtcMmZbC9cIikpLnRvQmVJblRoZURvY3VtZW50KCk7XHJcbiAgICAgICAgZXhwZWN0KFxyXG4gICAgICAgICAgc2NyZWVuLmdldEJ5VGV4dChcImEgcmVwcmVzZW50YXRpdmUgZm9ybSBvciBwYXR0ZXJuXCIpXHJcbiAgICAgICAgKS50b0JlSW5UaGVEb2N1bWVudCgpO1xyXG4gICAgICAgIGV4cGVjdChcclxuICAgICAgICAgIHNjcmVlbi5nZXRCeVRleHQoXCJFeGFtcGxlOiBJIGZvbGxvd2VkIHlvdXIgZXhhbXBsZVwiKVxyXG4gICAgICAgICkudG9CZUluVGhlRG9jdW1lbnQoKTtcclxuICAgICAgICBleHBlY3QoXHJcbiAgICAgICAgICBzY3JlZW4uZ2V0QnlUZXh0KFwiU3lub255bXM6IG1vZGVsLCBwYXR0ZXJuLCBwcm90b3R5cGVcIilcclxuICAgICAgICApLnRvQmVJblRoZURvY3VtZW50KCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcbn0pO1xyXG4iXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsYUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsT0FBQSxHQUFBRixPQUFBO0FBQ0FBLE9BQUE7QUFDQSxJQUFBRyxNQUFBLEdBQUFKLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBSSxRQUFBLEdBQUFMLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBSyxXQUFBLEdBQUFMLE9BQUE7QUFDQSxJQUFBTSxNQUFBLEdBQUFOLE9BQUE7QUFDQSxJQUFBTyxlQUFBLEdBQUFQLE9BQUE7QUFBMEUsU0FBQUQsdUJBQUFTLEdBQUEsV0FBQUEsR0FBQSxJQUFBQSxHQUFBLENBQUFDLFVBQUEs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