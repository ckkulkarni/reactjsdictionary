48d73a0e15678519eacfb0005c190e95
"use strict";

var _react = _interopRequireDefault(require("react"));
var _jestCucumber = require("jest-cucumber");
var _reactRouterDom = require("react-router-dom");
require("@testing-library/jest-dom/extend-expect");
var _Details = _interopRequireDefault(require("../../Dictionary/Details"));
var _axios = _interopRequireDefault(require("axios"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const feature = (0, _jestCucumber.loadFeature)("src/Components/Features/details.feature");
(0, _jestCucumber.defineFeature)(feature, test => {
  test("User views word details with phonetics and meanings", ({
    given,
    when,
    then
  }) => {
    given("The user is on the Details page", () => {
      /*#__PURE__*/_react.default.createElement(_reactRouterDom.MemoryRouter, {
        initialEntries: ["/details/example"]
      }, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
        path: "/details/:id",
        element: /*#__PURE__*/_react.default.createElement(_Details.default, null)
      }));
    }), when("The user views the details for a word", async () => {
      jest.spyOn(_axios.default, "get").mockResolvedValueOnce({
        data: [{
          word: "example",
          phonetics: [{
            text: "/ɪɡˈzæmpəl/",
            audio: "example-audio.mp3"
          }],
          meanings: [{
            partOfSpeech: "noun",
            definitions: [{
              definition: "a representative form or pattern",
              example: "I followed your example",
              synonyms: ["model", "pattern", "prototype"]
            }]
          }]
        }]
      });
    });
    then("The word details should be displayed", () => {});
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9qZXN0Q3VjdW1iZXIiLCJfcmVhY3RSb3V0ZXJEb20iLCJfRGV0YWlscyIsIl9heGlvcyIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiZmVhdHVyZSIsImxvYWRGZWF0dXJlIiwiZGVmaW5lRmVhdHVyZSIsInRlc3QiLCJnaXZlbiIsIndoZW4iLCJ0aGVuIiwiY3JlYXRlRWxlbWVudCIsIk1lbW9yeVJvdXRlciIsImluaXRpYWxFbnRyaWVzIiwiUm91dGUiLCJwYXRoIiwiZWxlbWVudCIsImplc3QiLCJzcHlPbiIsImF4aW9zIiwibW9ja1Jlc29sdmVkVmFsdWVPbmNlIiwiZGF0YSIsIndvcmQiLCJwaG9uZXRpY3MiLCJ0ZXh0IiwiYXVkaW8iLCJtZWFuaW5ncyIsInBhcnRPZlNwZWVjaCIsImRlZmluaXRpb25zIiwiZGVmaW5pdGlvbiIsImV4YW1wbGUiLCJzeW5vbnltcyJdLCJzb3VyY2VzIjpbImRldGFpbHMuc3RlcHMudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgZGVmaW5lRmVhdHVyZSwgbG9hZEZlYXR1cmUgfSBmcm9tIFwiamVzdC1jdWN1bWJlclwiO1xyXG5pbXBvcnQgeyBQcm92aWRlciB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xyXG5pbXBvcnQge1xyXG4gIEJyb3dzZXJSb3V0ZXIsXHJcbiAgUm91dGUsXHJcbiAgUm91dGVzLFxyXG4gIE5hdmlnYXRlLFxyXG4gIE1lbW9yeVJvdXRlcixcclxufSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xyXG5pbXBvcnQge1xyXG4gIGFjdCxcclxuICBjbGVhbnVwLFxyXG4gIGZpcmVFdmVudCxcclxuICByZW5kZXIsXHJcbiAgd2FpdEZvcixcclxufSBmcm9tIFwiQHRlc3RpbmctbGlicmFyeS9yZWFjdFwiO1xyXG5pbXBvcnQgXCJAdGVzdGluZy1saWJyYXJ5L2plc3QtZG9tL2V4dGVuZC1leHBlY3RcIjtcclxuaW1wb3J0IHsgc3RvcmUgfSBmcm9tIFwiLi4vLi4vUmVkdXgvc3RvcmVcIjtcclxuaW1wb3J0IHJvdXRlcyBmcm9tIFwiLi4vLi4vdXRpbHMvUm91dGVzXCI7XHJcbmltcG9ydCBIb21lIGZyb20gXCIuLi8uLi9EaWN0aW9uYXJ5L0hvbWVcIjtcclxuaW1wb3J0IERldGFpbHMgZnJvbSBcIi4uLy4uL0RpY3Rpb25hcnkvRGV0YWlsc1wiO1xyXG5pbXBvcnQgYXhpb3MgZnJvbSBcImF4aW9zXCI7XHJcbmNvbnN0IGZlYXR1cmUgPSBsb2FkRmVhdHVyZShcInNyYy9Db21wb25lbnRzL0ZlYXR1cmVzL2RldGFpbHMuZmVhdHVyZVwiKTtcclxuXHJcbmRlZmluZUZlYXR1cmUoZmVhdHVyZSwgKHRlc3QpID0+IHtcclxuICB0ZXN0KFwiVXNlciB2aWV3cyB3b3JkIGRldGFpbHMgd2l0aCBwaG9uZXRpY3MgYW5kIG1lYW5pbmdzXCIsICh7XHJcbiAgICBnaXZlbixcclxuICAgIHdoZW4sXHJcbiAgICB0aGVuLFxyXG4gIH0pID0+IHtcclxuICAgIGdpdmVuKFwiVGhlIHVzZXIgaXMgb24gdGhlIERldGFpbHMgcGFnZVwiLCAoKSA9PiB7XHJcbiAgICAgIDxNZW1vcnlSb3V0ZXIgaW5pdGlhbEVudHJpZXM9e1tcIi9kZXRhaWxzL2V4YW1wbGVcIl19PlxyXG4gICAgICAgIDxSb3V0ZSBwYXRoPVwiL2RldGFpbHMvOmlkXCIgZWxlbWVudD17PERldGFpbHMgLz59IC8+XHJcbiAgICAgIDwvTWVtb3J5Um91dGVyPjtcclxuICAgIH0pLFxyXG4gICAgICB3aGVuKFwiVGhlIHVzZXIgdmlld3MgdGhlIGRldGFpbHMgZm9yIGEgd29yZFwiLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgamVzdC5zcHlPbihheGlvcywgXCJnZXRcIikubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcclxuICAgICAgICAgIGRhdGE6IFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgIHdvcmQ6IFwiZXhhbXBsZVwiLFxyXG4gICAgICAgICAgICAgIHBob25ldGljczogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICB0ZXh0OiBcIi/Jqsmhy4h6w6ZtcMmZbC9cIixcclxuICAgICAgICAgICAgICAgICAgYXVkaW86IFwiZXhhbXBsZS1hdWRpby5tcDNcIixcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgICBtZWFuaW5nczogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICBwYXJ0T2ZTcGVlY2g6IFwibm91blwiLFxyXG4gICAgICAgICAgICAgICAgICBkZWZpbml0aW9uczogW1xyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgIGRlZmluaXRpb246IFwiYSByZXByZXNlbnRhdGl2ZSBmb3JtIG9yIHBhdHRlcm5cIixcclxuICAgICAgICAgICAgICAgICAgICAgIGV4YW1wbGU6IFwiSSBmb2xsb3dlZCB5b3VyIGV4YW1wbGVcIixcclxuICAgICAgICAgICAgICAgICAgICAgIHN5bm9ueW1zOiBbXCJtb2RlbFwiLCBcInBhdHRlcm5cIiwgXCJwcm90b3R5cGVcIl0sXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgIF0sXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG4gICAgdGhlbihcIlRoZSB3b3JkIGRldGFpbHMgc2hvdWxkIGJlIGRpc3BsYXllZFwiLCAoKSA9PiB7fSk7XHJcbiAgfSk7XHJcbn0pO1xyXG4iXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsYUFBQSxHQUFBRCxPQUFBO0FBRUEsSUFBQUUsZUFBQSxHQUFBRixPQUFBO0FBY0FBLE9BQUE7QUFJQSxJQUFBRyxRQUFBLEdBQUFKLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBSSxNQUFBLEdBQUFMLHNCQUFBLENBQUFDLE9BQUE7QUFBMEIsU0FBQUQsdUJBQUFNLEdBQUEsV0FBQUEsR0FBQSxJQUFBQSxHQUFBLENBQUFDLFVBQUEsR0FBQUQsR0FBQSxLQUFBRSxPQUFBLEVBQUFGLEdBQUE7QUFDMUIsTUFBTUcsT0FBTyxHQUFHLElBQUFDLHlCQUFXLEVBQUMseUNBQXlDLENBQUM7QUFFdEUsSUFBQUMsMkJBQWEsRUFBQ0YsT0FBTyxFQUFHRyxJQUFJLElBQUs7RUFDL0JBLElBQUksQ0FBQyxxREFBcUQsRUFBRSxDQUFDO0lBQzNEQyxLQUFLO0lBQ0xDLElBQUk7SUFDSkM7RUFDRixDQUFDLEtBQUs7SUFDSkYsS0FBSyxDQUFDLGlDQUFpQyxFQUFFLE1BQU07TUFDN0MsYUFBQWQsTUFBQSxDQUFBUyxPQUFBLENBQUFRLGFBQUEsQ0FBQ2IsZUFBQSxDQUFBYyxZQUFZO1FBQUNDLGNBQWMsRUFBRSxDQUFDLGtCQUFrQjtNQUFFLGdCQUNqRG5CLE1BQUEsQ0FBQVMsT0FBQSxDQUFBUSxhQUFBLENBQUNiLGVBQUEsQ0FBQWdCLEtBQUs7UUFBQ0MsSUFBSSxFQUFDLGNBQWM7UUFBQ0MsT0FBTyxlQUFFdEIsTUFBQSxDQUFBUyxPQUFBLENBQUFRLGFBQUEsQ0FBQ1osUUFBQSxDQUFBSSxPQUFPO01BQUksRUFBRyxDQUN0QztJQUNqQixDQUFDLENBQUMsRUFDQU0sSUFBSSxDQUFDLHVDQUF1QyxFQUFFLFlBQVk7TUFDeERRLElBQUksQ0FBQ0MsS0FBSyxDQUFDQyxjQUFLLEVBQUUsS0FBSyxDQUFDLENBQUNDLHFCQUFxQixDQUFDO1FBQzdDQyxJQUFJLEVBQUUsQ0FDSjtVQUNFQyxJQUFJLEVBQUUsU0FBUztVQUNmQyxTQUFTLEVBQUUsQ0FDVDtZQUNFQyxJQUFJLEVBQUUsYUFBYTtZQUNuQkMsS0FBSyxFQUFFO1VBQ1QsQ0FBQyxDQUNGO1VBQ0RDLFFBQVEsRUFBRSxDQUNSO1lBQ0VDLFlBQVksRUFBRSxNQUFNO1lBQ3BCQyxXQUFXLEVBQUUsQ0FDWDtjQUNFQyxVQUFVLEVBQUUsa0NBQWtDO2NBQzlDQyxPQUFPLEVBQUUseUJBQXlCO2NBQ2xDQyxRQUFRLEVBQUUsQ0FBQyxPQUFPLEVBQUUsU0FBUyxFQUFFLFdBQVc7WUFDNUMsQ0FBQztVQUVMLENBQUM7UUFFTCxDQUFDO01BRUwsQ0FBQyxDQUFDO0lBQ0osQ0FBQyxDQUFDO0lBQ0pyQixJQUFJLENBQUMsc0NBQXNDLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztFQUN4RCxDQUFDLENBQUM7QUFDSixDQUFDLENBQUMifQ==