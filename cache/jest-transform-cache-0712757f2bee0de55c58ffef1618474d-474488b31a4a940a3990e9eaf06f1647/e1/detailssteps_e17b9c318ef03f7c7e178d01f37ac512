c7d0811a3af449c918a076fe8a657c3c
"use strict";

var _react = _interopRequireDefault(require("react"));
var _jestCucumber = require("jest-cucumber");
var _react2 = require("@testing-library/react");
require("@testing-library/jest-dom/extend-expect");
var _Details = _interopRequireDefault(require("../../Dictionary/Details"));
var _axios = _interopRequireDefault(require("axios"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const feature = (0, _jestCucumber.loadFeature)("src/Components/Features/details.feature");
(0, _jestCucumber.defineFeature)(feature, test => {
  test("User views word details with phonetics and meanings", ({
    given,
    when,
    then
  }) => {
    given("The user is on the Details page", () => {
      const screen = (0, _react2.render)( /*#__PURE__*/_react.default.createElement(_Details.default, null));
    }), when("The user views the details for a word", async () => {
      const screen = (0, _react2.render)( /*#__PURE__*/_react.default.createElement(_Details.default, null));
      jest.spyOn(_axios.default, "get").mockResolvedValueOnce({
        data: [{
          word: "example",
          phonetics: [{
            text: "/ɪɡˈzæmpəl/",
            audio: "example-audio.mp3"
          }],
          meanings: [{
            partOfSpeech: "noun",
            definitions: [{
              definition: "a representative form or pattern",
              example: "I followed your example",
              synonyms: ["model", "pattern", "prototype"]
            }]
          }]
        }]
      });
    });
    then("The word details should be displayed", () => {
      const screen = (0, _react2.render)( /*#__PURE__*/_react.default.createElement(_Details.default, null));
      jest.spyOn(_axios.default, "get").mockResolvedValueOnce({
        data: [{
          word: "example",
          phonetics: [{
            text: "/ɪɡˈzæmpəl/",
            audio: "example-audio.mp3"
          }],
          meanings: [{
            partOfSpeech: "noun",
            definitions: [{
              definition: "a representative form or pattern",
              example: "I followed your example",
              synonyms: ["model", "pattern", "prototype"]
            }]
          }]
        }]
      });
      expect(screen.getByText("example")).toBeInTheDocument();
      expect(screen.getByText("/ɪɡˈzæmpəl/")).toBeInTheDocument();
      expect(screen.getByText("a representative form or pattern")).toBeInTheDocument();
      expect(screen.getByText("Example: I followed your example")).toBeInTheDocument();
      expect(screen.getByText("Synonyms: model, pattern, prototype")).toBeInTheDocument();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,