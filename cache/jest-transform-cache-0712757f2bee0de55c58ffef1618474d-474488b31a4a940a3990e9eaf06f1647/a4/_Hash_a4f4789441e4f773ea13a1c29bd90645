83a4fe60d15be6b394ecc4e1fafd0806
/* istanbul ignore next */
"use strict";

var hashClear = require('./_hashClear'),
  hashDelete = require('./_hashDelete'),
  hashGet = require('./_hashGet'),
  hashHas = require('./_hashHas'),
  hashSet = require('./_hashSet');

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
    length = entries == null ? 0 : entries.length;
  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;
module.exports = Hash;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJoYXNoQ2xlYXIiLCJyZXF1aXJlIiwiaGFzaERlbGV0ZSIsImhhc2hHZXQiLCJoYXNoSGFzIiwiaGFzaFNldCIsIkhhc2giLCJlbnRyaWVzIiwiaW5kZXgiLCJsZW5ndGgiLCJjbGVhciIsImVudHJ5Iiwic2V0IiwicHJvdG90eXBlIiwiZ2V0IiwiaGFzIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIl9IYXNoLmpzIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBoYXNoQ2xlYXIgPSByZXF1aXJlKCcuL19oYXNoQ2xlYXInKSxcbiAgICBoYXNoRGVsZXRlID0gcmVxdWlyZSgnLi9faGFzaERlbGV0ZScpLFxuICAgIGhhc2hHZXQgPSByZXF1aXJlKCcuL19oYXNoR2V0JyksXG4gICAgaGFzaEhhcyA9IHJlcXVpcmUoJy4vX2hhc2hIYXMnKSxcbiAgICBoYXNoU2V0ID0gcmVxdWlyZSgnLi9faGFzaFNldCcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBoYXNoIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gSGFzaChlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBIYXNoYC5cbkhhc2gucHJvdG90eXBlLmNsZWFyID0gaGFzaENsZWFyO1xuSGFzaC5wcm90b3R5cGVbJ2RlbGV0ZSddID0gaGFzaERlbGV0ZTtcbkhhc2gucHJvdG90eXBlLmdldCA9IGhhc2hHZXQ7XG5IYXNoLnByb3RvdHlwZS5oYXMgPSBoYXNoSGFzO1xuSGFzaC5wcm90b3R5cGUuc2V0ID0gaGFzaFNldDtcblxubW9kdWxlLmV4cG9ydHMgPSBIYXNoO1xuIl0sIm1hcHBpbmdzIjoiOzs7QUFBQSxJQUFJQSxTQUFTLEdBQUdDLE9BQU8sQ0FBQyxjQUFjLENBQUM7RUFDbkNDLFVBQVUsR0FBR0QsT0FBTyxDQUFDLGVBQWUsQ0FBQztFQUNyQ0UsT0FBTyxHQUFHRixPQUFPLENBQUMsWUFBWSxDQUFDO0VBQy9CRyxPQUFPLEdBQUdILE9BQU8sQ0FBQyxZQUFZLENBQUM7RUFDL0JJLE9BQU8sR0FBR0osT0FBTyxDQUFDLFlBQVksQ0FBQzs7QUFFbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTSyxJQUFJQSxDQUFDQyxPQUFPLEVBQUU7RUFDckIsSUFBSUMsS0FBSyxHQUFHLENBQUMsQ0FBQztJQUNWQyxNQUFNLEdBQUdGLE9BQU8sSUFBSSxJQUFJLEdBQUcsQ0FBQyxHQUFHQSxPQUFPLENBQUNFLE1BQU07RUFFakQsSUFBSSxDQUFDQyxLQUFLLEVBQUU7RUFDWixPQUFPLEVBQUVGLEtBQUssR0FBR0MsTUFBTSxFQUFFO0lBQ3ZCLElBQUlFLEtBQUssR0FBR0osT0FBTyxDQUFDQyxLQUFLLENBQUM7SUFDMUIsSUFBSSxDQUFDSSxHQUFHLENBQUNELEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRUEsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQzlCO0FBQ0Y7O0FBRUE7QUFDQUwsSUFBSSxDQUFDTyxTQUFTLENBQUNILEtBQUssR0FBR1YsU0FBUztBQUNoQ00sSUFBSSxDQUFDTyxTQUFTLENBQUMsUUFBUSxDQUFDLEdBQUdYLFVBQVU7QUFDckNJLElBQUksQ0FBQ08sU0FBUyxDQUFDQyxHQUFHLEdBQUdYLE9BQU87QUFDNUJHLElBQUksQ0FBQ08sU0FBUyxDQUFDRSxHQUFHLEdBQUdYLE9BQU87QUFDNUJFLElBQUksQ0FBQ08sU0FBUyxDQUFDRCxHQUFHLEdBQUdQLE9BQU87QUFFNUJXLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHWCxJQUFJIn0=