8a59fb9c29462235bb7de2692eb4172e
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getLabelContent = getLabelContent;
exports.getLabels = getLabels;
exports.getRealLabels = getRealLabels;
var _helpers = require("./helpers");
const labelledNodeNames = ['button', 'meter', 'output', 'progress', 'select', 'textarea', 'input'];
function getTextContent(node) {
  if (labelledNodeNames.includes(node.nodeName.toLowerCase())) {
    return '';
  }
  if (node.nodeType === _helpers.TEXT_NODE) return node.textContent;
  return Array.from(node.childNodes).map(childNode => getTextContent(childNode)).join('');
}
function getLabelContent(element) {
  let textContent;
  if (element.tagName.toLowerCase() === 'label') {
    textContent = getTextContent(element);
  } else {
    textContent = element.value || element.textContent;
  }
  return textContent;
}

// Based on https://github.com/eps1lon/dom-accessibility-api/pull/352
function getRealLabels(element) {
  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition -- types are not aware of older browsers that don't implement `labels`
  if (element.labels !== undefined) {
    var _labels;
    return (_labels = element.labels) != null ? _labels : [];
  }
  if (!isLabelable(element)) return [];
  const labels = element.ownerDocument.querySelectorAll('label');
  return Array.from(labels).filter(label => label.control === element);
}
function isLabelable(element) {
  return /BUTTON|METER|OUTPUT|PROGRESS|SELECT|TEXTAREA/.test(element.tagName) || element.tagName === 'INPUT' && element.getAttribute('type') !== 'hidden';
}
function getLabels(container, element, {
  selector = '*'
} = {}) {
  const ariaLabelledBy = element.getAttribute('aria-labelledby');
  const labelsId = ariaLabelledBy ? ariaLabelledBy.split(' ') : [];
  return labelsId.length ? labelsId.map(labelId => {
    const labellingElement = container.querySelector(`[id="${labelId}"]`);
    return labellingElement ? {
      content: getLabelContent(labellingElement),
      formControl: null
    } : {
      content: '',
      formControl: null
    };
  }) : Array.from(getRealLabels(element)).map(label => {
    const textToMatch = getLabelContent(label);
    const formControlSelector = 'button, input, meter, output, progress, select, textarea';
    const labelledFormControl = Array.from(label.querySelectorAll(formControlSelector)).filter(formControlElement => formControlElement.matches(selector))[0];
    return {
      content: textToMatch,
      formControl: labelledFormControl
    };
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImdldExhYmVsQ29udGVudCIsImdldExhYmVscyIsImdldFJlYWxMYWJlbHMiLCJfaGVscGVycyIsInJlcXVpcmUiLCJsYWJlbGxlZE5vZGVOYW1lcyIsImdldFRleHRDb250ZW50Iiwibm9kZSIsImluY2x1ZGVzIiwibm9kZU5hbWUiLCJ0b0xvd2VyQ2FzZSIsIm5vZGVUeXBlIiwiVEVYVF9OT0RFIiwidGV4dENvbnRlbnQiLCJBcnJheSIsImZyb20iLCJjaGlsZE5vZGVzIiwibWFwIiwiY2hpbGROb2RlIiwiam9pbiIsImVsZW1lbnQiLCJ0YWdOYW1lIiwibGFiZWxzIiwidW5kZWZpbmVkIiwiX2xhYmVscyIsImlzTGFiZWxhYmxlIiwib3duZXJEb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmaWx0ZXIiLCJsYWJlbCIsImNvbnRyb2wiLCJ0ZXN0IiwiZ2V0QXR0cmlidXRlIiwiY29udGFpbmVyIiwic2VsZWN0b3IiLCJhcmlhTGFiZWxsZWRCeSIsImxhYmVsc0lkIiwic3BsaXQiLCJsZW5ndGgiLCJsYWJlbElkIiwibGFiZWxsaW5nRWxlbWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJjb250ZW50IiwiZm9ybUNvbnRyb2wiLCJ0ZXh0VG9NYXRjaCIsImZvcm1Db250cm9sU2VsZWN0b3IiLCJsYWJlbGxlZEZvcm1Db250cm9sIiwiZm9ybUNvbnRyb2xFbGVtZW50IiwibWF0Y2hlcyJdLCJzb3VyY2VzIjpbImxhYmVsLWhlbHBlcnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmdldExhYmVsQ29udGVudCA9IGdldExhYmVsQ29udGVudDtcbmV4cG9ydHMuZ2V0TGFiZWxzID0gZ2V0TGFiZWxzO1xuZXhwb3J0cy5nZXRSZWFsTGFiZWxzID0gZ2V0UmVhbExhYmVscztcbnZhciBfaGVscGVycyA9IHJlcXVpcmUoXCIuL2hlbHBlcnNcIik7XG5jb25zdCBsYWJlbGxlZE5vZGVOYW1lcyA9IFsnYnV0dG9uJywgJ21ldGVyJywgJ291dHB1dCcsICdwcm9ncmVzcycsICdzZWxlY3QnLCAndGV4dGFyZWEnLCAnaW5wdXQnXTtcbmZ1bmN0aW9uIGdldFRleHRDb250ZW50KG5vZGUpIHtcbiAgaWYgKGxhYmVsbGVkTm9kZU5hbWVzLmluY2x1ZGVzKG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSkpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cbiAgaWYgKG5vZGUubm9kZVR5cGUgPT09IF9oZWxwZXJzLlRFWFRfTk9ERSkgcmV0dXJuIG5vZGUudGV4dENvbnRlbnQ7XG4gIHJldHVybiBBcnJheS5mcm9tKG5vZGUuY2hpbGROb2RlcykubWFwKGNoaWxkTm9kZSA9PiBnZXRUZXh0Q29udGVudChjaGlsZE5vZGUpKS5qb2luKCcnKTtcbn1cbmZ1bmN0aW9uIGdldExhYmVsQ29udGVudChlbGVtZW50KSB7XG4gIGxldCB0ZXh0Q29udGVudDtcbiAgaWYgKGVsZW1lbnQudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnbGFiZWwnKSB7XG4gICAgdGV4dENvbnRlbnQgPSBnZXRUZXh0Q29udGVudChlbGVtZW50KTtcbiAgfSBlbHNlIHtcbiAgICB0ZXh0Q29udGVudCA9IGVsZW1lbnQudmFsdWUgfHwgZWxlbWVudC50ZXh0Q29udGVudDtcbiAgfVxuICByZXR1cm4gdGV4dENvbnRlbnQ7XG59XG5cbi8vIEJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9lcHMxbG9uL2RvbS1hY2Nlc3NpYmlsaXR5LWFwaS9wdWxsLzM1MlxuZnVuY3Rpb24gZ2V0UmVhbExhYmVscyhlbGVtZW50KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5uZWNlc3NhcnktY29uZGl0aW9uIC0tIHR5cGVzIGFyZSBub3QgYXdhcmUgb2Ygb2xkZXIgYnJvd3NlcnMgdGhhdCBkb24ndCBpbXBsZW1lbnQgYGxhYmVsc2BcbiAgaWYgKGVsZW1lbnQubGFiZWxzICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgX2xhYmVscztcbiAgICByZXR1cm4gKF9sYWJlbHMgPSBlbGVtZW50LmxhYmVscykgIT0gbnVsbCA/IF9sYWJlbHMgOiBbXTtcbiAgfVxuICBpZiAoIWlzTGFiZWxhYmxlKGVsZW1lbnQpKSByZXR1cm4gW107XG4gIGNvbnN0IGxhYmVscyA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdsYWJlbCcpO1xuICByZXR1cm4gQXJyYXkuZnJvbShsYWJlbHMpLmZpbHRlcihsYWJlbCA9PiBsYWJlbC5jb250cm9sID09PSBlbGVtZW50KTtcbn1cbmZ1bmN0aW9uIGlzTGFiZWxhYmxlKGVsZW1lbnQpIHtcbiAgcmV0dXJuIC9CVVRUT058TUVURVJ8T1VUUFVUfFBST0dSRVNTfFNFTEVDVHxURVhUQVJFQS8udGVzdChlbGVtZW50LnRhZ05hbWUpIHx8IGVsZW1lbnQudGFnTmFtZSA9PT0gJ0lOUFVUJyAmJiBlbGVtZW50LmdldEF0dHJpYnV0ZSgndHlwZScpICE9PSAnaGlkZGVuJztcbn1cbmZ1bmN0aW9uIGdldExhYmVscyhjb250YWluZXIsIGVsZW1lbnQsIHtcbiAgc2VsZWN0b3IgPSAnKidcbn0gPSB7fSkge1xuICBjb25zdCBhcmlhTGFiZWxsZWRCeSA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsbGVkYnknKTtcbiAgY29uc3QgbGFiZWxzSWQgPSBhcmlhTGFiZWxsZWRCeSA/IGFyaWFMYWJlbGxlZEJ5LnNwbGl0KCcgJykgOiBbXTtcbiAgcmV0dXJuIGxhYmVsc0lkLmxlbmd0aCA/IGxhYmVsc0lkLm1hcChsYWJlbElkID0+IHtcbiAgICBjb25zdCBsYWJlbGxpbmdFbGVtZW50ID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoYFtpZD1cIiR7bGFiZWxJZH1cIl1gKTtcbiAgICByZXR1cm4gbGFiZWxsaW5nRWxlbWVudCA/IHtcbiAgICAgIGNvbnRlbnQ6IGdldExhYmVsQ29udGVudChsYWJlbGxpbmdFbGVtZW50KSxcbiAgICAgIGZvcm1Db250cm9sOiBudWxsXG4gICAgfSA6IHtcbiAgICAgIGNvbnRlbnQ6ICcnLFxuICAgICAgZm9ybUNvbnRyb2w6IG51bGxcbiAgICB9O1xuICB9KSA6IEFycmF5LmZyb20oZ2V0UmVhbExhYmVscyhlbGVtZW50KSkubWFwKGxhYmVsID0+IHtcbiAgICBjb25zdCB0ZXh0VG9NYXRjaCA9IGdldExhYmVsQ29udGVudChsYWJlbCk7XG4gICAgY29uc3QgZm9ybUNvbnRyb2xTZWxlY3RvciA9ICdidXR0b24sIGlucHV0LCBtZXRlciwgb3V0cHV0LCBwcm9ncmVzcywgc2VsZWN0LCB0ZXh0YXJlYSc7XG4gICAgY29uc3QgbGFiZWxsZWRGb3JtQ29udHJvbCA9IEFycmF5LmZyb20obGFiZWwucXVlcnlTZWxlY3RvckFsbChmb3JtQ29udHJvbFNlbGVjdG9yKSkuZmlsdGVyKGZvcm1Db250cm9sRWxlbWVudCA9PiBmb3JtQ29udHJvbEVsZW1lbnQubWF0Y2hlcyhzZWxlY3RvcikpWzBdO1xuICAgIHJldHVybiB7XG4gICAgICBjb250ZW50OiB0ZXh0VG9NYXRjaCxcbiAgICAgIGZvcm1Db250cm9sOiBsYWJlbGxlZEZvcm1Db250cm9sXG4gICAgfTtcbiAgfSk7XG59Il0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaQSxNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxFQUFFLFlBQVksRUFBRTtFQUMzQ0MsS0FBSyxFQUFFO0FBQ1QsQ0FBQyxDQUFDO0FBQ0ZELE9BQU8sQ0FBQ0UsZUFBZSxHQUFHQSxlQUFlO0FBQ3pDRixPQUFPLENBQUNHLFNBQVMsR0FBR0EsU0FBUztBQUM3QkgsT0FBTyxDQUFDSSxhQUFhLEdBQUdBLGFBQWE7QUFDckMsSUFBSUMsUUFBUSxHQUFHQyxPQUFPLENBQUMsV0FBVyxDQUFDO0FBQ25DLE1BQU1D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