1ed734524df50ad5c4ab61b183ade97b
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _material = require("@mui/material");
var _axios = _interopRequireDefault(require("axios"));
var _formik = require("formik");
var _react = _interopRequireWildcard(require("react"));
var _reactRedux = require("react-redux");
var _reactRouterDom = require("react-router-dom");
var _wordSlice = require("../Redux/reducers/wordSlice");
var _App = require("./../../App");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const Home = () => {
  const [word, setWord] = (0, _react.useState)("");
  const dispatch = (0, _reactRedux.useDispatch)();
  const {
    theme,
    themeToggle
  } = (0, _react.useContext)(_App.ThemeContext);
  const {
    words
  } = (0, _reactRedux.useSelector)(state => state.words);
  const [definitions, setDefinitions] = (0, _react.useState)([]);
  const mounted = (0, _react.useRef)(false);
  const navigation = (0, _reactRouterDom.useNavigate)();
  const memoizedDefinition = (0, _react.useMemo)(() => {
    return definitions.map((defintion, index) => /*#__PURE__*/_react.default.createElement("li", {
      key: index
    }, defintion));
  }, [definitions]);
  const memoizedWordAndDefinition = (0, _react.useMemo)(() => {
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("p", {
      className: "word"
    }, "Word: ", word), /*#__PURE__*/_react.default.createElement("p", {
      className: "definition"
    }, "Definitions:"), /*#__PURE__*/_react.default.createElement("ul", null, memoizedDefinition));
  }, [word, memoizedDefinition]);
  (0, _react.useEffect)(() => {
    const getWord = async () => {
      const result = await _axios.default.get(`https://random-word-api.herokuapp.com/word`);
      setWord(result.data[0]);
    };
    if (!mounted.current) {
      getWord();
      mounted.current = true;
    }
  }, []);
  (0, _react.useEffect)(() => {
    const getDefinition = async () => {
      try {
        const result = await _axios.default.get(`https://api.dictionaryapi.dev/api/v2/entries/en/${word}`);
        const meanings = result.data[0].meanings;
        const definitionsArray = [];
        meanings.forEach(meaning => {
          if (meaning.definitions[0]) {
            definitionsArray.push(meaning.definitions[0].definition);
          }
        });
        setDefinitions(definitionsArray);
      } catch (error) {
        alert("No definition found.");
        setDefinitions(["Enter a valid word."]);
      }
    };
    if (word !== "") {
      getDefinition();
    }
  }, [word]);
  const formik = (0, _formik.useFormik)({
    initialValues: {
      inputWord: ""
    },
    onSubmit: values => {
      setWord(values.inputWord);
      dispatch((0, _wordSlice.addWord)(values.inputWord));
    }
  });
  const handleNavigation = () => {
    navigation(`/details/${word}`, {
      state: word
    });
  };
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "homeContainer",
    "data-testid": "homeContainer"
  }, /*#__PURE__*/_react.default.createElement(_material.Switch, {
    onChange: themeToggle
  }), /*#__PURE__*/_react.default.createElement("em", null, "Click on the definition for more information"), /*#__PURE__*/_react.default.createElement("div", {
    onClick: handleNavigation,
    className: "wordAndDefinition"
  }, memoizedWordAndDefinition), /*#__PURE__*/_react.default.createElement("form", {
    onSubmit: formik.handleSubmit,
    className: "homeForm"
  }, /*#__PURE__*/_react.default.createElement(_material.TextField, {
    id: "wordInput",
    name: "inputWord",
    type: "text",
    variant: "outlined",
    onChange: formik.handleChange,
    placeholder: "Example: example"
  }), /*#__PURE__*/_react.default.createElement(_material.Button, {
    type: "submit",
    variant: "contained"
  }, "Submit")), /*#__PURE__*/_react.default.createElement("form", {
    onSubmit: formik.handleSubmit,
    className: "homeForm"
  }, /*#__PURE__*/_react.default.createElement(_material.Select, {
    id: "previousWords",
    disabled: words.length == 0,
    name: "inputWord",
    value: formik.values.inputWord,
    onChange: formik.handleChange,
    placeholder: "Previous Words"
  }, words.map(word => /*#__PURE__*/_react.default.createElement(_material.MenuItem, {
    value: word,
    key: word
  }, word))), /*#__PURE__*/_react.default.createElement(_material.Button, {
    type: "submit",
    variant: "contained",
    disabled: words.length == 0,
    id: "selectPrevious"
  }, "Select")));
};
var _default = Home;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,