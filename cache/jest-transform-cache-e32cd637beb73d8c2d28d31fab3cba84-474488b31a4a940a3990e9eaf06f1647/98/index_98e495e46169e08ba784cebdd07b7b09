c38f85d159f0e7da7fb21775045aadf8
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _actCompat = require("./act-compat");
var _pure = require("./pure");
Object.keys(_pure).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _pure[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _pure[key];
    }
  });
});
var _process$env;

// if we're running in a test runner that supports afterEach
// or teardown then we'll automatically run cleanup afterEach test
// this ensures that tests run in isolation from each other
// if you don't like this then either import the `pure` module
// or set the RTL_SKIP_AUTO_CLEANUP env variable to 'true'.
if (typeof process === 'undefined' || !((_process$env = process.env) != null && _process$env.RTL_SKIP_AUTO_CLEANUP)) {
  // ignore teardown() in code coverage because Jest does not support it

  /* istanbul ignore else */
  if (typeof afterEach === 'function') {
    afterEach(() => {
      (0, _pure.cleanup)();
    });
  } else if (typeof teardown === 'function') {
    // Block is guarded by `typeof` check.
    // eslint does not support `typeof` guards.
    // eslint-disable-next-line no-undef
    teardown(() => {
      (0, _pure.cleanup)();
    });
  } // No test setup with other test runners available

  /* istanbul ignore else */

  if (typeof beforeAll === 'function' && typeof afterAll === 'function') {
    // This matches the behavior of React < 18.
    let previousIsReactActEnvironment = (0, _actCompat.getIsReactActEnvironment)();
    beforeAll(() => {
      previousIsReactActEnvironment = (0, _actCompat.getIsReactActEnvironment)();
      (0, _actCompat.setReactActEnvironment)(true);
    });
    afterAll(() => {
      (0, _actCompat.setReactActEnvironment)(previousIsReactActEnvironment);
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIl9hY3RDb21wYXQiLCJyZXF1aXJlIiwiX3B1cmUiLCJrZXlzIiwiZm9yRWFjaCIsImtleSIsImVudW1lcmFibGUiLCJnZXQiLCJfcHJvY2VzcyRlbnYiLCJwcm9jZXNzIiwiZW52IiwiUlRMX1NLSVBfQVVUT19DTEVBTlVQIiwiYWZ0ZXJFYWNoIiwiY2xlYW51cCIsInRlYXJkb3duIiwiYmVmb3JlQWxsIiwiYWZ0ZXJBbGwiLCJwcmV2aW91c0lzUmVhY3RBY3RFbnZpcm9ubWVudCIsImdldElzUmVhY3RBY3RFbnZpcm9ubWVudCIsInNldFJlYWN0QWN0RW52aXJvbm1lbnQiXSwic291cmNlcyI6WyJpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9hY3RDb21wYXQgPSByZXF1aXJlKFwiLi9hY3QtY29tcGF0XCIpO1xuXG52YXIgX3B1cmUgPSByZXF1aXJlKFwiLi9wdXJlXCIpO1xuXG5PYmplY3Qua2V5cyhfcHVyZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIGlmIChrZXkgPT09IFwiZGVmYXVsdFwiIHx8IGtleSA9PT0gXCJfX2VzTW9kdWxlXCIpIHJldHVybjtcbiAgaWYgKGtleSBpbiBleHBvcnRzICYmIGV4cG9ydHNba2V5XSA9PT0gX3B1cmVba2V5XSkgcmV0dXJuO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfcHVyZVtrZXldO1xuICAgIH1cbiAgfSk7XG59KTtcblxudmFyIF9wcm9jZXNzJGVudjtcblxuLy8gaWYgd2UncmUgcnVubmluZyBpbiBhIHRlc3QgcnVubmVyIHRoYXQgc3VwcG9ydHMgYWZ0ZXJFYWNoXG4vLyBvciB0ZWFyZG93biB0aGVuIHdlJ2xsIGF1dG9tYXRpY2FsbHkgcnVuIGNsZWFudXAgYWZ0ZXJFYWNoIHRlc3Rcbi8vIHRoaXMgZW5zdXJlcyB0aGF0IHRlc3RzIHJ1biBpbiBpc29sYXRpb24gZnJvbSBlYWNoIG90aGVyXG4vLyBpZiB5b3UgZG9uJ3QgbGlrZSB0aGlzIHRoZW4gZWl0aGVyIGltcG9ydCB0aGUgYHB1cmVgIG1vZHVsZVxuLy8gb3Igc2V0IHRoZSBSVExfU0tJUF9BVVRPX0NMRUFOVVAgZW52IHZhcmlhYmxlIHRvICd0cnVlJy5cbmlmICh0eXBlb2YgcHJvY2VzcyA9PT0gJ3VuZGVmaW5lZCcgfHwgISgoX3Byb2Nlc3MkZW52ID0gcHJvY2Vzcy5lbnYpICE9IG51bGwgJiYgX3Byb2Nlc3MkZW52LlJUTF9TS0lQX0FVVE9fQ0xFQU5VUCkpIHtcbiAgLy8gaWdub3JlIHRlYXJkb3duKCkgaW4gY29kZSBjb3ZlcmFnZSBiZWNhdXNlIEplc3QgZG9lcyBub3Qgc3VwcG9ydCBpdFxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmICh0eXBlb2YgYWZ0ZXJFYWNoID09PSAnZnVuY3Rpb24nKSB7XG4gICAgYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICAgICgwLCBfcHVyZS5jbGVhbnVwKSgpO1xuICAgIH0pO1xuICB9IGVsc2UgaWYgKHR5cGVvZiB0ZWFyZG93biA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIC8vIEJsb2NrIGlzIGd1YXJkZWQgYnkgYHR5cGVvZmAgY2hlY2suXG4gICAgLy8gZXNsaW50IGRvZXMgbm90IHN1cHBvcnQgYHR5cGVvZmAgZ3VhcmRzLlxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgIHRlYXJkb3duKCgpID0+IHtcbiAgICAgICgwLCBfcHVyZS5jbGVhbnVwKSgpO1xuICAgIH0pO1xuICB9IC8vIE5vIHRlc3Qgc2V0dXAgd2l0aCBvdGhlciB0ZXN0IHJ1bm5lcnMgYXZhaWxhYmxlXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cblxuXG4gIGlmICh0eXBlb2YgYmVmb3JlQWxsID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBhZnRlckFsbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIC8vIFRoaXMgbWF0Y2hlcyB0aGUgYmVoYXZpb3Igb2YgUmVhY3QgPCAxOC5cbiAgICBsZXQgcHJldmlvdXNJc1JlYWN0QWN0RW52aXJvbm1lbnQgPSAoMCwgX2FjdENvbXBhdC5nZXRJc1JlYWN0QWN0RW52aXJvbm1lbnQpKCk7XG4gICAgYmVmb3JlQWxsKCgpID0+IHtcbiAgICAgIHByZXZpb3VzSXNSZWFjdEFjdEVudmlyb25tZW50ID0gKDAsIF9hY3RDb21wYXQuZ2V0SXNSZWFjdEFjdEVudmlyb25tZW50KSgpO1xuICAgICAgKDAsIF9hY3RDb21wYXQuc2V0UmVhY3RBY3RFbnZpcm9ubWVudCkodHJ1ZSk7XG4gICAgfSk7XG4gICAgYWZ0ZXJBbGwoKCkgPT4ge1xuICAgICAgKDAsIF9hY3RDb21wYXQuc2V0UmVhY3RBY3RFbnZpcm9ubWVudCkocHJldmlvdXNJc1JlYWN0QWN0RW52aXJvbm1lbnQpO1xuICAgIH0pO1xuICB9XG59Il0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaQSxNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxFQUFFLFlBQVksRUFBRTtFQUMzQ0MsS0FBSyxFQUFFO0FBQ1QsQ0FBQyxDQUFDO0FBRUYsSUFBSUMsVUFBVSxHQUFHQyxPQUFPLENBQUMsY0FBYyxDQUFDO0FBRXhDLElBQUlDLEtBQUssR0FBR0QsT0FBTyxDQUFDLFFBQVEsQ0FBQztBQUU3QkwsTUFBTSxDQUFDTyxJQUFJLENBQUNELEtBQUssQ0FBQyxDQUFDRSxPQUFPLENBQUMsVUFBVUMsR0FBRyxFQUFFO0VBQ3hDLElBQUlBLEdBQUcsS0FBSyxTQUFTLElBQUlBLEdBQUcsS0FBSyxZQUFZLEVBQUU7RUFDL0MsSUFBSUEsR0FBRyxJQUFJUCxPQUFPLElBQUlBLE9BQU8sQ0FBQ08sR0FBRyxDQUFDLEtBQUtILEtBQUssQ0FBQ0csR0FBRyxDQUFDLEVBQUU7RUFDbkRULE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxPQUFPLEVBQUVPLEdBQUcsRUFBRTtJQUNsQ0MsVUFBVSxFQUFFLElBQUk7SUFDaEJDLEdBQUcsRUFBRSxTQUFBQSxDQUFBLEVBQVk7TUFDZixPQUFPTCxLQUFLLENBQUNHLEdBQUcsQ0FBQztJQUNuQjtFQUNGLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGLElBQUlHLFlBQVk7O0FBRWhCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLE9BQU9DLE9BQU8sS0FBSyxXQUFXLElBQUksRUFBRSxDQUFDRCxZQUFZLEdBQUdDLE9BQU8sQ0FBQ0MsR0FBRyxLQUFLLElBQUksSUFBSUYsWUFBWSxDQUFDRyxxQkFBcUIsQ0FBQyxFQUFFO0VBQ25IOztFQUVBO0VBQ0EsSUFBSSxPQUFPQyxTQUFTLEtBQUssVUFBVSxFQUFFO0lBQ25DQSxTQUFTLENBQUMsTUFBTTtNQUNkLENBQUMsQ0FBQyxFQUFFVixLQUFLLENBQUNXLE9BQU8sR0FBRztJQUN0QixDQUFDLENBQUM7RUFDSixDQUFDLE1BQU0sSUFBSSxPQUFPQyxRQUFRLEtBQUssVUFBVSxFQUFFO0lBQ3pDO0lBQ0E7SUFDQTtJQUNBQSxRQUFRLENBQUMsTUFBTTtNQUNiLENBQUMsQ0FBQyxFQUFFWixLQUFLLENBQUNXLE9BQU8sR0FBRztJQUN0QixDQUFDLENBQUM7RUFDSixDQUFDLENBQUM7O0VBRUY7O0VBR0EsSUFBSSxPQUFPRSxTQUFTLEtBQUssVUFBVSxJQUFJLE9BQU9DLFFBQVEsS0FBSyxVQUFVLEVBQUU7SUFDckU7SUFDQSxJQUFJQyw2QkFBNkIsR0FBRyxDQUFDLENBQUMsRUFBRWpCLFVBQVUsQ0FBQ2tCLHdCQUF3QixHQUFHO0lBQzlFSCxTQUFTLENBQUMsTUFBTTtNQUNkRSw2QkFBNkIsR0FBRyxDQUFDLENBQUMsRUFBRWpCLFVBQVUsQ0FBQ2tCLHdCQUF3QixHQUFHO01BQzFFLENBQUMsQ0FBQyxFQUFFbEIsVUFBVSxDQUFDbUIsc0JBQXNCLEVBQUUsSUFBSSxDQUFDO0lBQzlDLENBQUMsQ0FBQztJQUNGSCxRQUFRLENBQUMsTUFBTTtNQUNiLENBQUMsQ0FBQyxFQUFFaEIsVUFBVSxDQUFDbUIsc0JBQXNCLEVBQUVGLDZCQUE2QixDQUFDO0lBQ3ZFLENBQUMsQ0FBQztFQUNKO0FBQ0YifQ==