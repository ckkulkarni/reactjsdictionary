313ba4e034731ae6a4020aece26887d9
"use strict";

var _react = _interopRequireDefault(require("react"));
var _jestCucumber = require("jest-cucumber");
var _reactRedux = require("react-redux");
var _reactRouterDom = require("react-router-dom");
var _react2 = require("@testing-library/react");
require("@testing-library/jest-dom/extend-expect");
var _store = require("../../Redux/store");
var _Home = _interopRequireDefault(require("../../Dictionary/Home"));
var _Details = _interopRequireDefault(require("../../Dictionary/Details"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const feature = (0, _jestCucumber.loadFeature)("src/Components/Features/home.feature");
(0, _jestCucumber.defineFeature)(feature, test => {
  test("The component renders and a random word is fetched", ({
    given,
    when,
    then
  }) => {
    given("The user is on the Home page", () => {
      const screen = (0, _react2.render)( /*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {
        store: _store.store
      }, /*#__PURE__*/_react.default.createElement(_reactRouterDom.BrowserRouter, null, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Routes, null, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
        path: "/search",
        element: /*#__PURE__*/_react.default.createElement(_Home.default, null)
      }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
        path: "/details/:id",
        element: /*#__PURE__*/_react.default.createElement(_Details.default, null)
      }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
        path: "*",
        element: /*#__PURE__*/_react.default.createElement(_reactRouterDom.Navigate, {
          to: "/search",
          replace: true
        })
      })))));
      expect(screen.getByTestId("homeContainer")).toBeInTheDocument();
    });
    when("The user inputs a word and submits it", async () => {
      const screen = (0, _react2.render)( /*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {
        store: _store.store
      }, /*#__PURE__*/_react.default.createElement(_reactRouterDom.BrowserRouter, null, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Routes, null, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
        path: "/search",
        element: /*#__PURE__*/_react.default.createElement(_Home.default, null)
      }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
        path: "/details/:id",
        element: /*#__PURE__*/_react.default.createElement(_Details.default, null)
      }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
        path: "*",
        element: /*#__PURE__*/_react.default.createElement(_reactRouterDom.Navigate, {
          to: "/search",
          replace: true
        })
      })))));
      const input = screen.getByPlaceholderText("Search for a word");
      _react2.fireEvent.change(input, {
        target: {
          value: "example"
        }
      });
      const form = screen.getByTestId("searchForm");
      _react2.fireEvent.submit(form);
    });
    then("the definition of the word is fetched and displayed", async () => {
      const screen = (0, _react2.render)( /*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {
        store: _store.store
      }, /*#__PURE__*/_react.default.createElement(_reactRouterDom.BrowserRouter, null, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Routes, null, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
        path: "/search",
        element: /*#__PURE__*/_react.default.createElement(_Home.default, null)
      }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
        path: "/details/:id",
        element: /*#__PURE__*/_react.default.createElement(_Details.default, null)
      }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
        path: "*",
        element: /*#__PURE__*/_react.default.createElement(_reactRouterDom.Navigate, {
          to: "/search",
          replace: true
        })
      })))));
      const mockAxios = jest.spyOn(require("axios"), "get");
      mockAxios.mockResolvedValueOnce({
        data: [{
          meanings: [{
            definitions: [{
              definition: "a thing characteristic of its kind"
            }]
          }]
        }]
      });
      await screen.findByText("example");
      const definition = await screen.findByText("a thing characteristic of its kind");
      expect(definition).toBeInTheDocument();
      mockAxios.mockRestore();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,