61deee63ebd852beb25fd5e6bf39534d
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSubscription = createSubscription;
var _batch = require("./batch");
// encapsulates the subscription logic for connecting a component to the redux store, as
// well as nesting subscriptions of descendant components, so that we can ensure the
// ancestor components re-render before descendants
function createListenerCollection() {
  const batch = (0, _batch.getBatch)();
  let first = null;
  let last = null;
  return {
    clear() {
      first = null;
      last = null;
    },
    notify() {
      batch(() => {
        let listener = first;
        while (listener) {
          listener.callback();
          listener = listener.next;
        }
      });
    },
    get() {
      let listeners = [];
      let listener = first;
      while (listener) {
        listeners.push(listener);
        listener = listener.next;
      }
      return listeners;
    },
    subscribe(callback) {
      let isSubscribed = true;
      let listener = last = {
        callback,
        next: null,
        prev: last
      };
      if (listener.prev) {
        listener.prev.next = listener;
      } else {
        first = listener;
      }
      return function unsubscribe() {
        if (!isSubscribed || first === null) return;
        isSubscribed = false;
        if (listener.next) {
          listener.next.prev = listener.prev;
        } else {
          last = listener.prev;
        }
        if (listener.prev) {
          listener.prev.next = listener.next;
        } else {
          first = listener.next;
        }
      };
    }
  };
}
const nullListeners = {
  notify() {},
  get: () => []
};
function createSubscription(store, parentSub) {
  let unsubscribe;
  let listeners = nullListeners;
  function addNestedSub(listener) {
    trySubscribe();
    return listeners.subscribe(listener);
  }
  function notifyNestedSubs() {
    listeners.notify();
  }
  function handleChangeWrapper() {
    if (subscription.onStateChange) {
      subscription.onStateChange();
    }
  }
  function isSubscribed() {
    return Boolean(unsubscribe);
  }
  function trySubscribe() {
    if (!unsubscribe) {
      unsubscribe = parentSub ? parentSub.addNestedSub(handleChangeWrapper) : store.subscribe(handleChangeWrapper);
      listeners = createListenerCollection();
    }
  }
  function tryUnsubscribe() {
    if (unsubscribe) {
      unsubscribe();
      unsubscribe = undefined;
      listeners.clear();
      listeners = nullListeners;
    }
  }
  const subscription = {
    addNestedSub,
    notifyNestedSubs,
    handleChangeWrapper,
    isSubscribed,
    trySubscribe,
    tryUnsubscribe,
    getListeners: () => listeners
  };
  return subscription;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfYmF0Y2giLCJyZXF1aXJlIiwiY3JlYXRlTGlzdGVuZXJDb2xsZWN0aW9uIiwiYmF0Y2giLCJnZXRCYXRjaCIsImZpcnN0IiwibGFzdCIsImNsZWFyIiwibm90aWZ5IiwibGlzdGVuZXIiLCJjYWxsYmFjayIsIm5leHQiLCJnZXQiLCJsaXN0ZW5lcnMiLCJwdXNoIiwic3Vic2NyaWJlIiwiaXNTdWJzY3JpYmVkIiwicHJldiIsInVuc3Vic2NyaWJlIiwibnVsbExpc3RlbmVycyIsImNyZWF0ZVN1YnNjcmlwdGlvbiIsInN0b3JlIiwicGFyZW50U3ViIiwiYWRkTmVzdGVkU3ViIiwidHJ5U3Vic2NyaWJlIiwibm90aWZ5TmVzdGVkU3VicyIsImhhbmRsZUNoYW5nZVdyYXBwZXIiLCJzdWJzY3JpcHRpb24iLCJvblN0YXRlQ2hhbmdlIiwiQm9vbGVhbiIsInRyeVVuc3Vic2NyaWJlIiwidW5kZWZpbmVkIiwiZ2V0TGlzdGVuZXJzIl0sInNvdXJjZXMiOlsiU3Vic2NyaXB0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldEJhdGNoIH0gZnJvbSAnLi9iYXRjaCc7IC8vIGVuY2Fwc3VsYXRlcyB0aGUgc3Vic2NyaXB0aW9uIGxvZ2ljIGZvciBjb25uZWN0aW5nIGEgY29tcG9uZW50IHRvIHRoZSByZWR1eCBzdG9yZSwgYXNcbi8vIHdlbGwgYXMgbmVzdGluZyBzdWJzY3JpcHRpb25zIG9mIGRlc2NlbmRhbnQgY29tcG9uZW50cywgc28gdGhhdCB3ZSBjYW4gZW5zdXJlIHRoZVxuLy8gYW5jZXN0b3IgY29tcG9uZW50cyByZS1yZW5kZXIgYmVmb3JlIGRlc2NlbmRhbnRzXG5cbmZ1bmN0aW9uIGNyZWF0ZUxpc3RlbmVyQ29sbGVjdGlvbigpIHtcbiAgY29uc3QgYmF0Y2ggPSBnZXRCYXRjaCgpO1xuICBsZXQgZmlyc3QgPSBudWxsO1xuICBsZXQgbGFzdCA9IG51bGw7XG4gIHJldHVybiB7XG4gICAgY2xlYXIoKSB7XG4gICAgICBmaXJzdCA9IG51bGw7XG4gICAgICBsYXN0ID0gbnVsbDtcbiAgICB9LFxuXG4gICAgbm90aWZ5KCkge1xuICAgICAgYmF0Y2goKCkgPT4ge1xuICAgICAgICBsZXQgbGlzdGVuZXIgPSBmaXJzdDtcblxuICAgICAgICB3aGlsZSAobGlzdGVuZXIpIHtcbiAgICAgICAgICBsaXN0ZW5lci5jYWxsYmFjaygpO1xuICAgICAgICAgIGxpc3RlbmVyID0gbGlzdGVuZXIubmV4dDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSxcblxuICAgIGdldCgpIHtcbiAgICAgIGxldCBsaXN0ZW5lcnMgPSBbXTtcbiAgICAgIGxldCBsaXN0ZW5lciA9IGZpcnN0O1xuXG4gICAgICB3aGlsZSAobGlzdGVuZXIpIHtcbiAgICAgICAgbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgICAgICBsaXN0ZW5lciA9IGxpc3RlbmVyLm5leHQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBsaXN0ZW5lcnM7XG4gICAgfSxcblxuICAgIHN1YnNjcmliZShjYWxsYmFjaykge1xuICAgICAgbGV0IGlzU3Vic2NyaWJlZCA9IHRydWU7XG4gICAgICBsZXQgbGlzdGVuZXIgPSBsYXN0ID0ge1xuICAgICAgICBjYWxsYmFjayxcbiAgICAgICAgbmV4dDogbnVsbCxcbiAgICAgICAgcHJldjogbGFzdFxuICAgICAgfTtcblxuICAgICAgaWYgKGxpc3RlbmVyLnByZXYpIHtcbiAgICAgICAgbGlzdGVuZXIucHJldi5uZXh0ID0gbGlzdGVuZXI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmaXJzdCA9IGxpc3RlbmVyO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZnVuY3Rpb24gdW5zdWJzY3JpYmUoKSB7XG4gICAgICAgIGlmICghaXNTdWJzY3JpYmVkIHx8IGZpcnN0ID09PSBudWxsKSByZXR1cm47XG4gICAgICAgIGlzU3Vic2NyaWJlZCA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChsaXN0ZW5lci5uZXh0KSB7XG4gICAgICAgICAgbGlzdGVuZXIubmV4dC5wcmV2ID0gbGlzdGVuZXIucHJldjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsYXN0ID0gbGlzdGVuZXIucHJldjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsaXN0ZW5lci5wcmV2KSB7XG4gICAgICAgICAgbGlzdGVuZXIucHJldi5uZXh0ID0gbGlzdGVuZXIubmV4dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmaXJzdCA9IGxpc3RlbmVyLm5leHQ7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuXG4gIH07XG59XG5cbmNvbnN0IG51bGxMaXN0ZW5lcnMgPSB7XG4gIG5vdGlmeSgpIHt9LFxuXG4gIGdldDogKCkgPT4gW11cbn07XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU3Vic2NyaXB0aW9uKHN0b3JlLCBwYXJlbnRTdWIpIHtcbiAgbGV0IHVuc3Vic2NyaWJlO1xuICBsZXQgbGlzdGVuZXJzID0gbnVsbExpc3RlbmVycztcblxuICBmdW5jdGlvbiBhZGROZXN0ZWRTdWIobGlzdGVuZXIpIHtcbiAgICB0cnlTdWJzY3JpYmUoKTtcbiAgICByZXR1cm4gbGlzdGVuZXJzLnN1YnNjcmliZShsaXN0ZW5lcik7XG4gIH1cblxuICBmdW5jdGlvbiBub3RpZnlOZXN0ZWRTdWJzKCkge1xuICAgIGxpc3RlbmVycy5ub3RpZnkoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUNoYW5nZVdyYXBwZXIoKSB7XG4gICAgaWYgKHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlKSB7XG4gICAgICBzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGlzU3Vic2NyaWJlZCgpIHtcbiAgICByZXR1cm4gQm9vbGVhbih1bnN1YnNjcmliZSk7XG4gIH1cblxuICBmdW5jdGlvbiB0cnlTdWJzY3JpYmUoKSB7XG4gICAgaWYgKCF1bnN1YnNjcmliZSkge1xuICAgICAgdW5zdWJzY3JpYmUgPSBwYXJlbnRTdWIgPyBwYXJlbnRTdWIuYWRkTmVzdGVkU3ViKGhhbmRsZUNoYW5nZVdyYXBwZXIpIDogc3RvcmUuc3Vic2NyaWJlKGhhbmRsZUNoYW5nZVdyYXBwZXIpO1xuICAgICAgbGlzdGVuZXJzID0gY3JlYXRlTGlzdGVuZXJDb2xsZWN0aW9uKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdHJ5VW5zdWJzY3JpYmUoKSB7XG4gICAgaWYgKHVuc3Vic2NyaWJlKSB7XG4gICAgICB1bnN1YnNjcmliZSgpO1xuICAgICAgdW5zdWJzY3JpYmUgPSB1bmRlZmluZWQ7XG4gICAgICBsaXN0ZW5lcnMuY2xlYXIoKTtcbiAgICAgIGxpc3RlbmVycyA9IG51bGxMaXN0ZW5lcnM7XG4gICAgfVxuICB9XG5cbiAgY29uc3Qgc3Vic2NyaXB0aW9uID0ge1xuICAgIGFkZE5lc3RlZFN1YixcbiAgICBub3RpZnlOZXN0ZWRTdWJzLFxuICAgIGhhbmRsZUNoYW5nZVdyYXBwZXIsXG4gICAgaXNTdWJzY3JpYmVkLFxuICAgIHRyeVN1YnNjcmliZSxcbiAgICB0cnlVbnN1YnNjcmliZSxcbiAgICBnZXRMaXN0ZW5lcnM6ICgpID0+IGxpc3RlbmVyc1xuICB9O1xuICByZXR1cm4gc3Vic2NyaXB0aW9uO1xufSJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxPQUFBO0FBQW9DO0FBQ3BDO0FBQ0E7QUFFQSxTQUFTQyx3QkFBd0JBLENBQUEsRUFBRztFQUNsQyxNQUFNQyxLQUFLLEdBQUcsSUFBQUMsZUFBUSxHQUFFO0VBQ3hCLElBQUlDLEtBQUssR0FBRyxJQUFJO0VBQ2hCLElBQUlDLElBQUksR0FBRyxJQUFJO0VBQ2YsT0FBTztJQUNMQyxLQUFLQSxDQUFBLEVBQUc7TUFDTkYsS0FBSyxHQUFHLElBQUk7TUFDWkMsSUFBSSxHQUFHLElBQUk7SUFDYixDQUFDO0lBRURFLE1BQU1BLENBQUEsRUFBRztNQUNQTCxLQUFLLENBQUMsTUFBTTtRQUNWLElBQUlNLFFBQVEsR0FBR0osS0FBSztRQUVwQixPQUFP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