{"version":3,"names":["_extends2","_interopRequireDefault","require","_objectWithoutPropertiesLoose2","_hoistNonReactStatics","_react","_interopRequireWildcard","_reactIs","_selectorFactory","_mapDispatchToProps","_mapStateToProps","_mergeProps","_Subscription","_useIsomorphicLayoutEffect","_shallowEqual","_warning","_Context","_useSyncExternalStore","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","_excluded","useSyncExternalStore","notInitialized","initializeConnect","fn","exports","EMPTY_ARRAY","NO_SUBSCRIPTION_ARRAY","stringifyComponent","Comp","JSON","stringify","err","String","useIsomorphicLayoutEffectWithArgs","effectFunc","effectArgs","dependencies","useIsomorphicLayoutEffect","captureWrapperProps","lastWrapperProps","lastChildProps","renderIsScheduled","wrapperProps","childPropsFromStoreUpdate","notifyNestedSubs","current","subscribeUpdates","shouldHandleStateChanges","store","subscription","childPropsSelector","isMounted","additionalSubscribeListener","didUnsubscribe","lastThrownError","checkForUpdates","latestStoreState","getState","newChildProps","error","e","onStateChange","trySubscribe","unsubscribeWrapper","tryUnsubscribe","initStateUpdates","strictEqual","a","b","hasWarnedAboutDeprecatedPureOption","connect","mapStateToProps","mapDispatchToProps","mergeProps","pure","areStatesEqual","areOwnPropsEqual","shallowEqual","areStatePropsEqual","areMergedPropsEqual","forwardRef","context","ReactReduxContext","process","env","NODE_ENV","undefined","warning","Context","initMapStateToProps","mapStateToPropsFactory","initMapDispatchToProps","mapDispatchToPropsFactory","initMergeProps","mergePropsFactory","Boolean","wrapWithConnect","WrappedComponent","isValidElementType","Error","wrappedComponentName","displayName","name","selectorFactoryOptions","ConnectFunction","props","propsContext","reactReduxForwardedRef","useMemo","_objectWithoutPropertiesLoose","ContextToUse","Consumer","isContextConsumer","React","createElement","contextValue","useContext","didStoreComeFromProps","dispatch","didStoreComeFromContext","getServerState","defaultSelectorFactory","createSubscription","bind","overriddenContextValue","_extends","useRef","isProcessingDispatch","latestSubscriptionCallbackError","actualChildPropsSelector","selector","subscribeForReact","subscribe","reactListener","actualChildProps","message","stack","renderedWrappedComponent","ref","renderedChild","Provider","value","_Connect","memo","Connect","_forwarded","forwardConnectRef","forwarded","hoistStatics","_default"],"sources":["connect.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"reactReduxForwardedRef\"];\n\n/* eslint-disable valid-jsdoc, @typescript-eslint/no-unused-vars */\nimport hoistStatics from 'hoist-non-react-statics';\nimport React, { useContext, useMemo, useRef } from 'react';\nimport { isValidElementType, isContextConsumer } from 'react-is';\nimport defaultSelectorFactory from '../connect/selectorFactory';\nimport { mapDispatchToPropsFactory } from '../connect/mapDispatchToProps';\nimport { mapStateToPropsFactory } from '../connect/mapStateToProps';\nimport { mergePropsFactory } from '../connect/mergeProps';\nimport { createSubscription } from '../utils/Subscription';\nimport { useIsomorphicLayoutEffect } from '../utils/useIsomorphicLayoutEffect';\nimport shallowEqual from '../utils/shallowEqual';\nimport warning from '../utils/warning';\nimport { ReactReduxContext } from './Context';\nimport { notInitialized } from '../utils/useSyncExternalStore';\nlet useSyncExternalStore = notInitialized;\nexport const initializeConnect = fn => {\n  useSyncExternalStore = fn;\n}; // Define some constant arrays just to avoid re-creating these\n\nconst EMPTY_ARRAY = [null, 0];\nconst NO_SUBSCRIPTION_ARRAY = [null, null]; // Attempts to stringify whatever not-really-a-component value we were given\n// for logging in an error message\n\nconst stringifyComponent = Comp => {\n  try {\n    return JSON.stringify(Comp);\n  } catch (err) {\n    return String(Comp);\n  }\n};\n\n// This is \"just\" a `useLayoutEffect`, but with two modifications:\n// - we need to fall back to `useEffect` in SSR to avoid annoying warnings\n// - we extract this to a separate function to avoid closing over values\n//   and causing memory leaks\nfunction useIsomorphicLayoutEffectWithArgs(effectFunc, effectArgs, dependencies) {\n  useIsomorphicLayoutEffect(() => effectFunc(...effectArgs), dependencies);\n} // Effect callback, extracted: assign the latest props values to refs for later usage\n\n\nfunction captureWrapperProps(lastWrapperProps, lastChildProps, renderIsScheduled, wrapperProps, // actualChildProps: unknown,\nchildPropsFromStoreUpdate, notifyNestedSubs) {\n  // We want to capture the wrapper props and child props we used for later comparisons\n  lastWrapperProps.current = wrapperProps;\n  renderIsScheduled.current = false; // If the render was from a store update, clear out that reference and cascade the subscriber update\n\n  if (childPropsFromStoreUpdate.current) {\n    childPropsFromStoreUpdate.current = null;\n    notifyNestedSubs();\n  }\n} // Effect callback, extracted: subscribe to the Redux store or nearest connected ancestor,\n// check for updates after dispatched actions, and trigger re-renders.\n\n\nfunction subscribeUpdates(shouldHandleStateChanges, store, subscription, childPropsSelector, lastWrapperProps, lastChildProps, renderIsScheduled, isMounted, childPropsFromStoreUpdate, notifyNestedSubs, // forceComponentUpdateDispatch: React.Dispatch<any>,\nadditionalSubscribeListener) {\n  // If we're not subscribed to the store, nothing to do here\n  if (!shouldHandleStateChanges) return () => {}; // Capture values for checking if and when this component unmounts\n\n  let didUnsubscribe = false;\n  let lastThrownError = null; // We'll run this callback every time a store subscription update propagates to this component\n\n  const checkForUpdates = () => {\n    if (didUnsubscribe || !isMounted.current) {\n      // Don't run stale listeners.\n      // Redux doesn't guarantee unsubscriptions happen until next dispatch.\n      return;\n    } // TODO We're currently calling getState ourselves here, rather than letting `uSES` do it\n\n\n    const latestStoreState = store.getState();\n    let newChildProps, error;\n\n    try {\n      // Actually run the selector with the most recent store state and wrapper props\n      // to determine what the child props should be\n      newChildProps = childPropsSelector(latestStoreState, lastWrapperProps.current);\n    } catch (e) {\n      error = e;\n      lastThrownError = e;\n    }\n\n    if (!error) {\n      lastThrownError = null;\n    } // If the child props haven't changed, nothing to do here - cascade the subscription update\n\n\n    if (newChildProps === lastChildProps.current) {\n      if (!renderIsScheduled.current) {\n        notifyNestedSubs();\n      }\n    } else {\n      // Save references to the new child props.  Note that we track the \"child props from store update\"\n      // as a ref instead of a useState/useReducer because we need a way to determine if that value has\n      // been processed.  If this went into useState/useReducer, we couldn't clear out the value without\n      // forcing another re-render, which we don't want.\n      lastChildProps.current = newChildProps;\n      childPropsFromStoreUpdate.current = newChildProps;\n      renderIsScheduled.current = true; // TODO This is hacky and not how `uSES` is meant to be used\n      // Trigger the React `useSyncExternalStore` subscriber\n\n      additionalSubscribeListener();\n    }\n  }; // Actually subscribe to the nearest connected ancestor (or store)\n\n\n  subscription.onStateChange = checkForUpdates;\n  subscription.trySubscribe(); // Pull data from the store after first render in case the store has\n  // changed since we began.\n\n  checkForUpdates();\n\n  const unsubscribeWrapper = () => {\n    didUnsubscribe = true;\n    subscription.tryUnsubscribe();\n    subscription.onStateChange = null;\n\n    if (lastThrownError) {\n      // It's possible that we caught an error due to a bad mapState function, but the\n      // parent re-rendered without this component and we're about to unmount.\n      // This shouldn't happen as long as we do top-down subscriptions correctly, but\n      // if we ever do those wrong, this throw will surface the error in our tests.\n      // In that case, throw the error from here so it doesn't get lost.\n      throw lastThrownError;\n    }\n  };\n\n  return unsubscribeWrapper;\n} // Reducer initial state creation for our update reducer\n\n\nconst initStateUpdates = () => EMPTY_ARRAY;\n\nfunction strictEqual(a, b) {\n  return a === b;\n}\n/**\r\n * Infers the type of props that a connector will inject into a component.\r\n */\n\n\nlet hasWarnedAboutDeprecatedPureOption = false;\n/**\r\n * Connects a React component to a Redux store.\r\n *\r\n * - Without arguments, just wraps the component, without changing the behavior / props\r\n *\r\n * - If 2 params are passed (3rd param, mergeProps, is skipped), default behavior\r\n * is to override ownProps (as stated in the docs), so what remains is everything that's\r\n * not a state or dispatch prop\r\n *\r\n * - When 3rd param is passed, we don't know if ownProps propagate and whether they\r\n * should be valid component props, because it depends on mergeProps implementation.\r\n * As such, it is the user's responsibility to extend ownProps interface from state or\r\n * dispatch props or both when applicable\r\n *\r\n * @param mapStateToProps A function that extracts values from state\r\n * @param mapDispatchToProps Setup for dispatching actions\r\n * @param mergeProps Optional callback to merge state and dispatch props together\r\n * @param options Options for configuring the connection\r\n *\r\n */\n\nfunction connect(mapStateToProps, mapDispatchToProps, mergeProps, {\n  // The `pure` option has been removed, so TS doesn't like us destructuring this to check its existence.\n  // @ts-ignore\n  pure,\n  areStatesEqual = strictEqual,\n  areOwnPropsEqual = shallowEqual,\n  areStatePropsEqual = shallowEqual,\n  areMergedPropsEqual = shallowEqual,\n  // use React's forwardRef to expose a ref of the wrapped component\n  forwardRef = false,\n  // the context consumer to use\n  context = ReactReduxContext\n} = {}) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (pure !== undefined && !hasWarnedAboutDeprecatedPureOption) {\n      hasWarnedAboutDeprecatedPureOption = true;\n      warning('The `pure` option has been removed. `connect` is now always a \"pure/memoized\" component');\n    }\n  }\n\n  const Context = context;\n  const initMapStateToProps = mapStateToPropsFactory(mapStateToProps);\n  const initMapDispatchToProps = mapDispatchToPropsFactory(mapDispatchToProps);\n  const initMergeProps = mergePropsFactory(mergeProps);\n  const shouldHandleStateChanges = Boolean(mapStateToProps);\n\n  const wrapWithConnect = WrappedComponent => {\n    if (process.env.NODE_ENV !== 'production' && !isValidElementType(WrappedComponent)) {\n      throw new Error(`You must pass a component to the function returned by connect. Instead received ${stringifyComponent(WrappedComponent)}`);\n    }\n\n    const wrappedComponentName = WrappedComponent.displayName || WrappedComponent.name || 'Component';\n    const displayName = `Connect(${wrappedComponentName})`;\n    const selectorFactoryOptions = {\n      shouldHandleStateChanges,\n      displayName,\n      wrappedComponentName,\n      WrappedComponent,\n      // @ts-ignore\n      initMapStateToProps,\n      // @ts-ignore\n      initMapDispatchToProps,\n      initMergeProps,\n      areStatesEqual,\n      areStatePropsEqual,\n      areOwnPropsEqual,\n      areMergedPropsEqual\n    };\n\n    function ConnectFunction(props) {\n      const [propsContext, reactReduxForwardedRef, wrapperProps] = useMemo(() => {\n        // Distinguish between actual \"data\" props that were passed to the wrapper component,\n        // and values needed to control behavior (forwarded refs, alternate context instances).\n        // To maintain the wrapperProps object reference, memoize this destructuring.\n        const {\n          reactReduxForwardedRef\n        } = props,\n              wrapperProps = _objectWithoutPropertiesLoose(props, _excluded);\n\n        return [props.context, reactReduxForwardedRef, wrapperProps];\n      }, [props]);\n      const ContextToUse = useMemo(() => {\n        // Users may optionally pass in a custom context instance to use instead of our ReactReduxContext.\n        // Memoize the check that determines which context instance we should use.\n        return propsContext && propsContext.Consumer && // @ts-ignore\n        isContextConsumer( /*#__PURE__*/React.createElement(propsContext.Consumer, null)) ? propsContext : Context;\n      }, [propsContext, Context]); // Retrieve the store and ancestor subscription via context, if available\n\n      const contextValue = useContext(ContextToUse); // The store _must_ exist as either a prop or in context.\n      // We'll check to see if it _looks_ like a Redux store first.\n      // This allows us to pass through a `store` prop that is just a plain value.\n\n      const didStoreComeFromProps = Boolean(props.store) && Boolean(props.store.getState) && Boolean(props.store.dispatch);\n      const didStoreComeFromContext = Boolean(contextValue) && Boolean(contextValue.store);\n\n      if (process.env.NODE_ENV !== 'production' && !didStoreComeFromProps && !didStoreComeFromContext) {\n        throw new Error(`Could not find \"store\" in the context of ` + `\"${displayName}\". Either wrap the root component in a <Provider>, ` + `or pass a custom React context provider to <Provider> and the corresponding ` + `React context consumer to ${displayName} in connect options.`);\n      } // Based on the previous check, one of these must be true\n\n\n      const store = didStoreComeFromProps ? props.store : contextValue.store;\n      const getServerState = didStoreComeFromContext ? contextValue.getServerState : store.getState;\n      const childPropsSelector = useMemo(() => {\n        // The child props selector needs the store reference as an input.\n        // Re-create this selector whenever the store changes.\n        return defaultSelectorFactory(store.dispatch, selectorFactoryOptions);\n      }, [store]);\n      const [subscription, notifyNestedSubs] = useMemo(() => {\n        if (!shouldHandleStateChanges) return NO_SUBSCRIPTION_ARRAY; // This Subscription's source should match where store came from: props vs. context. A component\n        // connected to the store via props shouldn't use subscription from context, or vice versa.\n\n        const subscription = createSubscription(store, didStoreComeFromProps ? undefined : contextValue.subscription); // `notifyNestedSubs` is duplicated to handle the case where the component is unmounted in\n        // the middle of the notification loop, where `subscription` will then be null. This can\n        // probably be avoided if Subscription's listeners logic is changed to not call listeners\n        // that have been unsubscribed in the  middle of the notification loop.\n\n        const notifyNestedSubs = subscription.notifyNestedSubs.bind(subscription);\n        return [subscription, notifyNestedSubs];\n      }, [store, didStoreComeFromProps, contextValue]); // Determine what {store, subscription} value should be put into nested context, if necessary,\n      // and memoize that value to avoid unnecessary context updates.\n\n      const overriddenContextValue = useMemo(() => {\n        if (didStoreComeFromProps) {\n          // This component is directly subscribed to a store from props.\n          // We don't want descendants reading from this store - pass down whatever\n          // the existing context value is from the nearest connected ancestor.\n          return contextValue;\n        } // Otherwise, put this component's subscription instance into context, so that\n        // connected descendants won't update until after this component is done\n\n\n        return _extends({}, contextValue, {\n          subscription\n        });\n      }, [didStoreComeFromProps, contextValue, subscription]); // Set up refs to coordinate values between the subscription effect and the render logic\n\n      const lastChildProps = useRef();\n      const lastWrapperProps = useRef(wrapperProps);\n      const childPropsFromStoreUpdate = useRef();\n      const renderIsScheduled = useRef(false);\n      const isProcessingDispatch = useRef(false);\n      const isMounted = useRef(false);\n      const latestSubscriptionCallbackError = useRef();\n      useIsomorphicLayoutEffect(() => {\n        isMounted.current = true;\n        return () => {\n          isMounted.current = false;\n        };\n      }, []);\n      const actualChildPropsSelector = useMemo(() => {\n        const selector = () => {\n          // Tricky logic here:\n          // - This render may have been triggered by a Redux store update that produced new child props\n          // - However, we may have gotten new wrapper props after that\n          // If we have new child props, and the same wrapper props, we know we should use the new child props as-is.\n          // But, if we have new wrapper props, those might change the child props, so we have to recalculate things.\n          // So, we'll use the child props from store update only if the wrapper props are the same as last time.\n          if (childPropsFromStoreUpdate.current && wrapperProps === lastWrapperProps.current) {\n            return childPropsFromStoreUpdate.current;\n          } // TODO We're reading the store directly in render() here. Bad idea?\n          // This will likely cause Bad Things (TM) to happen in Concurrent Mode.\n          // Note that we do this because on renders _not_ caused by store updates, we need the latest store state\n          // to determine what the child props should be.\n\n\n          return childPropsSelector(store.getState(), wrapperProps);\n        };\n\n        return selector;\n      }, [store, wrapperProps]); // We need this to execute synchronously every time we re-render. However, React warns\n      // about useLayoutEffect in SSR, so we try to detect environment and fall back to\n      // just useEffect instead to avoid the warning, since neither will run anyway.\n\n      const subscribeForReact = useMemo(() => {\n        const subscribe = reactListener => {\n          if (!subscription) {\n            return () => {};\n          }\n\n          return subscribeUpdates(shouldHandleStateChanges, store, subscription, // @ts-ignore\n          childPropsSelector, lastWrapperProps, lastChildProps, renderIsScheduled, isMounted, childPropsFromStoreUpdate, notifyNestedSubs, reactListener);\n        };\n\n        return subscribe;\n      }, [subscription]);\n      useIsomorphicLayoutEffectWithArgs(captureWrapperProps, [lastWrapperProps, lastChildProps, renderIsScheduled, wrapperProps, childPropsFromStoreUpdate, notifyNestedSubs]);\n      let actualChildProps;\n\n      try {\n        actualChildProps = useSyncExternalStore( // TODO We're passing through a big wrapper that does a bunch of extra side effects besides subscribing\n        subscribeForReact, // TODO This is incredibly hacky. We've already processed the store update and calculated new child props,\n        // TODO and we're just passing that through so it triggers a re-render for us rather than relying on `uSES`.\n        actualChildPropsSelector, getServerState ? () => childPropsSelector(getServerState(), wrapperProps) : actualChildPropsSelector);\n      } catch (err) {\n        if (latestSubscriptionCallbackError.current) {\n          ;\n          err.message += `\\nThe error may be correlated with this previous error:\\n${latestSubscriptionCallbackError.current.stack}\\n\\n`;\n        }\n\n        throw err;\n      }\n\n      useIsomorphicLayoutEffect(() => {\n        latestSubscriptionCallbackError.current = undefined;\n        childPropsFromStoreUpdate.current = undefined;\n        lastChildProps.current = actualChildProps;\n      }); // Now that all that's done, we can finally try to actually render the child component.\n      // We memoize the elements for the rendered child component as an optimization.\n\n      const renderedWrappedComponent = useMemo(() => {\n        return (\n          /*#__PURE__*/\n          // @ts-ignore\n          React.createElement(WrappedComponent, _extends({}, actualChildProps, {\n            ref: reactReduxForwardedRef\n          }))\n        );\n      }, [reactReduxForwardedRef, WrappedComponent, actualChildProps]); // If React sees the exact same element reference as last time, it bails out of re-rendering\n      // that child, same as if it was wrapped in React.memo() or returned false from shouldComponentUpdate.\n\n      const renderedChild = useMemo(() => {\n        if (shouldHandleStateChanges) {\n          // If this component is subscribed to store updates, we need to pass its own\n          // subscription instance down to our descendants. That means rendering the same\n          // Context instance, and putting a different value into the context.\n          return /*#__PURE__*/React.createElement(ContextToUse.Provider, {\n            value: overriddenContextValue\n          }, renderedWrappedComponent);\n        }\n\n        return renderedWrappedComponent;\n      }, [ContextToUse, renderedWrappedComponent, overriddenContextValue]);\n      return renderedChild;\n    }\n\n    const _Connect = React.memo(ConnectFunction);\n\n    // Add a hacky cast to get the right output type\n    const Connect = _Connect;\n    Connect.WrappedComponent = WrappedComponent;\n    Connect.displayName = ConnectFunction.displayName = displayName;\n\n    if (forwardRef) {\n      const _forwarded = React.forwardRef(function forwardConnectRef(props, ref) {\n        // @ts-ignore\n        return /*#__PURE__*/React.createElement(Connect, _extends({}, props, {\n          reactReduxForwardedRef: ref\n        }));\n      });\n\n      const forwarded = _forwarded;\n      forwarded.displayName = displayName;\n      forwarded.WrappedComponent = WrappedComponent;\n      return hoistStatics(forwarded, WrappedComponent);\n    }\n\n    return hoistStatics(Connect, WrappedComponent);\n  };\n\n  return wrapWithConnect;\n}\n\nexport default connect;"],"mappings":"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"}