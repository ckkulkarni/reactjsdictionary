96fd4d85b2aa57cbcb8e1925211459ac
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.queryByLabelText = exports.queryAllByLabelText = exports.getByLabelText = exports.getAllByLabelText = exports.findByLabelText = exports.findAllByLabelText = void 0;
var _config = require("../config");
var _helpers = require("../helpers");
var _labelHelpers = require("../label-helpers");
var _allUtils = require("./all-utils");
function queryAllLabels(container) {
  return Array.from(container.querySelectorAll('label,input')).map(node => {
    return {
      node,
      textToMatch: (0, _labelHelpers.getLabelContent)(node)
    };
  }).filter(({
    textToMatch
  }) => textToMatch !== null);
}
const queryAllLabelsByText = (container, text, {
  exact = true,
  trim,
  collapseWhitespace,
  normalizer
} = {}) => {
  const matcher = exact ? _allUtils.matches : _allUtils.fuzzyMatches;
  const matchNormalizer = (0, _allUtils.makeNormalizer)({
    collapseWhitespace,
    trim,
    normalizer
  });
  const textToMatchByLabels = queryAllLabels(container);
  return textToMatchByLabels.filter(({
    node,
    textToMatch
  }) => matcher(textToMatch, node, text, matchNormalizer)).map(({
    node
  }) => node);
};
const queryAllByLabelText = (container, text, {
  selector = '*',
  exact = true,
  collapseWhitespace,
  trim,
  normalizer
} = {}) => {
  (0, _helpers.checkContainerType)(container);
  const matcher = exact ? _allUtils.matches : _allUtils.fuzzyMatches;
  const matchNormalizer = (0, _allUtils.makeNormalizer)({
    collapseWhitespace,
    trim,
    normalizer
  });
  const matchingLabelledElements = Array.from(container.querySelectorAll('*')).filter(element => {
    return (0, _labelHelpers.getRealLabels)(element).length || element.hasAttribute('aria-labelledby');
  }).reduce((labelledElements, labelledElement) => {
    const labelList = (0, _labelHelpers.getLabels)(container, labelledElement, {
      selector
    });
    labelList.filter(label => Boolean(label.formControl)).forEach(label => {
      if (matcher(label.content, label.formControl, text, matchNormalizer) && label.formControl) labelledElements.push(label.formControl);
    });
    const labelsValue = labelList.filter(label => Boolean(label.content)).map(label => label.content);
    if (matcher(labelsValue.join(' '), labelledElement, text, matchNormalizer)) labelledElements.push(labelledElement);
    if (labelsValue.length > 1) {
      labelsValue.forEach((labelValue, index) => {
        if (matcher(labelValue, labelledElement, text, matchNormalizer)) labelledElements.push(labelledElement);
        const labelsFiltered = [...labelsValue];
        labelsFiltered.splice(index, 1);
        if (labelsFiltered.length > 1) {
          if (matcher(labelsFiltered.join(' '), labelledElement, text, matchNormalizer)) labelledElements.push(labelledElement);
        }
      });
    }
    return labelledElements;
  }, []).concat((0, _allUtils.queryAllByAttribute)('aria-label', container, text, {
    exact,
    normalizer: matchNormalizer
  }));
  return Array.from(new Set(matchingLabelledElements)).filter(element => element.matches(selector));
};

// the getAll* query would normally look like this:
// const getAllByLabelText = makeGetAllQuery(
//   queryAllByLabelText,
//   (c, text) => `Unable to find a label with the text of: ${text}`,
// )
// however, we can give a more helpful error message than the generic one,
// so we're writing this one out by hand.
const getAllByLabelText = (container, text, ...rest) => {
  const els = queryAllByLabelText(container, text, ...rest);
  if (!els.length) {
    const labels = queryAllLabelsByText(container, text, ...rest);
    if (labels.length) {
      const tagNames = labels.map(label => getTagNameOfElementAssociatedWithLabelViaFor(container, label)).filter(tagName => !!tagName);
      if (tagNames.length) {
        throw (0, _config.getConfig)().getElementError(tagNames.map(tagName => `Found a label with the text of: ${text}, however the element associated with this label (<${tagName} />) is non-labellable [https://html.spec.whatwg.org/multipage/forms.html#category-label]. If you really need to label a <${tagName} />, you can use aria-label or aria-labelledby instead.`).join('\n\n'), container);
      } else {
        throw (0, _config.getConfig)().getElementError(`Found a label with the text of: ${text}, however no form control was found associated to that label. Make sure you're using the "for" attribute or "aria-labelledby" attribute correctly.`, container);
      }
    } else {
      throw (0, _config.getConfig)().getElementError(`Unable to find a label with the text of: ${text}`, container);
    }
  }
  return els;
};
function getTagNameOfElementAssociatedWithLabelViaFor(container, label) {
  const htmlFor = label.getAttribute('for');
  if (!htmlFor) {
    return null;
  }
  const element = container.querySelector(`[id="${htmlFor}"]`);
  return element ? element.tagName.toLowerCase() : null;
}

// the reason mentioned above is the same reason we're not using buildQueries
const getMultipleError = (c, text) => `Found multiple elements with the text of: ${text}`;
const queryByLabelText = (0, _allUtils.wrapSingleQueryWithSuggestion)((0, _allUtils.makeSingleQuery)(queryAllByLabelText, getMultipleError), queryAllByLabelText.name, 'query');
exports.queryByLabelText = queryByLabelText;
const getByLabelText = (0, _allUtils.makeSingleQuery)(getAllByLabelText, getMultipleError);
const findAllByLabelText = (0, _allUtils.makeFindQuery)((0, _allUtils.wrapAllByQueryWithSuggestion)(getAllByLabelText, getAllByLabelText.name, 'findAll'));
exports.findAllByLabelText = findAllByLabelText;
const findByLabelText = (0, _allUtils.makeFindQuery)((0, _allUtils.wrapSingleQueryWithSuggestion)(getByLabelText, getAllByLabelText.name, 'find'));
exports.findByLabelText = findByLabelText;
const getAllByLabelTextWithSuggestions = (0, _allUtils.wrapAllByQueryWithSuggestion)(getAllByLabelText, getAllByLabelText.name, 'getAll');
exports.getAllByLabelText = getAllByLabelTextWithSuggestions;
const getByLabelTextWithSuggestions = (0, _allUtils.wrapSingleQueryWithSuggestion)(getByLabelText, getAllByLabelText.name, 'get');
exports.getByLabelText = getByLabelTextWithSuggestions;
const queryAllByLabelTextWithSuggestions = (0, _allUtils.wrapAllByQueryWithSuggestion)(queryAllByLabelText, queryAllByLabelText.name, 'queryAll');
exports.queryAllByLabelText = queryAllByLabelTextWithSuggestions;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInF1ZXJ5QnlMYWJlbFRleHQiLCJxdWVyeUFsbEJ5TGFiZWxUZXh0IiwiZ2V0QnlMYWJlbFRleHQiLCJnZXRBbGxCeUxhYmVsVGV4dCIsImZpbmRCeUxhYmVsVGV4dCIsImZpbmRBbGxCeUxhYmVsVGV4dCIsIl9jb25maWciLCJyZXF1aXJlIiwiX2hlbHBlcnMiLCJfbGFiZWxIZWxwZXJzIiwiX2FsbFV0aWxzIiwicXVlcnlBbGxMYWJlbHMiLCJjb250YWluZXIiLCJBcnJheSIsImZyb20iLCJxdWVyeVNlbGVjdG9yQWxsIiwibWFwIiwibm9kZSIsInRleHRUb01hdGNoIiwiZ2V0TGFiZWxDb250ZW50IiwiZmlsdGVyIiwicXVlcnlBbGxMYWJlbHNCeVRleHQiLCJ0ZXh0IiwiZXhhY3QiLCJ0cmltIiwiY29sbGFwc2VXaGl0ZXNwYWNlIiwibm9ybWFsaXplciIsIm1hdGNoZXIiLCJtYXRjaGVzIiwiZnV6enlNYXRjaGVzIiwibWF0Y2hOb3JtYWxpemVyIiwibWFrZU5vcm1hbGl6ZXIiLCJ0ZXh0VG9NYXRjaEJ5TGFiZWxzIiwic2VsZWN0b3IiLCJjaGVja0NvbnRhaW5lclR5cGUiLCJtYXRjaGluZ0xhYmVsbGVkRWxlbWVudHMiLCJlbGVtZW50IiwiZ2V0UmVhbExhYmVscyIsImxlbmd0aCIsImhhc0F0dHJpYnV0ZSIsInJlZHVjZSIsImxhYmVsbGVkRWxlbWVudHMiLCJsYWJlbGxlZEVsZW1lbnQiLCJsYWJlbExpc3QiLCJnZXRMYWJlbHMiLCJsYWJlbCIsIkJvb2xlYW4iLCJmb3JtQ29udHJvbCIsImZvckVhY2giLCJjb250ZW50IiwicHVzaCIsImxhYmVsc1ZhbHVlIiwiam9pbiIsImxhYmVsVmFsdWUiLCJpbmRleCIsImxhYmVsc0ZpbHRlcmVkIiwic3BsaWNlIiwiY29uY2F0IiwicXVlcnlBbGxCeUF0dHJpYnV0ZSIsIlNldCIsInJlc3QiLCJlbHMiLCJsYWJlbHMiLCJ0YWdOYW1lcyIsImdldFRhZ05hbWVPZkVsZW1lbnRBc3NvY2lhdGVkV2l0aExhYmVsVmlhRm9yIiwidGFnTmFtZSIsImdldENvbmZpZyIsImdldEVsZW1lbnRFcnJvciIsImh0bWxGb3IiLCJnZXRBdHRyaWJ1dGUiLCJxdWVyeVNlbGVjdG9yIiwidG9Mb3dlckNhc2UiLCJnZXRNdWx0aXBsZUVycm9yIiwiYyIsIndyYXBTaW5nbGVRdWVyeVdpdGhTdWdnZXN0aW9uIiwibWFrZVNpbmdsZVF1ZXJ5IiwibmFtZSIsIm1ha2VGaW5kUXVlcnkiLCJ3cmFwQWxsQnlRdWVyeVdpdGhTdWdnZXN0aW9uIiwiZ2V0QWxsQnlMYWJlbFRleHRXaXRoU3VnZ2VzdGlvbnMiLCJnZXRCeUxhYmVsVGV4dFdpdGhTdWdnZXN0aW9ucyIsInF1ZXJ5QWxsQnlMYWJlbFRleHRXaXRoU3VnZ2VzdGlvbnMiXSwic291cmNlcyI6WyJsYWJlbC10ZXh0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5xdWVyeUJ5TGFiZWxUZXh0ID0gZXhwb3J0cy5xdWVyeUFsbEJ5TGFiZWxUZXh0ID0gZXhwb3J0cy5nZXRCeUxhYmVsVGV4dCA9IGV4cG9ydHMuZ2V0QWxsQnlMYWJlbFRleHQgPSBleHBvcnRzLmZpbmRCeUxhYmVsVGV4dCA9IGV4cG9ydHMuZmluZEFsbEJ5TGFiZWxUZXh0ID0gdm9pZCAwO1xudmFyIF9jb25maWcgPSByZXF1aXJlKFwiLi4vY29uZmlnXCIpO1xudmFyIF9oZWxwZXJzID0gcmVxdWlyZShcIi4uL2hlbHBlcnNcIik7XG52YXIgX2xhYmVsSGVscGVycyA9IHJlcXVpcmUoXCIuLi9sYWJlbC1oZWxwZXJzXCIpO1xudmFyIF9hbGxVdGlscyA9IHJlcXVpcmUoXCIuL2FsbC11dGlsc1wiKTtcbmZ1bmN0aW9uIHF1ZXJ5QWxsTGFiZWxzKGNvbnRhaW5lcikge1xuICByZXR1cm4gQXJyYXkuZnJvbShjb250YWluZXIucXVlcnlTZWxlY3RvckFsbCgnbGFiZWwsaW5wdXQnKSkubWFwKG5vZGUgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBub2RlLFxuICAgICAgdGV4dFRvTWF0Y2g6ICgwLCBfbGFiZWxIZWxwZXJzLmdldExhYmVsQ29udGVudCkobm9kZSlcbiAgICB9O1xuICB9KS5maWx0ZXIoKHtcbiAgICB0ZXh0VG9NYXRjaFxuICB9KSA9PiB0ZXh0VG9NYXRjaCAhPT0gbnVsbCk7XG59XG5jb25zdCBxdWVyeUFsbExhYmVsc0J5VGV4dCA9IChjb250YWluZXIsIHRleHQsIHtcbiAgZXhhY3QgPSB0cnVlLFxuICB0cmltLFxuICBjb2xsYXBzZVdoaXRlc3BhY2UsXG4gIG5vcm1hbGl6ZXJcbn0gPSB7fSkgPT4ge1xuICBjb25zdCBtYXRjaGVyID0gZXhhY3QgPyBfYWxsVXRpbHMubWF0Y2hlcyA6IF9hbGxVdGlscy5mdXp6eU1hdGNoZXM7XG4gIGNvbnN0IG1hdGNoTm9ybWFsaXplciA9ICgwLCBfYWxsVXRpbHMubWFrZU5vcm1hbGl6ZXIpKHtcbiAgICBjb2xsYXBzZVdoaXRlc3BhY2UsXG4gICAgdHJpbSxcbiAgICBub3JtYWxpemVyXG4gIH0pO1xuICBjb25zdCB0ZXh0VG9NYXRjaEJ5TGFiZWxzID0gcXVlcnlBbGxMYWJlbHMoY29udGFpbmVyKTtcbiAgcmV0dXJuIHRleHRUb01hdGNoQnlMYWJlbHMuZmlsdGVyKCh7XG4gICAgbm9kZSxcbiAgICB0ZXh0VG9NYXRjaFxuICB9KSA9PiBtYXRjaGVyKHRleHRUb01hdGNoLCBub2RlLCB0ZXh0LCBtYXRjaE5vcm1hbGl6ZXIpKS5tYXAoKHtcbiAgICBub2RlXG4gIH0pID0+IG5vZGUpO1xufTtcbmNvbnN0IHF1ZXJ5QWxsQnlMYWJlbFRleHQgPSAoY29udGFpbmVyLCB0ZXh0LCB7XG4gIHNlbGVjdG9yID0gJyonLFxuICBleGFjdCA9IHRydWUsXG4gIGNvbGxhcHNlV2hpdGVzcGFjZSxcbiAgdHJpbSxcbiAgbm9ybWFsaXplclxufSA9IHt9KSA9PiB7XG4gICgwLCBfaGVscGVycy5jaGVja0NvbnRhaW5lclR5cGUpKGNvbnRhaW5lcik7XG4gIGNvbnN0IG1hdGNoZXIgPSBleGFjdCA/IF9hbGxVdGlscy5tYXRjaGVzIDogX2FsbFV0aWxzLmZ1enp5TWF0Y2hlcztcbiAgY29uc3QgbWF0Y2hOb3JtYWxpemVyID0gKDAsIF9hbGxVdGlscy5tYWtlTm9ybWFsaXplcikoe1xuICAgIGNvbGxhcHNlV2hpdGVzcGFjZSxcbiAgICB0cmltLFxuICAgIG5vcm1hbGl6ZXJcbiAgfSk7XG4gIGNvbnN0IG1hdGNoaW5nTGFiZWxsZWRFbGVtZW50cyA9IEFycmF5LmZyb20oY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoJyonKSkuZmlsdGVyKGVsZW1lbnQgPT4ge1xuICAgIHJldHVybiAoMCwgX2xhYmVsSGVscGVycy5nZXRSZWFsTGFiZWxzKShlbGVtZW50KS5sZW5ndGggfHwgZWxlbWVudC5oYXNBdHRyaWJ1dGUoJ2FyaWEtbGFiZWxsZWRieScpO1xuICB9KS5yZWR1Y2UoKGxhYmVsbGVkRWxlbWVudHMsIGxhYmVsbGVkRWxlbWVudCkgPT4ge1xuICAgIGNvbnN0IGxhYmVsTGlzdCA9ICgwLCBfbGFiZWxIZWxwZXJzLmdldExhYmVscykoY29udGFpbmVyLCBsYWJlbGxlZEVsZW1lbnQsIHtcbiAgICAgIHNlbGVjdG9yXG4gICAgfSk7XG4gICAgbGFiZWxMaXN0LmZpbHRlcihsYWJlbCA9PiBCb29sZWFuKGxhYmVsLmZvcm1Db250cm9sKSkuZm9yRWFjaChsYWJlbCA9PiB7XG4gICAgICBpZiAobWF0Y2hlcihsYWJlbC5jb250ZW50LCBsYWJlbC5mb3JtQ29udHJvbCwgdGV4dCwgbWF0Y2hOb3JtYWxpemVyKSAmJiBsYWJlbC5mb3JtQ29udHJvbCkgbGFiZWxsZWRFbGVtZW50cy5wdXNoKGxhYmVsLmZvcm1Db250cm9sKTtcbiAgICB9KTtcbiAgICBjb25zdCBsYWJlbHNWYWx1ZSA9IGxhYmVsTGlzdC5maWx0ZXIobGFiZWwgPT4gQm9vbGVhbihsYWJlbC5jb250ZW50KSkubWFwKGxhYmVsID0+IGxhYmVsLmNvbnRlbnQpO1xuICAgIGlmIChtYXRjaGVyKGxhYmVsc1ZhbHVlLmpvaW4oJyAnKSwgbGFiZWxsZWRFbGVtZW50LCB0ZXh0LCBtYXRjaE5vcm1hbGl6ZXIpKSBsYWJlbGxlZEVsZW1lbnRzLnB1c2gobGFiZWxsZWRFbGVtZW50KTtcbiAgICBpZiAobGFiZWxzVmFsdWUubGVuZ3RoID4gMSkge1xuICAgICAgbGFiZWxzVmFsdWUuZm9yRWFjaCgobGFiZWxWYWx1ZSwgaW5kZXgpID0+IHtcbiAgICAgICAgaWYgKG1hdGNoZXIobGFiZWxWYWx1ZSwgbGFiZWxsZWRFbGVtZW50LCB0ZXh0LCBtYXRjaE5vcm1hbGl6ZXIpKSBsYWJlbGxlZEVsZW1lbnRzLnB1c2gobGFiZWxsZWRFbGVtZW50KTtcbiAgICAgICAgY29uc3QgbGFiZWxzRmlsdGVyZWQgPSBbLi4ubGFiZWxzVmFsdWVdO1xuICAgICAgICBsYWJlbHNGaWx0ZXJlZC5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICBpZiAobGFiZWxzRmlsdGVyZWQubGVuZ3RoID4gMSkge1xuICAgICAgICAgIGlmIChtYXRjaGVyKGxhYmVsc0ZpbHRlcmVkLmpvaW4oJyAnKSwgbGFiZWxsZWRFbGVtZW50LCB0ZXh0LCBtYXRjaE5vcm1hbGl6ZXIpKSBsYWJlbGxlZEVsZW1lbnRzLnB1c2gobGFiZWxsZWRFbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBsYWJlbGxlZEVsZW1lbnRzO1xuICB9LCBbXSkuY29uY2F0KCgwLCBfYWxsVXRpbHMucXVlcnlBbGxCeUF0dHJpYnV0ZSkoJ2FyaWEtbGFiZWwnLCBjb250YWluZXIsIHRleHQsIHtcbiAgICBleGFjdCxcbiAgICBub3JtYWxpemVyOiBtYXRjaE5vcm1hbGl6ZXJcbiAgfSkpO1xuICByZXR1cm4gQXJyYXkuZnJvbShuZXcgU2V0KG1hdGNoaW5nTGFiZWxsZWRFbGVtZW50cykpLmZpbHRlcihlbGVtZW50ID0+IGVsZW1lbnQubWF0Y2hlcyhzZWxlY3RvcikpO1xufTtcblxuLy8gdGhlIGdldEFsbCogcXVlcnkgd291bGQgbm9ybWFsbHkgbG9vayBsaWtlIHRoaXM6XG4vLyBjb25zdCBnZXRBbGxCeUxhYmVsVGV4dCA9IG1ha2VHZXRBbGxRdWVyeShcbi8vICAgcXVlcnlBbGxCeUxhYmVsVGV4dCxcbi8vICAgKGMsIHRleHQpID0+IGBVbmFibGUgdG8gZmluZCBhIGxhYmVsIHdpdGggdGhlIHRleHQgb2Y6ICR7dGV4dH1gLFxuLy8gKVxuLy8gaG93ZXZlciwgd2UgY2FuIGdpdmUgYSBtb3JlIGhlbHBmdWwgZXJyb3IgbWVzc2FnZSB0aGFuIHRoZSBnZW5lcmljIG9uZSxcbi8vIHNvIHdlJ3JlIHdyaXRpbmcgdGhpcyBvbmUgb3V0IGJ5IGhhbmQuXG5jb25zdCBnZXRBbGxCeUxhYmVsVGV4dCA9IChjb250YWluZXIsIHRleHQsIC4uLnJlc3QpID0+IHtcbiAgY29uc3QgZWxzID0gcXVlcnlBbGxCeUxhYmVsVGV4dChjb250YWluZXIsIHRleHQsIC4uLnJlc3QpO1xuICBpZiAoIWVscy5sZW5ndGgpIHtcbiAgICBjb25zdCBsYWJlbHMgPSBxdWVyeUFsbExhYmVsc0J5VGV4dChjb250YWluZXIsIHRleHQsIC4uLnJlc3QpO1xuICAgIGlmIChsYWJlbHMubGVuZ3RoKSB7XG4gICAgICBjb25zdCB0YWdOYW1lcyA9IGxhYmVscy5tYXAobGFiZWwgPT4gZ2V0VGFnTmFtZU9mRWxlbWVudEFzc29jaWF0ZWRXaXRoTGFiZWxWaWFGb3IoY29udGFpbmVyLCBsYWJlbCkpLmZpbHRlcih0YWdOYW1lID0+ICEhdGFnTmFtZSk7XG4gICAgICBpZiAodGFnTmFtZXMubGVuZ3RoKSB7XG4gICAgICAgIHRocm93ICgwLCBfY29uZmlnLmdldENvbmZpZykoKS5nZXRFbGVtZW50RXJyb3IodGFnTmFtZXMubWFwKHRhZ05hbWUgPT4gYEZvdW5kIGEgbGFiZWwgd2l0aCB0aGUgdGV4dCBvZjogJHt0ZXh0fSwgaG93ZXZlciB0aGUgZWxlbWVudCBhc3NvY2lhdGVkIHdpdGggdGhpcyBsYWJlbCAoPCR7dGFnTmFtZX0gLz4pIGlzIG5vbi1sYWJlbGxhYmxlIFtodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NhdGVnb3J5LWxhYmVsXS4gSWYgeW91IHJlYWxseSBuZWVkIHRvIGxhYmVsIGEgPCR7dGFnTmFtZX0gLz4sIHlvdSBjYW4gdXNlIGFyaWEtbGFiZWwgb3IgYXJpYS1sYWJlbGxlZGJ5IGluc3RlYWQuYCkuam9pbignXFxuXFxuJyksIGNvbnRhaW5lcik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyAoMCwgX2NvbmZpZy5nZXRDb25maWcpKCkuZ2V0RWxlbWVudEVycm9yKGBGb3VuZCBhIGxhYmVsIHdpdGggdGhlIHRleHQgb2Y6ICR7dGV4dH0sIGhvd2V2ZXIgbm8gZm9ybSBjb250cm9sIHdhcyBmb3VuZCBhc3NvY2lhdGVkIHRvIHRoYXQgbGFiZWwuIE1ha2Ugc3VyZSB5b3UncmUgdXNpbmcgdGhlIFwiZm9yXCIgYXR0cmlidXRlIG9yIFwiYXJpYS1sYWJlbGxlZGJ5XCIgYXR0cmlidXRlIGNvcnJlY3RseS5gLCBjb250YWluZXIpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyAoMCwgX2NvbmZpZy5nZXRDb25maWcpKCkuZ2V0RWxlbWVudEVycm9yKGBVbmFibGUgdG8gZmluZCBhIGxhYmVsIHdpdGggdGhlIHRleHQgb2Y6ICR7dGV4dH1gLCBjb250YWluZXIpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZWxzO1xufTtcbmZ1bmN0aW9uIGdldFRhZ05hbWVPZkVsZW1lbnRBc3NvY2lhdGVkV2l0aExhYmVsVmlhRm9yKGNvbnRhaW5lciwgbGFiZWwpIHtcbiAgY29uc3QgaHRtbEZvciA9IGxhYmVsLmdldEF0dHJpYnV0ZSgnZm9yJyk7XG4gIGlmICghaHRtbEZvcikge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGNvbnN0IGVsZW1lbnQgPSBjb250YWluZXIucXVlcnlTZWxlY3RvcihgW2lkPVwiJHtodG1sRm9yfVwiXWApO1xuICByZXR1cm4gZWxlbWVudCA/IGVsZW1lbnQudGFnTmFtZS50b0xvd2VyQ2FzZSgpIDogbnVsbDtcbn1cblxuLy8gdGhlIHJlYXNvbiBtZW50aW9uZWQgYWJvdmUgaXMgdGhlIHNhbWUgcmVhc29uIHdlJ3JlIG5vdCB1c2luZyBidWlsZFF1ZXJpZXNcbmNvbnN0IGdldE11bHRpcGxlRXJyb3IgPSAoYywgdGV4dCkgPT4gYEZvdW5kIG11bHRpcGxlIGVsZW1lbnRzIHdpdGggdGhlIHRleHQgb2Y6ICR7dGV4dH1gO1xuY29uc3QgcXVlcnlCeUxhYmVsVGV4dCA9ICgwLCBfYWxsVXRpbHMud3JhcFNpbmdsZVF1ZXJ5V2l0aFN1Z2dlc3Rpb24pKCgwLCBfYWxsVXRpbHMubWFrZVNpbmdsZVF1ZXJ5KShxdWVyeUFsbEJ5TGFiZWxUZXh0LCBnZXRNdWx0aXBsZUVycm9yKSwgcXVlcnlBbGxCeUxhYmVsVGV4dC5uYW1lLCAncXVlcnknKTtcbmV4cG9ydHMucXVlcnlCeUxhYmVsVGV4dCA9IHF1ZXJ5QnlMYWJlbFRleHQ7XG5jb25zdCBnZXRCeUxhYmVsVGV4dCA9ICgwLCBfYWxsVXRpbHMubWFrZVNpbmdsZVF1ZXJ5KShnZXRBbGxCeUxhYmVsVGV4dCwgZ2V0TXVsdGlwbGVFcnJvcik7XG5jb25zdCBmaW5kQWxsQnlMYWJlbFRleHQgPSAoMCwgX2FsbFV0aWxzLm1ha2VGaW5kUXVlcnkpKCgwLCBfYWxsVXRpbHMud3JhcEFsbEJ5UXVlcnlXaXRoU3VnZ2VzdGlvbikoZ2V0QWxsQnlMYWJlbFRleHQsIGdldEFsbEJ5TGFiZWxUZXh0Lm5hbWUsICdmaW5kQWxsJykpO1xuZXhwb3J0cy5maW5kQWxsQnlMYWJlbFRleHQgPSBmaW5kQWxsQnlMYWJlbFRleHQ7XG5jb25zdCBmaW5kQnlMYWJlbFRleHQgPSAoMCwgX2FsbFV0aWxzLm1ha2VGaW5kUXVlcnkpKCgwLCBfYWxsVXRpbHMud3JhcFNpbmdsZVF1ZXJ5V2l0aFN1Z2dlc3Rpb24pKGdldEJ5TGFiZWxUZXh0LCBnZXRBbGxCeUxhYmVsVGV4dC5uYW1lLCAnZmluZCcpKTtcbmV4cG9ydHMuZmluZEJ5TGFiZWxUZXh0ID0gZmluZEJ5TGFiZWxUZXh0O1xuY29uc3QgZ2V0QWxsQnlMYWJlbFRleHRXaXRoU3VnZ2VzdGlvbnMgPSAoMCwgX2FsbFV0aWxzLndyYXBBbGxCeVF1ZXJ5V2l0aFN1Z2dlc3Rpb24pKGdldEFsbEJ5TGFiZWxUZXh0LCBnZXRBbGxCeUxhYmVsVGV4dC5uYW1lLCAnZ2V0QWxsJyk7XG5leHBvcnRzLmdldEFsbEJ5TGFiZWxUZXh0ID0gZ2V0QWxsQnlMYWJlbFRleHRXaXRoU3VnZ2VzdGlvbnM7XG5jb25zdCBnZXRCeUxhYmVsVGV4dFdpdGhTdWdnZXN0aW9ucyA9ICgwLCBfYWxsVXRpbHMud3JhcFNpbmdsZVF1ZXJ5V2l0aFN1Z2dlc3Rpb24pKGdldEJ5TGFiZWxUZXh0LCBnZXRBbGxCeUxhYmVsVGV4dC5uYW1lLCAnZ2V0Jyk7XG5leHBvcnRzLmdldEJ5TGFiZWxUZXh0ID0gZ2V0QnlMYWJlbFRleHRXaXRoU3VnZ2VzdGlvbnM7XG5jb25zdCBxdWVyeUFsbEJ5TGFiZWxUZXh0V2l0aFN1Z2dlc3Rpb25zID0gKDAsIF9hbGxVdGlscy53cmFwQWxsQnlRdWVyeVdpdGhTdWdnZXN0aW9uKShxdWVyeUFsbEJ5TGFiZWxUZXh0LCBxdWVyeUFsbEJ5TGFiZWxUZXh0Lm5hbWUsICdxdWVyeUFsbCcpO1xuZXhwb3J0cy5xdWVyeUFsbEJ5TGFiZWxUZXh0ID0gcXVlcnlBbGxCeUxhYmVsVGV4dFdpdGhTdWdnZXN0aW9uczsiXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxPQUFPLEVBQUUsWUFBWSxFQUFFO0VBQzNDQyxLQUFLLEVBQUU7QUFDVCxDQUFDLENBQUM7QUFDRkQsT0FBTyxDQUFDRSxnQkFBZ0IsR0FBR0YsT0FBTyxDQUFDRyxtQkFBbUIsR0FBR0gsT0FBTyxDQUFDSSxjQUFjLEdBQUdKLE9B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