{"version":3,"names":["Object","defineProperty","exports","value","enumerable","get","_types","CallbackTestRunner","EmittingTestRunner","default","_chalk","data","_interopRequireDefault","require","_emittery","_pLimit","_jestUtil","_jestWorker","_runTest","obj","__esModule","TestRunner","eventEmitter","runTests","tests","watcher","options","serial","createInBandTestRun","createParallelTestRun","#createInBandTestRun","process","env","JEST_WORKER_ID","mutex","reduce","promise","test","then","isInterrupted","CancelRun","sendMessageToJest","eventName","args","emit","deepCyclicCopy","keepPrototype","path","_globalConfig","context","config","resolver","_context","result","error","Promise","resolve","#createParallelTestRun","resolvers","Map","has","id","set","serializableModuleMap","moduleMap","toJSON","worker","Worker","enableWorkerThreads","workerThreads","exposedMethods","forkOptions","serialization","stdio","idleMemoryLimit","workerIdleMemoryLimit","undefined","maxRetries","numWorkers","maxWorkers","setupArgs","serializableResolvers","Array","from","values","getStdout","pipe","stdout","getStderr","stderr","runTestInWorker","reject","changedFiles","sourcesRelatedToTestsInChangedFiles","globalConfig","UNSTABLE_onCustomMessage","event","payload","onInterrupt","_","on","state","interrupted","runAllTests","all","map","cleanup","forceExited","end","console","yellow","race","listener","Error","constructor","message","name"],"sources":["index.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nObject.defineProperty(exports, 'CallbackTestRunner', {\n  enumerable: true,\n  get: function () {\n    return _types.CallbackTestRunner;\n  }\n});\nObject.defineProperty(exports, 'EmittingTestRunner', {\n  enumerable: true,\n  get: function () {\n    return _types.EmittingTestRunner;\n  }\n});\nexports.default = void 0;\nfunction _chalk() {\n  const data = _interopRequireDefault(require('chalk'));\n  _chalk = function () {\n    return data;\n  };\n  return data;\n}\nfunction _emittery() {\n  const data = _interopRequireDefault(require('emittery'));\n  _emittery = function () {\n    return data;\n  };\n  return data;\n}\nfunction _pLimit() {\n  const data = _interopRequireDefault(require('p-limit'));\n  _pLimit = function () {\n    return data;\n  };\n  return data;\n}\nfunction _jestUtil() {\n  const data = require('jest-util');\n  _jestUtil = function () {\n    return data;\n  };\n  return data;\n}\nfunction _jestWorker() {\n  const data = require('jest-worker');\n  _jestWorker = function () {\n    return data;\n  };\n  return data;\n}\nvar _runTest = _interopRequireDefault(require('./runTest'));\nvar _types = require('./types');\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nclass TestRunner extends _types.EmittingTestRunner {\n  #eventEmitter = new (_emittery().default)();\n  async runTests(tests, watcher, options) {\n    return options.serial\n      ? this.#createInBandTestRun(tests, watcher)\n      : this.#createParallelTestRun(tests, watcher);\n  }\n  async #createInBandTestRun(tests, watcher) {\n    process.env.JEST_WORKER_ID = '1';\n    const mutex = (0, _pLimit().default)(1);\n    return tests.reduce(\n      (promise, test) =>\n        mutex(() =>\n          promise\n            .then(async () => {\n              if (watcher.isInterrupted()) {\n                throw new CancelRun();\n              }\n\n              // `deepCyclicCopy` used here to avoid mem-leak\n              const sendMessageToJest = (eventName, args) =>\n                this.#eventEmitter.emit(\n                  eventName,\n                  (0, _jestUtil().deepCyclicCopy)(args, {\n                    keepPrototype: false\n                  })\n                );\n              await this.#eventEmitter.emit('test-file-start', [test]);\n              return (0, _runTest.default)(\n                test.path,\n                this._globalConfig,\n                test.context.config,\n                test.context.resolver,\n                this._context,\n                sendMessageToJest\n              );\n            })\n            .then(\n              result =>\n                this.#eventEmitter.emit('test-file-success', [test, result]),\n              error =>\n                this.#eventEmitter.emit('test-file-failure', [test, error])\n            )\n        ),\n      Promise.resolve()\n    );\n  }\n  async #createParallelTestRun(tests, watcher) {\n    const resolvers = new Map();\n    for (const test of tests) {\n      if (!resolvers.has(test.context.config.id)) {\n        resolvers.set(test.context.config.id, {\n          config: test.context.config,\n          serializableModuleMap: test.context.moduleMap.toJSON()\n        });\n      }\n    }\n    const worker = new (_jestWorker().Worker)(require.resolve('./testWorker'), {\n      enableWorkerThreads: this._globalConfig.workerThreads,\n      exposedMethods: ['worker'],\n      forkOptions: {\n        serialization: 'json',\n        stdio: 'pipe'\n      },\n      // The workerIdleMemoryLimit should've been converted to a number during\n      // the normalization phase.\n      idleMemoryLimit:\n        typeof this._globalConfig.workerIdleMemoryLimit === 'number'\n          ? this._globalConfig.workerIdleMemoryLimit\n          : undefined,\n      maxRetries: 3,\n      numWorkers: this._globalConfig.maxWorkers,\n      setupArgs: [\n        {\n          serializableResolvers: Array.from(resolvers.values())\n        }\n      ]\n    });\n    if (worker.getStdout()) worker.getStdout().pipe(process.stdout);\n    if (worker.getStderr()) worker.getStderr().pipe(process.stderr);\n    const mutex = (0, _pLimit().default)(this._globalConfig.maxWorkers);\n\n    // Send test suites to workers continuously instead of all at once to track\n    // the start time of individual tests.\n    const runTestInWorker = test =>\n      mutex(async () => {\n        if (watcher.isInterrupted()) {\n          return Promise.reject();\n        }\n        await this.#eventEmitter.emit('test-file-start', [test]);\n        const promise = worker.worker({\n          config: test.context.config,\n          context: {\n            ...this._context,\n            changedFiles:\n              this._context.changedFiles &&\n              Array.from(this._context.changedFiles),\n            sourcesRelatedToTestsInChangedFiles:\n              this._context.sourcesRelatedToTestsInChangedFiles &&\n              Array.from(this._context.sourcesRelatedToTestsInChangedFiles)\n          },\n          globalConfig: this._globalConfig,\n          path: test.path\n        });\n        if (promise.UNSTABLE_onCustomMessage) {\n          // TODO: Get appropriate type for `onCustomMessage`\n          promise.UNSTABLE_onCustomMessage(([event, payload]) =>\n            this.#eventEmitter.emit(event, payload)\n          );\n        }\n        return promise;\n      });\n    const onInterrupt = new Promise((_, reject) => {\n      watcher.on('change', state => {\n        if (state.interrupted) {\n          reject(new CancelRun());\n        }\n      });\n    });\n    const runAllTests = Promise.all(\n      tests.map(test =>\n        runTestInWorker(test).then(\n          result =>\n            this.#eventEmitter.emit('test-file-success', [test, result]),\n          error => this.#eventEmitter.emit('test-file-failure', [test, error])\n        )\n      )\n    );\n    const cleanup = async () => {\n      const {forceExited} = await worker.end();\n      if (forceExited) {\n        console.error(\n          _chalk().default.yellow(\n            'A worker process has failed to exit gracefully and has been force exited. ' +\n              'This is likely caused by tests leaking due to improper teardown. ' +\n              'Try running with --detectOpenHandles to find leaks. ' +\n              'Active timers can also cause this, ensure that .unref() was called on them.'\n          )\n        );\n      }\n    };\n    return Promise.race([runAllTests, onInterrupt]).then(cleanup, cleanup);\n  }\n  on(eventName, listener) {\n    return this.#eventEmitter.on(eventName, listener);\n  }\n}\nexports.default = TestRunner;\nclass CancelRun extends Error {\n  constructor(message) {\n    super(message);\n    this.name = 'CancelRun';\n  }\n}\n"],"mappings":"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"}