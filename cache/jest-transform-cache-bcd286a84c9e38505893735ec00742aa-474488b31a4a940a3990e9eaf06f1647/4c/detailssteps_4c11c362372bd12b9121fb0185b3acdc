8d8876b658df5ac380dbe0bde8b20c53
"use strict";

var _react = _interopRequireDefault(require("react"));
var _jestCucumber = require("jest-cucumber");
var _react2 = require("@testing-library/react");
var _reactRouterDom = require("react-router-dom");
require("@testing-library/jest-dom/extend-expect");
var _axios = _interopRequireDefault(require("axios"));
var _Details = _interopRequireDefault(require("../../Dictionary/Details"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const feature = (0, _jestCucumber.loadFeature)("src/Components/Features/details.feature");
(0, _jestCucumber.defineFeature)(feature, test => {
  test("User views word details with phonetics and meanings", ({
    given,
    when,
    then
  }) => {
    let screen;
    beforeEach(() => {
      jest.clearAllMocks();
    });
    given("The user is on the Details page", () => {
      screen = (0, _react2.render)( /*#__PURE__*/_react.default.createElement(_reactRouterDom.MemoryRouter, {
        initialEntries: ["/details/testWord"]
      }, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Routes, null, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
        path: "/details/:id",
        element: /*#__PURE__*/_react.default.createElement(_Details.default, null)
      }))));
    });
    when("The user views the details for a word", async () => {
      screen = (0, _react2.render)( /*#__PURE__*/_react.default.createElement(_reactRouterDom.MemoryRouter, {
        initialEntries: ["/details/testWord"]
      }, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Routes, null, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
        path: "/details/:id",
        element: /*#__PURE__*/_react.default.createElement(_Details.default, null)
      }))));
      jest.spyOn(_axios.default, "get").mockResolvedValueOnce({
        data: [{
          word: "example",
          phonetics: [{
            text: "/ɪɡˈzæmpəl/",
            audio: "example-audio.mp3"
          }],
          meanings: [{
            partOfSpeech: "noun",
            definitions: [{
              definition: "a representative form or pattern",
              example: "I followed your example",
              synonyms: ["model", "pattern", "prototype"]
            }]
          }]
        }]
      });
    });
    then("The word details should be displayed", async () => {
      screen = (0, _react2.render)( /*#__PURE__*/_react.default.createElement(_reactRouterDom.MemoryRouter, {
        initialEntries: ["/details/testWord"]
      }, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Routes, null, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
        path: "/details/:id",
        element: /*#__PURE__*/_react.default.createElement(_Details.default, null)
      }))));
      jest.spyOn(_axios.default, "get").mockResolvedValueOnce({
        data: [{
          word: "example",
          phonetics: [{
            text: "/ɪɡˈzæmpəl/",
            audio: "example-audio.mp3"
          }],
          meanings: [{
            partOfSpeech: "noun",
            definitions: [{
              definition: "a representative form or pattern",
              example: "I followed your example",
              synonyms: ["model", "pattern", "prototype"]
            }]
          }]
        }]
      });
      await (0, _react2.waitFor)(() => {
        const wordName = screen.getAllByTestId("word-name");
        const wordPhonetics = screen.getAllByTestId("word-phonetics");
        const wordPos = screen.getAllByTestId("word-pos");
        const wordDef = screen.getAllByTestId("word-definition");
        const wordExample = screen.getAllByTestId("word-example");
        expect(wordName[0]).toHaveTextContent("example");
        expect(wordPhonetics[0]).toHaveTextContent("/ɪɡˈzæmpəl/");
        expect(wordPos[0]).toHaveTextContent("noun");
        expect(wordDef[0]).toHaveTextContent("a representative form or pattern");
        expect(wordExample[0]).toHaveTextContent("I followed your example");
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,